fragment ActionDetails on Action {
    id
    name

    ... on EmailAction {
        recipients
        subjectTemplate
        emailBodyTemplate: bodyTemplate
        useProxy

    }

    ... on HumioRepoAction {
        ingestToken
    }

    ... on OpsGenieAction {
        apiUrl
        genieKey
        useProxy
    }

    ... on PagerDutyAction {
        severity
        routingKey
        useProxy
    }

    ... on SlackAction {
        url
        fields {
            fieldName
            value
        }
        useProxy
    }

    ... on SlackPostMessageAction {
        apiToken
        channels
        fields {
            fieldName
            value
        }
        useProxy
    }

    ... on VictorOpsAction {
        messageType
        notifyUrl
        useProxy
    }

    ... on WebhookAction {
        method
        url
        headers {
            header
            value
        }
        WebhookBodyTemplate: bodyTemplate
        ignoreSSL
        useProxy
    }
}

query ListActions(
    $SearchDomainName: String!
) {
    searchDomain(
        name: $SearchDomainName
    ) {
        actions {
            ...ActionDetails
        }
    }
}

query GetActionByID(
    $SearchDomainName: String!
    $ActionID: String!
) {
    searchDomain(
        name: $SearchDomainName
    ) {
        action(
            id: $ActionID
        ) {
            ...ActionDetails
        }
    }
}

mutation DeleteActionByID(
    $SearchDomainName: String!
    $ActionID: String!
) {
    deleteAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
    })
}

mutation UpdateEmailAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $Recipients: [String!]!
    $SubjectTemplate: String
    $BodyTemplate: String
    $UseProxy: Boolean!
) {
    updateEmailAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        recipients: $Recipients
        subjectTemplate: $SubjectTemplate
        bodyTemplate: $BodyTemplate
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdateHumioRepoAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $IngestToken: String!
) {
    updateHumioRepoAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        ingestToken: $IngestToken
    }) {
        __typename
    }
}

mutation UpdateOpsGenieAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $ApiUrl: String!
    $GenieKey: String!
    $UseProxy: Boolean!
) {
    updateOpsGenieAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        apiUrl: $ApiUrl
        genieKey: $GenieKey
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdatePagerDutyAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $Severity: String!
    $RoutingKey: String!
    $UseProxy: Boolean!
) {
    updatePagerDutyAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        severity: $Severity
        routingKey: $RoutingKey
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdateSlackAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $Fields: [SlackFieldEntryInput!]!
    $Url: String!
    $UseProxy: Boolean!
) {
    updateSlackAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        fields: $Fields
        url: $Url
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdateSlackPostMessageAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $ApiToken: String!
    $Channels: [String!]!
    $Fields: [SlackFieldEntryInput!]!
    $UseProxy: Boolean!
) {
    updateSlackPostMessageAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        apiToken: $ApiToken
        channels: $Channels
        fields: $Fields
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdateVictorOpsAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $MessageType: String!
    $NotifyUrl: String!
    $UseProxy: Boolean!
) {
    updateVictorOpsAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        messageType: $MessageType
        notifyUrl: $NotifyUrl
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation UpdateWebhookAction(
    $SearchDomainName: String!
    $ActionID: String!
    $ActionName: String!
    $Url: String!
    $Method: String!
    $Headers: [HttpHeaderEntryInput!]!
    $BodyTemplate: String!
    $IgnoreSSL: Boolean!
    $UseProxy: Boolean!
) {
    updateWebhookAction(input: {
        viewName: $SearchDomainName
        id: $ActionID
        name: $ActionName
        url: $Url
        method: $Method
        headers: $Headers
        bodyTemplate: $BodyTemplate
        ignoreSSL: $IgnoreSSL
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateEmailAction(
    $SearchDomainName: String!
    $ActionName: String!
    $Recipients: [String!]!
    $SubjectTemplate: String
    $BodyTemplate: String
    $UseProxy: Boolean!
) {
    createEmailAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        recipients: $Recipients
        subjectTemplate: $SubjectTemplate
        bodyTemplate: $BodyTemplate
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateHumioRepoAction(
    $SearchDomainName: String!
    $ActionName: String!
    $IngestToken: String!
) {
    createHumioRepoAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        ingestToken: $IngestToken
    }) {
        __typename
    }
}

mutation CreateOpsGenieAction(
    $SearchDomainName: String!
    $ActionName: String!
    $ApiUrl: String!
    $GenieKey: String!
    $UseProxy: Boolean!
) {
    createOpsGenieAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        apiUrl: $ApiUrl
        genieKey: $GenieKey
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreatePagerDutyAction(
    $SearchDomainName: String!
    $ActionName: String!
    $Severity: String!
    $RoutingKey: String!
    $UseProxy: Boolean!
) {
    createPagerDutyAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        severity: $Severity
        routingKey: $RoutingKey
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateSlackAction(
    $SearchDomainName: String!
    $ActionName: String!
    $Fields: [SlackFieldEntryInput!]!
    $Url: String!
    $UseProxy: Boolean!
) {
    createSlackAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        fields: $Fields
        url: $Url
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateSlackPostMessageAction(
    $SearchDomainName: String!
    $ActionName: String!
    $ApiToken: String!
    $Channels: [String!]!
    $Fields: [SlackFieldEntryInput!]!
    $UseProxy: Boolean!
) {
    createSlackPostMessageAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        apiToken: $ApiToken
        channels: $Channels
        fields: $Fields
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateVictorOpsAction(
    $SearchDomainName: String!
    $ActionName: String!
    $MessageType: String!
    $NotifyUrl: String!
    $UseProxy: Boolean!
) {
    createVictorOpsAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        messageType: $MessageType
        notifyUrl: $NotifyUrl
        useProxy: $UseProxy
    }) {
        __typename
    }
}

mutation CreateWebhookAction(
    $SearchDomainName: String!
    $ActionName: String!
    $Url: String!
    $Method: String!
    $Headers: [HttpHeaderEntryInput!]!
    $BodyTemplate: String!
    $IgnoreSSL: Boolean!
    $UseProxy: Boolean!
) {
    createWebhookAction(input: {
        viewName: $SearchDomainName
        name: $ActionName
        url: $Url
        method: $Method
        headers: $Headers
        bodyTemplate: $BodyTemplate
        ignoreSSL: $IgnoreSSL
        useProxy: $UseProxy
    }) {
        __typename
    }
}