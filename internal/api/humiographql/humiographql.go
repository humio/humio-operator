// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package humiographql

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// ActionDetails includes the GraphQL fields of Action requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
//
// ActionDetails is implemented by the following types:
// ActionDetailsEmailAction
// ActionDetailsHumioRepoAction
// ActionDetailsOpsGenieAction
// ActionDetailsPagerDutyAction
// ActionDetailsSlackAction
// ActionDetailsSlackPostMessageAction
// ActionDetailsUploadFileAction
// ActionDetailsVictorOpsAction
// ActionDetailsWebhookAction
type ActionDetails interface {
	implementsGraphQLInterfaceActionDetails()
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// An action that can be invoked from a trigger.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// An action that can be invoked from a trigger.
	GetName() string
}

func (v *ActionDetailsEmailAction) implementsGraphQLInterfaceActionDetails()            {}
func (v *ActionDetailsHumioRepoAction) implementsGraphQLInterfaceActionDetails()        {}
func (v *ActionDetailsOpsGenieAction) implementsGraphQLInterfaceActionDetails()         {}
func (v *ActionDetailsPagerDutyAction) implementsGraphQLInterfaceActionDetails()        {}
func (v *ActionDetailsSlackAction) implementsGraphQLInterfaceActionDetails()            {}
func (v *ActionDetailsSlackPostMessageAction) implementsGraphQLInterfaceActionDetails() {}
func (v *ActionDetailsUploadFileAction) implementsGraphQLInterfaceActionDetails()       {}
func (v *ActionDetailsVictorOpsAction) implementsGraphQLInterfaceActionDetails()        {}
func (v *ActionDetailsWebhookAction) implementsGraphQLInterfaceActionDetails()          {}

func __unmarshalActionDetails(b []byte, v *ActionDetails) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(ActionDetailsEmailAction)
		return json.Unmarshal(b, *v)
	case "HumioRepoAction":
		*v = new(ActionDetailsHumioRepoAction)
		return json.Unmarshal(b, *v)
	case "OpsGenieAction":
		*v = new(ActionDetailsOpsGenieAction)
		return json.Unmarshal(b, *v)
	case "PagerDutyAction":
		*v = new(ActionDetailsPagerDutyAction)
		return json.Unmarshal(b, *v)
	case "SlackAction":
		*v = new(ActionDetailsSlackAction)
		return json.Unmarshal(b, *v)
	case "SlackPostMessageAction":
		*v = new(ActionDetailsSlackPostMessageAction)
		return json.Unmarshal(b, *v)
	case "UploadFileAction":
		*v = new(ActionDetailsUploadFileAction)
		return json.Unmarshal(b, *v)
	case "VictorOpsAction":
		*v = new(ActionDetailsVictorOpsAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(ActionDetailsWebhookAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Action.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ActionDetails: "%v"`, tn.TypeName)
	}
}

func __marshalActionDetails(v *ActionDetails) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ActionDetailsEmailAction:
		typename = "EmailAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsEmailAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsHumioRepoAction:
		typename = "HumioRepoAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsHumioRepoAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsOpsGenieAction:
		typename = "OpsGenieAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsOpsGenieAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsPagerDutyAction:
		typename = "PagerDutyAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsPagerDutyAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsSlackAction:
		typename = "SlackAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsSlackAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsSlackPostMessageAction:
		typename = "SlackPostMessageAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsSlackPostMessageAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsUploadFileAction:
		typename = "UploadFileAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsUploadFileAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsVictorOpsAction:
		typename = "VictorOpsAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsVictorOpsAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionDetailsWebhookAction:
		typename = "WebhookAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionDetailsWebhookAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ActionDetails: "%T"`, v)
	}
}

// ActionDetails includes the GraphQL fields of EmailAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsEmailAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// List of email addresses to send an email to.
	// Stability: Long-term
	Recipients []string `json:"recipients"`
	// Subject of the email. Can be templated with values from the result.
	// Stability: Long-term
	SubjectTemplate *string `json:"subjectTemplate"`
	// Body of the email. Can be templated with values from the result.
	// Stability: Long-term
	EmailBodyTemplate *string `json:"emailBodyTemplate"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsEmailAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetId() string { return v.Id }

// GetName returns ActionDetailsEmailAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetName() string { return v.Name }

// GetRecipients returns ActionDetailsEmailAction.Recipients, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetRecipients() []string { return v.Recipients }

// GetSubjectTemplate returns ActionDetailsEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetSubjectTemplate() *string { return v.SubjectTemplate }

// GetEmailBodyTemplate returns ActionDetailsEmailAction.EmailBodyTemplate, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetEmailBodyTemplate() *string { return v.EmailBodyTemplate }

// GetUseProxy returns ActionDetailsEmailAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsEmailAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetailsFieldsSlackFieldEntry includes the requested fields of the GraphQL type SlackFieldEntry.
// The GraphQL type's documentation follows.
//
// Field entry in a Slack message
type ActionDetailsFieldsSlackFieldEntry struct {
	// Key of a Slack field.
	// Stability: Long-term
	FieldName string `json:"fieldName"`
	// Value of a Slack field.
	// Stability: Long-term
	Value string `json:"value"`
}

// GetFieldName returns ActionDetailsFieldsSlackFieldEntry.FieldName, and is useful for accessing the field via an interface.
func (v *ActionDetailsFieldsSlackFieldEntry) GetFieldName() string { return v.FieldName }

// GetValue returns ActionDetailsFieldsSlackFieldEntry.Value, and is useful for accessing the field via an interface.
func (v *ActionDetailsFieldsSlackFieldEntry) GetValue() string { return v.Value }

// ActionDetailsHeadersHttpHeaderEntry includes the requested fields of the GraphQL type HttpHeaderEntry.
// The GraphQL type's documentation follows.
//
// A http request header.
type ActionDetailsHeadersHttpHeaderEntry struct {
	// Key of a http(s) header.
	// Stability: Long-term
	Header string `json:"header"`
	// Value of a http(s) header.
	// Stability: Long-term
	Value string `json:"value"`
}

// GetHeader returns ActionDetailsHeadersHttpHeaderEntry.Header, and is useful for accessing the field via an interface.
func (v *ActionDetailsHeadersHttpHeaderEntry) GetHeader() string { return v.Header }

// GetValue returns ActionDetailsHeadersHttpHeaderEntry.Value, and is useful for accessing the field via an interface.
func (v *ActionDetailsHeadersHttpHeaderEntry) GetValue() string { return v.Value }

// ActionDetails includes the GraphQL fields of HumioRepoAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsHumioRepoAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Humio ingest token for the dataspace that the action should ingest into.
	// Stability: Long-term
	IngestToken string `json:"ingestToken"`
}

// GetId returns ActionDetailsHumioRepoAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsHumioRepoAction) GetId() string { return v.Id }

// GetName returns ActionDetailsHumioRepoAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsHumioRepoAction) GetName() string { return v.Name }

// GetIngestToken returns ActionDetailsHumioRepoAction.IngestToken, and is useful for accessing the field via an interface.
func (v *ActionDetailsHumioRepoAction) GetIngestToken() string { return v.IngestToken }

// ActionDetails includes the GraphQL fields of OpsGenieAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsOpsGenieAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// OpsGenie webhook url to send the request to.
	// Stability: Long-term
	ApiUrl string `json:"apiUrl"`
	// Key to authenticate with OpsGenie.
	// Stability: Long-term
	GenieKey string `json:"genieKey"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsOpsGenieAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsOpsGenieAction) GetId() string { return v.Id }

// GetName returns ActionDetailsOpsGenieAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsOpsGenieAction) GetName() string { return v.Name }

// GetApiUrl returns ActionDetailsOpsGenieAction.ApiUrl, and is useful for accessing the field via an interface.
func (v *ActionDetailsOpsGenieAction) GetApiUrl() string { return v.ApiUrl }

// GetGenieKey returns ActionDetailsOpsGenieAction.GenieKey, and is useful for accessing the field via an interface.
func (v *ActionDetailsOpsGenieAction) GetGenieKey() string { return v.GenieKey }

// GetUseProxy returns ActionDetailsOpsGenieAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsOpsGenieAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetails includes the GraphQL fields of PagerDutyAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsPagerDutyAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Severity level to give to the message.
	// Stability: Long-term
	Severity string `json:"severity"`
	// Routing key to authenticate with PagerDuty.
	// Stability: Long-term
	RoutingKey string `json:"routingKey"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsPagerDutyAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsPagerDutyAction) GetId() string { return v.Id }

// GetName returns ActionDetailsPagerDutyAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsPagerDutyAction) GetName() string { return v.Name }

// GetSeverity returns ActionDetailsPagerDutyAction.Severity, and is useful for accessing the field via an interface.
func (v *ActionDetailsPagerDutyAction) GetSeverity() string { return v.Severity }

// GetRoutingKey returns ActionDetailsPagerDutyAction.RoutingKey, and is useful for accessing the field via an interface.
func (v *ActionDetailsPagerDutyAction) GetRoutingKey() string { return v.RoutingKey }

// GetUseProxy returns ActionDetailsPagerDutyAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsPagerDutyAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetails includes the GraphQL fields of SlackAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsSlackAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Slack webhook url to send the request to.
	// Stability: Long-term
	Url string `json:"url"`
	// Fields to include within the Slack message. Can be templated with values from the result.
	// Stability: Long-term
	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsSlackAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackAction) GetId() string { return v.Id }

// GetName returns ActionDetailsSlackAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackAction) GetName() string { return v.Name }

// GetUrl returns ActionDetailsSlackAction.Url, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackAction) GetUrl() string { return v.Url }

// GetFields returns ActionDetailsSlackAction.Fields, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackAction) GetFields() []ActionDetailsFieldsSlackFieldEntry { return v.Fields }

// GetUseProxy returns ActionDetailsSlackAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetails includes the GraphQL fields of SlackPostMessageAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsSlackPostMessageAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Api token to authenticate with Slack.
	// Stability: Long-term
	ApiToken string `json:"apiToken"`
	// List of Slack channels to message.
	// Stability: Long-term
	Channels []string `json:"channels"`
	// Fields to include within the Slack message. Can be templated with values from the result.
	// Stability: Long-term
	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsSlackPostMessageAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetId() string { return v.Id }

// GetName returns ActionDetailsSlackPostMessageAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetName() string { return v.Name }

// GetApiToken returns ActionDetailsSlackPostMessageAction.ApiToken, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetApiToken() string { return v.ApiToken }

// GetChannels returns ActionDetailsSlackPostMessageAction.Channels, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetChannels() []string { return v.Channels }

// GetFields returns ActionDetailsSlackPostMessageAction.Fields, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetFields() []ActionDetailsFieldsSlackFieldEntry {
	return v.Fields
}

// GetUseProxy returns ActionDetailsSlackPostMessageAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsSlackPostMessageAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetails includes the GraphQL fields of UploadFileAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsUploadFileAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetId returns ActionDetailsUploadFileAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsUploadFileAction) GetId() string { return v.Id }

// GetName returns ActionDetailsUploadFileAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsUploadFileAction) GetName() string { return v.Name }

// ActionDetails includes the GraphQL fields of VictorOpsAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsVictorOpsAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Type of the VictorOps message to make.
	// Stability: Long-term
	MessageType string `json:"messageType"`
	// VictorOps webhook url to send the request to.
	// Stability: Long-term
	NotifyUrl string `json:"notifyUrl"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsVictorOpsAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsVictorOpsAction) GetId() string { return v.Id }

// GetName returns ActionDetailsVictorOpsAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsVictorOpsAction) GetName() string { return v.Name }

// GetMessageType returns ActionDetailsVictorOpsAction.MessageType, and is useful for accessing the field via an interface.
func (v *ActionDetailsVictorOpsAction) GetMessageType() string { return v.MessageType }

// GetNotifyUrl returns ActionDetailsVictorOpsAction.NotifyUrl, and is useful for accessing the field via an interface.
func (v *ActionDetailsVictorOpsAction) GetNotifyUrl() string { return v.NotifyUrl }

// GetUseProxy returns ActionDetailsVictorOpsAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsVictorOpsAction) GetUseProxy() bool { return v.UseProxy }

// ActionDetails includes the GraphQL fields of WebhookAction requested by the fragment ActionDetails.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionDetailsWebhookAction struct {
	// An action that can be invoked from a trigger.
	Id string `json:"id"`
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
	// Method to use for the request.
	// Stability: Long-term
	Method string `json:"method"`
	// Url to send the http(s) request to.
	// Stability: Long-term
	Url string `json:"url"`
	// Headers of the http(s) request.
	// Stability: Long-term
	Headers []ActionDetailsHeadersHttpHeaderEntry `json:"headers"`
	// Body of the http(s) request. Can be templated with values from the result.
	// Stability: Long-term
	WebhookBodyTemplate string `json:"WebhookBodyTemplate"`
	// Flag indicating whether SSL should be ignored for the request.
	// Stability: Long-term
	IgnoreSSL bool `json:"ignoreSSL"`
	// Defines whether the action should use the configured proxy to make web requests.
	// Stability: Long-term
	UseProxy bool `json:"useProxy"`
}

// GetId returns ActionDetailsWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetId() string { return v.Id }

// GetName returns ActionDetailsWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetName() string { return v.Name }

// GetMethod returns ActionDetailsWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetMethod() string { return v.Method }

// GetUrl returns ActionDetailsWebhookAction.Url, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetUrl() string { return v.Url }

// GetHeaders returns ActionDetailsWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetHeaders() []ActionDetailsHeadersHttpHeaderEntry {
	return v.Headers
}

// GetWebhookBodyTemplate returns ActionDetailsWebhookAction.WebhookBodyTemplate, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetWebhookBodyTemplate() string { return v.WebhookBodyTemplate }

// GetIgnoreSSL returns ActionDetailsWebhookAction.IgnoreSSL, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetIgnoreSSL() bool { return v.IgnoreSSL }

// GetUseProxy returns ActionDetailsWebhookAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ActionDetailsWebhookAction) GetUseProxy() bool { return v.UseProxy }

// ActionName includes the GraphQL fields of Action requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
//
// ActionName is implemented by the following types:
// ActionNameEmailAction
// ActionNameHumioRepoAction
// ActionNameOpsGenieAction
// ActionNamePagerDutyAction
// ActionNameSlackAction
// ActionNameSlackPostMessageAction
// ActionNameUploadFileAction
// ActionNameVictorOpsAction
// ActionNameWebhookAction
type ActionName interface {
	implementsGraphQLInterfaceActionName()
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// An action that can be invoked from a trigger.
	GetName() string
}

func (v *ActionNameEmailAction) implementsGraphQLInterfaceActionName()            {}
func (v *ActionNameHumioRepoAction) implementsGraphQLInterfaceActionName()        {}
func (v *ActionNameOpsGenieAction) implementsGraphQLInterfaceActionName()         {}
func (v *ActionNamePagerDutyAction) implementsGraphQLInterfaceActionName()        {}
func (v *ActionNameSlackAction) implementsGraphQLInterfaceActionName()            {}
func (v *ActionNameSlackPostMessageAction) implementsGraphQLInterfaceActionName() {}
func (v *ActionNameUploadFileAction) implementsGraphQLInterfaceActionName()       {}
func (v *ActionNameVictorOpsAction) implementsGraphQLInterfaceActionName()        {}
func (v *ActionNameWebhookAction) implementsGraphQLInterfaceActionName()          {}

func __unmarshalActionName(b []byte, v *ActionName) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(ActionNameEmailAction)
		return json.Unmarshal(b, *v)
	case "HumioRepoAction":
		*v = new(ActionNameHumioRepoAction)
		return json.Unmarshal(b, *v)
	case "OpsGenieAction":
		*v = new(ActionNameOpsGenieAction)
		return json.Unmarshal(b, *v)
	case "PagerDutyAction":
		*v = new(ActionNamePagerDutyAction)
		return json.Unmarshal(b, *v)
	case "SlackAction":
		*v = new(ActionNameSlackAction)
		return json.Unmarshal(b, *v)
	case "SlackPostMessageAction":
		*v = new(ActionNameSlackPostMessageAction)
		return json.Unmarshal(b, *v)
	case "UploadFileAction":
		*v = new(ActionNameUploadFileAction)
		return json.Unmarshal(b, *v)
	case "VictorOpsAction":
		*v = new(ActionNameVictorOpsAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(ActionNameWebhookAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Action.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ActionName: "%v"`, tn.TypeName)
	}
}

func __marshalActionName(v *ActionName) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ActionNameEmailAction:
		typename = "EmailAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameEmailAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameHumioRepoAction:
		typename = "HumioRepoAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameHumioRepoAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameOpsGenieAction:
		typename = "OpsGenieAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameOpsGenieAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNamePagerDutyAction:
		typename = "PagerDutyAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNamePagerDutyAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameSlackAction:
		typename = "SlackAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameSlackAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameSlackPostMessageAction:
		typename = "SlackPostMessageAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameSlackPostMessageAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameUploadFileAction:
		typename = "UploadFileAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameUploadFileAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameVictorOpsAction:
		typename = "VictorOpsAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameVictorOpsAction
		}{typename, v}
		return json.Marshal(result)
	case *ActionNameWebhookAction:
		typename = "WebhookAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ActionNameWebhookAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ActionName: "%T"`, v)
	}
}

// ActionName includes the GraphQL fields of EmailAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameEmailAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameEmailAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameEmailAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of HumioRepoAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameHumioRepoAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameHumioRepoAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameHumioRepoAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of OpsGenieAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameOpsGenieAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameOpsGenieAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameOpsGenieAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of PagerDutyAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNamePagerDutyAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNamePagerDutyAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNamePagerDutyAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of SlackAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameSlackAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameSlackAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameSlackAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of SlackPostMessageAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameSlackPostMessageAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameSlackPostMessageAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameSlackPostMessageAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of UploadFileAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameUploadFileAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameUploadFileAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameUploadFileAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of VictorOpsAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameVictorOpsAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameVictorOpsAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameVictorOpsAction) GetName() string { return v.Name }

// ActionName includes the GraphQL fields of WebhookAction requested by the fragment ActionName.
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ActionNameWebhookAction struct {
	// An action that can be invoked from a trigger.
	Name string `json:"name"`
}

// GetName returns ActionNameWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *ActionNameWebhookAction) GetName() string { return v.Name }

// AddIngestTokenAddIngestTokenV3IngestToken includes the requested fields of the GraphQL type IngestToken.
// The GraphQL type's documentation follows.
//
// An API ingest token used for sending data to LogScale.
type AddIngestTokenAddIngestTokenV3IngestToken struct {
	IngestTokenDetails `json:"-"`
}

// GetName returns AddIngestTokenAddIngestTokenV3IngestToken.Name, and is useful for accessing the field via an interface.
func (v *AddIngestTokenAddIngestTokenV3IngestToken) GetName() string {
	return v.IngestTokenDetails.Name
}

// GetToken returns AddIngestTokenAddIngestTokenV3IngestToken.Token, and is useful for accessing the field via an interface.
func (v *AddIngestTokenAddIngestTokenV3IngestToken) GetToken() string {
	return v.IngestTokenDetails.Token
}

// GetParser returns AddIngestTokenAddIngestTokenV3IngestToken.Parser, and is useful for accessing the field via an interface.
func (v *AddIngestTokenAddIngestTokenV3IngestToken) GetParser() *IngestTokenDetailsParser {
	return v.IngestTokenDetails.Parser
}

func (v *AddIngestTokenAddIngestTokenV3IngestToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIngestTokenAddIngestTokenV3IngestToken
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIngestTokenAddIngestTokenV3IngestToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IngestTokenDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIngestTokenAddIngestTokenV3IngestToken struct {
	Name string `json:"name"`

	Token string `json:"token"`

	Parser *IngestTokenDetailsParser `json:"parser"`
}

func (v *AddIngestTokenAddIngestTokenV3IngestToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIngestTokenAddIngestTokenV3IngestToken) __premarshalJSON() (*__premarshalAddIngestTokenAddIngestTokenV3IngestToken, error) {
	var retval __premarshalAddIngestTokenAddIngestTokenV3IngestToken

	retval.Name = v.IngestTokenDetails.Name
	retval.Token = v.IngestTokenDetails.Token
	retval.Parser = v.IngestTokenDetails.Parser
	return &retval, nil
}

// AddIngestTokenResponse is returned by AddIngestToken on success.
type AddIngestTokenResponse struct {
	// Create a new Ingest API Token.
	// Stability: Long-term
	AddIngestTokenV3 AddIngestTokenAddIngestTokenV3IngestToken `json:"addIngestTokenV3"`
}

// GetAddIngestTokenV3 returns AddIngestTokenResponse.AddIngestTokenV3, and is useful for accessing the field via an interface.
func (v *AddIngestTokenResponse) GetAddIngestTokenV3() AddIngestTokenAddIngestTokenV3IngestToken {
	return v.AddIngestTokenV3
}

// AddUserAddUserV2PendingUser includes the requested fields of the GraphQL type PendingUser.
// The GraphQL type's documentation follows.
//
// A pending user. I.e. a user that was invited to join an organization.
type AddUserAddUserV2PendingUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AddUserAddUserV2PendingUser.Typename, and is useful for accessing the field via an interface.
func (v *AddUserAddUserV2PendingUser) GetTypename() *string { return v.Typename }

// AddUserAddUserV2User includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user profile.
type AddUserAddUserV2User struct {
	Typename    *string `json:"__typename"`
	UserDetails `json:"-"`
}

// GetTypename returns AddUserAddUserV2User.Typename, and is useful for accessing the field via an interface.
func (v *AddUserAddUserV2User) GetTypename() *string { return v.Typename }

// GetId returns AddUserAddUserV2User.Id, and is useful for accessing the field via an interface.
func (v *AddUserAddUserV2User) GetId() string { return v.UserDetails.Id }

// GetUsername returns AddUserAddUserV2User.Username, and is useful for accessing the field via an interface.
func (v *AddUserAddUserV2User) GetUsername() string { return v.UserDetails.Username }

// GetIsRoot returns AddUserAddUserV2User.IsRoot, and is useful for accessing the field via an interface.
func (v *AddUserAddUserV2User) GetIsRoot() bool { return v.UserDetails.IsRoot }

func (v *AddUserAddUserV2User) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddUserAddUserV2User
		graphql.NoUnmarshalJSON
	}
	firstPass.AddUserAddUserV2User = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddUserAddUserV2User struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Username string `json:"username"`

	IsRoot bool `json:"isRoot"`
}

func (v *AddUserAddUserV2User) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddUserAddUserV2User) __premarshalJSON() (*__premarshalAddUserAddUserV2User, error) {
	var retval __premarshalAddUserAddUserV2User

	retval.Typename = v.Typename
	retval.Id = v.UserDetails.Id
	retval.Username = v.UserDetails.Username
	retval.IsRoot = v.UserDetails.IsRoot
	return &retval, nil
}

// AddUserAddUserV2UserOrPendingUser includes the requested fields of the GraphQL interface userOrPendingUser.
//
// AddUserAddUserV2UserOrPendingUser is implemented by the following types:
// AddUserAddUserV2PendingUser
// AddUserAddUserV2User
// The GraphQL type's documentation follows.
//
// A user or pending user, depending on whether an invitation was sent
type AddUserAddUserV2UserOrPendingUser interface {
	implementsGraphQLInterfaceAddUserAddUserV2UserOrPendingUser()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AddUserAddUserV2PendingUser) implementsGraphQLInterfaceAddUserAddUserV2UserOrPendingUser() {}
func (v *AddUserAddUserV2User) implementsGraphQLInterfaceAddUserAddUserV2UserOrPendingUser()        {}

func __unmarshalAddUserAddUserV2UserOrPendingUser(b []byte, v *AddUserAddUserV2UserOrPendingUser) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PendingUser":
		*v = new(AddUserAddUserV2PendingUser)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AddUserAddUserV2User)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing userOrPendingUser.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AddUserAddUserV2UserOrPendingUser: "%v"`, tn.TypeName)
	}
}

func __marshalAddUserAddUserV2UserOrPendingUser(v *AddUserAddUserV2UserOrPendingUser) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AddUserAddUserV2PendingUser:
		typename = "PendingUser"

		result := struct {
			TypeName string `json:"__typename"`
			*AddUserAddUserV2PendingUser
		}{typename, v}
		return json.Marshal(result)
	case *AddUserAddUserV2User:
		typename = "User"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddUserAddUserV2User
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AddUserAddUserV2UserOrPendingUser: "%T"`, v)
	}
}

// AddUserResponse is returned by AddUser on success.
type AddUserResponse struct {
	// Add or invite a user. Calling this with an invitation token, will activate the account. By activating the account the client accepts LogScale's Terms and Conditions: https://www.humio.com/terms-and-conditions
	// Stability: Long-term
	AddUserV2 AddUserAddUserV2UserOrPendingUser `json:"-"`
}

// GetAddUserV2 returns AddUserResponse.AddUserV2, and is useful for accessing the field via an interface.
func (v *AddUserResponse) GetAddUserV2() AddUserAddUserV2UserOrPendingUser { return v.AddUserV2 }

func (v *AddUserResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddUserResponse
		AddUserV2 json.RawMessage `json:"addUserV2"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AddUserResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddUserV2
		src := firstPass.AddUserV2
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAddUserAddUserV2UserOrPendingUser(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AddUserResponse.AddUserV2: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAddUserResponse struct {
	AddUserV2 json.RawMessage `json:"addUserV2"`
}

func (v *AddUserResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddUserResponse) __premarshalJSON() (*__premarshalAddUserResponse, error) {
	var retval __premarshalAddUserResponse

	{

		dst := &retval.AddUserV2
		src := v.AddUserV2
		var err error
		*dst, err = __marshalAddUserAddUserV2UserOrPendingUser(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AddUserResponse.AddUserV2: %w", err)
		}
	}
	return &retval, nil
}

// AggregateAlertDetails includes the GraphQL fields of AggregateAlert requested by the fragment AggregateAlertDetails.
// The GraphQL type's documentation follows.
//
// An aggregate alert.
type AggregateAlertDetails struct {
	// Id of the aggregate alert.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the aggregate alert.
	// Stability: Long-term
	Name string `json:"name"`
	// Description of the aggregate alert.
	// Stability: Long-term
	Description *string `json:"description"`
	// LogScale query to execute.
	// Stability: Long-term
	QueryString string `json:"queryString"`
	// Search interval in seconds.
	// Stability: Long-term
	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`
	// Throttle time in seconds.
	// Stability: Long-term
	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	// Stability: Long-term
	ThrottleField *string `json:"throttleField"`
	// Labels attached to the aggregate alert.
	// Stability: Long-term
	Labels []string `json:"labels"`
	// Flag indicating whether the aggregate alert is enabled.
	// Stability: Long-term
	Enabled bool `json:"enabled"`
	// Trigger mode used for triggering the alert.
	// Stability: Long-term
	TriggerMode TriggerMode `json:"triggerMode"`
	// Timestamp type to use for a query.
	// Stability: Long-term
	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`
	// List of actions to fire on query result.
	// Stability: Long-term
	Actions []SharedActionNameType `json:"-"`
	// Ownership of the query run by this alert
	// Stability: Long-term
	QueryOwnership SharedQueryOwnershipType `json:"-"`
}

// GetId returns AggregateAlertDetails.Id, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetId() string { return v.Id }

// GetName returns AggregateAlertDetails.Name, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetName() string { return v.Name }

// GetDescription returns AggregateAlertDetails.Description, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetDescription() *string { return v.Description }

// GetQueryString returns AggregateAlertDetails.QueryString, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetQueryString() string { return v.QueryString }

// GetSearchIntervalSeconds returns AggregateAlertDetails.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetSearchIntervalSeconds() int64 { return v.SearchIntervalSeconds }

// GetThrottleTimeSeconds returns AggregateAlertDetails.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetThrottleTimeSeconds() int64 { return v.ThrottleTimeSeconds }

// GetThrottleField returns AggregateAlertDetails.ThrottleField, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetThrottleField() *string { return v.ThrottleField }

// GetLabels returns AggregateAlertDetails.Labels, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetLabels() []string { return v.Labels }

// GetEnabled returns AggregateAlertDetails.Enabled, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetEnabled() bool { return v.Enabled }

// GetTriggerMode returns AggregateAlertDetails.TriggerMode, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetTriggerMode() TriggerMode { return v.TriggerMode }

// GetQueryTimestampType returns AggregateAlertDetails.QueryTimestampType, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetQueryTimestampType() QueryTimestampType {
	return v.QueryTimestampType
}

// GetActions returns AggregateAlertDetails.Actions, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetActions() []SharedActionNameType { return v.Actions }

// GetQueryOwnership returns AggregateAlertDetails.QueryOwnership, and is useful for accessing the field via an interface.
func (v *AggregateAlertDetails) GetQueryOwnership() SharedQueryOwnershipType { return v.QueryOwnership }

func (v *AggregateAlertDetails) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AggregateAlertDetails
		Actions        []json.RawMessage `json:"actions"`
		QueryOwnership json.RawMessage   `json:"queryOwnership"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AggregateAlertDetails = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Actions
		src := firstPass.Actions
		*dst = make(
			[]SharedActionNameType,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalSharedActionNameType(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal AggregateAlertDetails.Actions: %w", err)
				}
			}
		}
	}

	{
		dst := &v.QueryOwnership
		src := firstPass.QueryOwnership
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSharedQueryOwnershipType(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AggregateAlertDetails.QueryOwnership: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAggregateAlertDetails struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`

	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	TriggerMode TriggerMode `json:"triggerMode"`

	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *AggregateAlertDetails) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AggregateAlertDetails) __premarshalJSON() (*__premarshalAggregateAlertDetails, error) {
	var retval __premarshalAggregateAlertDetails

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Description = v.Description
	retval.QueryString = v.QueryString
	retval.SearchIntervalSeconds = v.SearchIntervalSeconds
	retval.ThrottleTimeSeconds = v.ThrottleTimeSeconds
	retval.ThrottleField = v.ThrottleField
	retval.Labels = v.Labels
	retval.Enabled = v.Enabled
	retval.TriggerMode = v.TriggerMode
	retval.QueryTimestampType = v.QueryTimestampType
	{

		dst := &retval.Actions
		src := v.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AggregateAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AggregateAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// AlertDetails includes the GraphQL fields of Alert requested by the fragment AlertDetails.
// The GraphQL type's documentation follows.
//
// An alert.
type AlertDetails struct {
	// Id of the alert.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the alert.
	// Stability: Long-term
	Name string `json:"name"`
	// LogScale query to execute.
	// Stability: Long-term
	QueryString string `json:"queryString"`
	// Start of the relative time interval for the query.
	// Stability: Long-term
	QueryStart string `json:"queryStart"`
	// Field to throttle on.
	// Stability: Long-term
	ThrottleField *string `json:"throttleField"`
	// Name of the alert.
	// Stability: Long-term
	Description *string `json:"description"`
	// Throttle time in milliseconds.
	// Stability: Long-term
	ThrottleTimeMillis int64 `json:"throttleTimeMillis"`
	// Flag indicating whether the alert is enabled.
	// Stability: Long-term
	Enabled bool `json:"enabled"`
	// Labels attached to the alert.
	// Stability: Long-term
	Labels []string `json:"labels"`
	// List of ids for actions to fire on query result.
	// Stability: Long-term
	ActionsV2 []SharedActionNameType `json:"-"`
	// Ownership of the query run by this alert
	// Stability: Long-term
	QueryOwnership SharedQueryOwnershipType `json:"-"`
}

// GetId returns AlertDetails.Id, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetId() string { return v.Id }

// GetName returns AlertDetails.Name, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetName() string { return v.Name }

// GetQueryString returns AlertDetails.QueryString, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetQueryString() string { return v.QueryString }

// GetQueryStart returns AlertDetails.QueryStart, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetQueryStart() string { return v.QueryStart }

// GetThrottleField returns AlertDetails.ThrottleField, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetThrottleField() *string { return v.ThrottleField }

// GetDescription returns AlertDetails.Description, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetDescription() *string { return v.Description }

// GetThrottleTimeMillis returns AlertDetails.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetThrottleTimeMillis() int64 { return v.ThrottleTimeMillis }

// GetEnabled returns AlertDetails.Enabled, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetEnabled() bool { return v.Enabled }

// GetLabels returns AlertDetails.Labels, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetLabels() []string { return v.Labels }

// GetActionsV2 returns AlertDetails.ActionsV2, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetActionsV2() []SharedActionNameType { return v.ActionsV2 }

// GetQueryOwnership returns AlertDetails.QueryOwnership, and is useful for accessing the field via an interface.
func (v *AlertDetails) GetQueryOwnership() SharedQueryOwnershipType { return v.QueryOwnership }

func (v *AlertDetails) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AlertDetails
		ActionsV2      []json.RawMessage `json:"actionsV2"`
		QueryOwnership json.RawMessage   `json:"queryOwnership"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AlertDetails = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ActionsV2
		src := firstPass.ActionsV2
		*dst = make(
			[]SharedActionNameType,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalSharedActionNameType(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal AlertDetails.ActionsV2: %w", err)
				}
			}
		}
	}

	{
		dst := &v.QueryOwnership
		src := firstPass.QueryOwnership
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSharedQueryOwnershipType(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AlertDetails.QueryOwnership: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAlertDetails struct {
	Id string `json:"id"`

	Name string `json:"name"`

	QueryString string `json:"queryString"`

	QueryStart string `json:"queryStart"`

	ThrottleField *string `json:"throttleField"`

	Description *string `json:"description"`

	ThrottleTimeMillis int64 `json:"throttleTimeMillis"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *AlertDetails) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AlertDetails) __premarshalJSON() (*__premarshalAlertDetails, error) {
	var retval __premarshalAlertDetails

	retval.Id = v.Id
	retval.Name = v.Name
	retval.QueryString = v.QueryString
	retval.QueryStart = v.QueryStart
	retval.ThrottleField = v.ThrottleField
	retval.Description = v.Description
	retval.ThrottleTimeMillis = v.ThrottleTimeMillis
	retval.Enabled = v.Enabled
	retval.Labels = v.Labels
	{

		dst := &retval.ActionsV2
		src := v.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AlertDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken includes the requested fields of the GraphQL type IngestToken.
// The GraphQL type's documentation follows.
//
// An API ingest token used for sending data to LogScale.
type AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken.Typename, and is useful for accessing the field via an interface.
func (v *AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken) GetTypename() *string {
	return v.Typename
}

// AssignParserToIngestTokenResponse is returned by AssignParserToIngestToken on success.
type AssignParserToIngestTokenResponse struct {
	// Assign an ingest token to be associated with a parser.
	// Stability: Long-term
	AssignParserToIngestTokenV2 AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken `json:"assignParserToIngestTokenV2"`
}

// GetAssignParserToIngestTokenV2 returns AssignParserToIngestTokenResponse.AssignParserToIngestTokenV2, and is useful for accessing the field via an interface.
func (v *AssignParserToIngestTokenResponse) GetAssignParserToIngestTokenV2() AssignParserToIngestTokenAssignParserToIngestTokenV2IngestToken {
	return v.AssignParserToIngestTokenV2
}

// CreateAggregateAlertCreateAggregateAlert includes the requested fields of the GraphQL type AggregateAlert.
// The GraphQL type's documentation follows.
//
// An aggregate alert.
type CreateAggregateAlertCreateAggregateAlert struct {
	AggregateAlertDetails `json:"-"`
}

// GetId returns CreateAggregateAlertCreateAggregateAlert.Id, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetId() string { return v.AggregateAlertDetails.Id }

// GetName returns CreateAggregateAlertCreateAggregateAlert.Name, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetName() string {
	return v.AggregateAlertDetails.Name
}

// GetDescription returns CreateAggregateAlertCreateAggregateAlert.Description, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetDescription() *string {
	return v.AggregateAlertDetails.Description
}

// GetQueryString returns CreateAggregateAlertCreateAggregateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetQueryString() string {
	return v.AggregateAlertDetails.QueryString
}

// GetSearchIntervalSeconds returns CreateAggregateAlertCreateAggregateAlert.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetSearchIntervalSeconds() int64 {
	return v.AggregateAlertDetails.SearchIntervalSeconds
}

// GetThrottleTimeSeconds returns CreateAggregateAlertCreateAggregateAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetThrottleTimeSeconds() int64 {
	return v.AggregateAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns CreateAggregateAlertCreateAggregateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetThrottleField() *string {
	return v.AggregateAlertDetails.ThrottleField
}

// GetLabels returns CreateAggregateAlertCreateAggregateAlert.Labels, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetLabels() []string {
	return v.AggregateAlertDetails.Labels
}

// GetEnabled returns CreateAggregateAlertCreateAggregateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetEnabled() bool {
	return v.AggregateAlertDetails.Enabled
}

// GetTriggerMode returns CreateAggregateAlertCreateAggregateAlert.TriggerMode, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetTriggerMode() TriggerMode {
	return v.AggregateAlertDetails.TriggerMode
}

// GetQueryTimestampType returns CreateAggregateAlertCreateAggregateAlert.QueryTimestampType, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetQueryTimestampType() QueryTimestampType {
	return v.AggregateAlertDetails.QueryTimestampType
}

// GetActions returns CreateAggregateAlertCreateAggregateAlert.Actions, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetActions() []SharedActionNameType {
	return v.AggregateAlertDetails.Actions
}

// GetQueryOwnership returns CreateAggregateAlertCreateAggregateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertCreateAggregateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AggregateAlertDetails.QueryOwnership
}

func (v *CreateAggregateAlertCreateAggregateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAggregateAlertCreateAggregateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAggregateAlertCreateAggregateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AggregateAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAggregateAlertCreateAggregateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`

	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	TriggerMode TriggerMode `json:"triggerMode"`

	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *CreateAggregateAlertCreateAggregateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAggregateAlertCreateAggregateAlert) __premarshalJSON() (*__premarshalCreateAggregateAlertCreateAggregateAlert, error) {
	var retval __premarshalCreateAggregateAlertCreateAggregateAlert

	retval.Id = v.AggregateAlertDetails.Id
	retval.Name = v.AggregateAlertDetails.Name
	retval.Description = v.AggregateAlertDetails.Description
	retval.QueryString = v.AggregateAlertDetails.QueryString
	retval.SearchIntervalSeconds = v.AggregateAlertDetails.SearchIntervalSeconds
	retval.ThrottleTimeSeconds = v.AggregateAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.AggregateAlertDetails.ThrottleField
	retval.Labels = v.AggregateAlertDetails.Labels
	retval.Enabled = v.AggregateAlertDetails.Enabled
	retval.TriggerMode = v.AggregateAlertDetails.TriggerMode
	retval.QueryTimestampType = v.AggregateAlertDetails.QueryTimestampType
	{

		dst := &retval.Actions
		src := v.AggregateAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CreateAggregateAlertCreateAggregateAlert.AggregateAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AggregateAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateAggregateAlertCreateAggregateAlert.AggregateAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// CreateAggregateAlertResponse is returned by CreateAggregateAlert on success.
type CreateAggregateAlertResponse struct {
	// Create an aggregate alert.
	// Stability: Long-term
	CreateAggregateAlert CreateAggregateAlertCreateAggregateAlert `json:"createAggregateAlert"`
}

// GetCreateAggregateAlert returns CreateAggregateAlertResponse.CreateAggregateAlert, and is useful for accessing the field via an interface.
func (v *CreateAggregateAlertResponse) GetCreateAggregateAlert() CreateAggregateAlertCreateAggregateAlert {
	return v.CreateAggregateAlert
}

// CreateAlertCreateAlert includes the requested fields of the GraphQL type Alert.
// The GraphQL type's documentation follows.
//
// An alert.
type CreateAlertCreateAlert struct {
	AlertDetails `json:"-"`
}

// GetId returns CreateAlertCreateAlert.Id, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetId() string { return v.AlertDetails.Id }

// GetName returns CreateAlertCreateAlert.Name, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetName() string { return v.AlertDetails.Name }

// GetQueryString returns CreateAlertCreateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetQueryString() string { return v.AlertDetails.QueryString }

// GetQueryStart returns CreateAlertCreateAlert.QueryStart, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetQueryStart() string { return v.AlertDetails.QueryStart }

// GetThrottleField returns CreateAlertCreateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetThrottleField() *string { return v.AlertDetails.ThrottleField }

// GetDescription returns CreateAlertCreateAlert.Description, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetDescription() *string { return v.AlertDetails.Description }

// GetThrottleTimeMillis returns CreateAlertCreateAlert.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetThrottleTimeMillis() int64 {
	return v.AlertDetails.ThrottleTimeMillis
}

// GetEnabled returns CreateAlertCreateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetEnabled() bool { return v.AlertDetails.Enabled }

// GetLabels returns CreateAlertCreateAlert.Labels, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetLabels() []string { return v.AlertDetails.Labels }

// GetActionsV2 returns CreateAlertCreateAlert.ActionsV2, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetActionsV2() []SharedActionNameType {
	return v.AlertDetails.ActionsV2
}

// GetQueryOwnership returns CreateAlertCreateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *CreateAlertCreateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AlertDetails.QueryOwnership
}

func (v *CreateAlertCreateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAlertCreateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAlertCreateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAlertCreateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	QueryString string `json:"queryString"`

	QueryStart string `json:"queryStart"`

	ThrottleField *string `json:"throttleField"`

	Description *string `json:"description"`

	ThrottleTimeMillis int64 `json:"throttleTimeMillis"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *CreateAlertCreateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAlertCreateAlert) __premarshalJSON() (*__premarshalCreateAlertCreateAlert, error) {
	var retval __premarshalCreateAlertCreateAlert

	retval.Id = v.AlertDetails.Id
	retval.Name = v.AlertDetails.Name
	retval.QueryString = v.AlertDetails.QueryString
	retval.QueryStart = v.AlertDetails.QueryStart
	retval.ThrottleField = v.AlertDetails.ThrottleField
	retval.Description = v.AlertDetails.Description
	retval.ThrottleTimeMillis = v.AlertDetails.ThrottleTimeMillis
	retval.Enabled = v.AlertDetails.Enabled
	retval.Labels = v.AlertDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.AlertDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CreateAlertCreateAlert.AlertDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateAlertCreateAlert.AlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// CreateAlertResponse is returned by CreateAlert on success.
type CreateAlertResponse struct {
	// Create an alert.
	// Stability: Long-term
	CreateAlert CreateAlertCreateAlert `json:"createAlert"`
}

// GetCreateAlert returns CreateAlertResponse.CreateAlert, and is useful for accessing the field via an interface.
func (v *CreateAlertResponse) GetCreateAlert() CreateAlertCreateAlert { return v.CreateAlert }

// CreateEmailActionCreateEmailAction includes the requested fields of the GraphQL type EmailAction.
// The GraphQL type's documentation follows.
//
// An email action.
type CreateEmailActionCreateEmailAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateEmailActionCreateEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateEmailActionCreateEmailAction) GetTypename() *string { return v.Typename }

// CreateEmailActionResponse is returned by CreateEmailAction on success.
type CreateEmailActionResponse struct {
	// Create an email action.
	// Stability: Long-term
	CreateEmailAction CreateEmailActionCreateEmailAction `json:"createEmailAction"`
}

// GetCreateEmailAction returns CreateEmailActionResponse.CreateEmailAction, and is useful for accessing the field via an interface.
func (v *CreateEmailActionResponse) GetCreateEmailAction() CreateEmailActionCreateEmailAction {
	return v.CreateEmailAction
}

// CreateFilterAlertCreateFilterAlert includes the requested fields of the GraphQL type FilterAlert.
// The GraphQL type's documentation follows.
//
// A filter alert.
type CreateFilterAlertCreateFilterAlert struct {
	FilterAlertDetails `json:"-"`
}

// GetId returns CreateFilterAlertCreateFilterAlert.Id, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetId() string { return v.FilterAlertDetails.Id }

// GetName returns CreateFilterAlertCreateFilterAlert.Name, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetName() string { return v.FilterAlertDetails.Name }

// GetDescription returns CreateFilterAlertCreateFilterAlert.Description, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetDescription() *string {
	return v.FilterAlertDetails.Description
}

// GetQueryString returns CreateFilterAlertCreateFilterAlert.QueryString, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetQueryString() string {
	return v.FilterAlertDetails.QueryString
}

// GetThrottleTimeSeconds returns CreateFilterAlertCreateFilterAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetThrottleTimeSeconds() *int64 {
	return v.FilterAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns CreateFilterAlertCreateFilterAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetThrottleField() *string {
	return v.FilterAlertDetails.ThrottleField
}

// GetLabels returns CreateFilterAlertCreateFilterAlert.Labels, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetLabels() []string { return v.FilterAlertDetails.Labels }

// GetEnabled returns CreateFilterAlertCreateFilterAlert.Enabled, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetEnabled() bool { return v.FilterAlertDetails.Enabled }

// GetActions returns CreateFilterAlertCreateFilterAlert.Actions, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetActions() []SharedActionNameType {
	return v.FilterAlertDetails.Actions
}

// GetQueryOwnership returns CreateFilterAlertCreateFilterAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertCreateFilterAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.FilterAlertDetails.QueryOwnership
}

func (v *CreateFilterAlertCreateFilterAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateFilterAlertCreateFilterAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateFilterAlertCreateFilterAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateFilterAlertCreateFilterAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *CreateFilterAlertCreateFilterAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateFilterAlertCreateFilterAlert) __premarshalJSON() (*__premarshalCreateFilterAlertCreateFilterAlert, error) {
	var retval __premarshalCreateFilterAlertCreateFilterAlert

	retval.Id = v.FilterAlertDetails.Id
	retval.Name = v.FilterAlertDetails.Name
	retval.Description = v.FilterAlertDetails.Description
	retval.QueryString = v.FilterAlertDetails.QueryString
	retval.ThrottleTimeSeconds = v.FilterAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.FilterAlertDetails.ThrottleField
	retval.Labels = v.FilterAlertDetails.Labels
	retval.Enabled = v.FilterAlertDetails.Enabled
	{

		dst := &retval.Actions
		src := v.FilterAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CreateFilterAlertCreateFilterAlert.FilterAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.FilterAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateFilterAlertCreateFilterAlert.FilterAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// CreateFilterAlertResponse is returned by CreateFilterAlert on success.
type CreateFilterAlertResponse struct {
	// Create a filter alert.
	// Stability: Long-term
	CreateFilterAlert CreateFilterAlertCreateFilterAlert `json:"createFilterAlert"`
}

// GetCreateFilterAlert returns CreateFilterAlertResponse.CreateFilterAlert, and is useful for accessing the field via an interface.
func (v *CreateFilterAlertResponse) GetCreateFilterAlert() CreateFilterAlertCreateFilterAlert {
	return v.CreateFilterAlert
}

// CreateHumioRepoActionCreateHumioRepoAction includes the requested fields of the GraphQL type HumioRepoAction.
// The GraphQL type's documentation follows.
//
// A LogScale repository action.
type CreateHumioRepoActionCreateHumioRepoAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateHumioRepoActionCreateHumioRepoAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateHumioRepoActionCreateHumioRepoAction) GetTypename() *string { return v.Typename }

// CreateHumioRepoActionResponse is returned by CreateHumioRepoAction on success.
type CreateHumioRepoActionResponse struct {
	// Create a LogScale repository action.
	// Stability: Long-term
	CreateHumioRepoAction CreateHumioRepoActionCreateHumioRepoAction `json:"createHumioRepoAction"`
}

// GetCreateHumioRepoAction returns CreateHumioRepoActionResponse.CreateHumioRepoAction, and is useful for accessing the field via an interface.
func (v *CreateHumioRepoActionResponse) GetCreateHumioRepoAction() CreateHumioRepoActionCreateHumioRepoAction {
	return v.CreateHumioRepoAction
}

// CreateOpsGenieActionCreateOpsGenieAction includes the requested fields of the GraphQL type OpsGenieAction.
// The GraphQL type's documentation follows.
//
// An OpsGenie action
type CreateOpsGenieActionCreateOpsGenieAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateOpsGenieActionCreateOpsGenieAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateOpsGenieActionCreateOpsGenieAction) GetTypename() *string { return v.Typename }

// CreateOpsGenieActionResponse is returned by CreateOpsGenieAction on success.
type CreateOpsGenieActionResponse struct {
	// Create an OpsGenie action.
	// Stability: Long-term
	CreateOpsGenieAction CreateOpsGenieActionCreateOpsGenieAction `json:"createOpsGenieAction"`
}

// GetCreateOpsGenieAction returns CreateOpsGenieActionResponse.CreateOpsGenieAction, and is useful for accessing the field via an interface.
func (v *CreateOpsGenieActionResponse) GetCreateOpsGenieAction() CreateOpsGenieActionCreateOpsGenieAction {
	return v.CreateOpsGenieAction
}

// CreatePagerDutyActionCreatePagerDutyAction includes the requested fields of the GraphQL type PagerDutyAction.
// The GraphQL type's documentation follows.
//
// A PagerDuty action.
type CreatePagerDutyActionCreatePagerDutyAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreatePagerDutyActionCreatePagerDutyAction.Typename, and is useful for accessing the field via an interface.
func (v *CreatePagerDutyActionCreatePagerDutyAction) GetTypename() *string { return v.Typename }

// CreatePagerDutyActionResponse is returned by CreatePagerDutyAction on success.
type CreatePagerDutyActionResponse struct {
	// Create a PagerDuty action.
	// Stability: Long-term
	CreatePagerDutyAction CreatePagerDutyActionCreatePagerDutyAction `json:"createPagerDutyAction"`
}

// GetCreatePagerDutyAction returns CreatePagerDutyActionResponse.CreatePagerDutyAction, and is useful for accessing the field via an interface.
func (v *CreatePagerDutyActionResponse) GetCreatePagerDutyAction() CreatePagerDutyActionCreatePagerDutyAction {
	return v.CreatePagerDutyAction
}

// CreateParserOrUpdateCreateParserV2Parser includes the requested fields of the GraphQL type Parser.
// The GraphQL type's documentation follows.
//
// A configured parser for incoming data.
type CreateParserOrUpdateCreateParserV2Parser struct {
	ParserDetails `json:"-"`
}

// GetId returns CreateParserOrUpdateCreateParserV2Parser.Id, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateCreateParserV2Parser) GetId() string { return v.ParserDetails.Id }

// GetName returns CreateParserOrUpdateCreateParserV2Parser.Name, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateCreateParserV2Parser) GetName() string { return v.ParserDetails.Name }

// GetScript returns CreateParserOrUpdateCreateParserV2Parser.Script, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateCreateParserV2Parser) GetScript() string { return v.ParserDetails.Script }

// GetFieldsToTag returns CreateParserOrUpdateCreateParserV2Parser.FieldsToTag, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateCreateParserV2Parser) GetFieldsToTag() []string {
	return v.ParserDetails.FieldsToTag
}

// GetTestCases returns CreateParserOrUpdateCreateParserV2Parser.TestCases, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateCreateParserV2Parser) GetTestCases() []ParserDetailsTestCasesParserTestCase {
	return v.ParserDetails.TestCases
}

func (v *CreateParserOrUpdateCreateParserV2Parser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateParserOrUpdateCreateParserV2Parser
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateParserOrUpdateCreateParserV2Parser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ParserDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateParserOrUpdateCreateParserV2Parser struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Script string `json:"script"`

	FieldsToTag []string `json:"fieldsToTag"`

	TestCases []ParserDetailsTestCasesParserTestCase `json:"testCases"`
}

func (v *CreateParserOrUpdateCreateParserV2Parser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateParserOrUpdateCreateParserV2Parser) __premarshalJSON() (*__premarshalCreateParserOrUpdateCreateParserV2Parser, error) {
	var retval __premarshalCreateParserOrUpdateCreateParserV2Parser

	retval.Id = v.ParserDetails.Id
	retval.Name = v.ParserDetails.Name
	retval.Script = v.ParserDetails.Script
	retval.FieldsToTag = v.ParserDetails.FieldsToTag
	retval.TestCases = v.ParserDetails.TestCases
	return &retval, nil
}

// CreateParserOrUpdateResponse is returned by CreateParserOrUpdate on success.
type CreateParserOrUpdateResponse struct {
	// Create a parser.
	// Stability: Long-term
	CreateParserV2 CreateParserOrUpdateCreateParserV2Parser `json:"createParserV2"`
}

// GetCreateParserV2 returns CreateParserOrUpdateResponse.CreateParserV2, and is useful for accessing the field via an interface.
func (v *CreateParserOrUpdateResponse) GetCreateParserV2() CreateParserOrUpdateCreateParserV2Parser {
	return v.CreateParserV2
}

// CreateRepositoryCreateRepositoryCreateRepositoryMutation includes the requested fields of the GraphQL type CreateRepositoryMutation.
type CreateRepositoryCreateRepositoryCreateRepositoryMutation struct {
	// Stability: Long-term
	Repository CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository `json:"repository"`
}

// GetRepository returns CreateRepositoryCreateRepositoryCreateRepositoryMutation.Repository, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutation) GetRepository() CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository {
	return v.Repository
}

// CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository struct {
	RepositoryDetails `json:"-"`
}

// GetId returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.Id, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetId() string {
	return v.RepositoryDetails.Id
}

// GetName returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.Name, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetName() string {
	return v.RepositoryDetails.Name
}

// GetDescription returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.Description, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetDescription() *string {
	return v.RepositoryDetails.Description
}

// GetTimeBasedRetention returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.TimeBasedRetention, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetTimeBasedRetention() *float64 {
	return v.RepositoryDetails.TimeBasedRetention
}

// GetIngestSizeBasedRetention returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.IngestSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetIngestSizeBasedRetention() *float64 {
	return v.RepositoryDetails.IngestSizeBasedRetention
}

// GetStorageSizeBasedRetention returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.StorageSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetStorageSizeBasedRetention() *float64 {
	return v.RepositoryDetails.StorageSizeBasedRetention
}

// GetCompressedByteSize returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.CompressedByteSize, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetCompressedByteSize() int64 {
	return v.RepositoryDetails.CompressedByteSize
}

// GetAutomaticSearch returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetAutomaticSearch() bool {
	return v.RepositoryDetails.AutomaticSearch
}

// GetS3ArchivingConfiguration returns CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository.S3ArchivingConfiguration, and is useful for accessing the field via an interface.
func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) GetS3ArchivingConfiguration() *RepositoryDetailsS3ArchivingConfigurationS3Configuration {
	return v.RepositoryDetails.S3ArchivingConfiguration
}

func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateRepositoryCreateRepositoryCreateRepositoryMutationRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	TimeBasedRetention *float64 `json:"timeBasedRetention"`

	IngestSizeBasedRetention *float64 `json:"ingestSizeBasedRetention"`

	StorageSizeBasedRetention *float64 `json:"storageSizeBasedRetention"`

	CompressedByteSize int64 `json:"compressedByteSize"`

	AutomaticSearch bool `json:"automaticSearch"`

	S3ArchivingConfiguration *RepositoryDetailsS3ArchivingConfigurationS3Configuration `json:"s3ArchivingConfiguration"`
}

func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateRepositoryCreateRepositoryCreateRepositoryMutationRepository) __premarshalJSON() (*__premarshalCreateRepositoryCreateRepositoryCreateRepositoryMutationRepository, error) {
	var retval __premarshalCreateRepositoryCreateRepositoryCreateRepositoryMutationRepository

	retval.Id = v.RepositoryDetails.Id
	retval.Name = v.RepositoryDetails.Name
	retval.Description = v.RepositoryDetails.Description
	retval.TimeBasedRetention = v.RepositoryDetails.TimeBasedRetention
	retval.IngestSizeBasedRetention = v.RepositoryDetails.IngestSizeBasedRetention
	retval.StorageSizeBasedRetention = v.RepositoryDetails.StorageSizeBasedRetention
	retval.CompressedByteSize = v.RepositoryDetails.CompressedByteSize
	retval.AutomaticSearch = v.RepositoryDetails.AutomaticSearch
	retval.S3ArchivingConfiguration = v.RepositoryDetails.S3ArchivingConfiguration
	return &retval, nil
}

// CreateRepositoryResponse is returned by CreateRepository on success.
type CreateRepositoryResponse struct {
	// Create a new repository.
	// Stability: Short-term
	CreateRepository CreateRepositoryCreateRepositoryCreateRepositoryMutation `json:"createRepository"`
}

// GetCreateRepository returns CreateRepositoryResponse.CreateRepository, and is useful for accessing the field via an interface.
func (v *CreateRepositoryResponse) GetCreateRepository() CreateRepositoryCreateRepositoryCreateRepositoryMutation {
	return v.CreateRepository
}

// CreateScheduledSearchCreateScheduledSearch includes the requested fields of the GraphQL type ScheduledSearch.
// The GraphQL type's documentation follows.
//
// Information about a scheduled search
type CreateScheduledSearchCreateScheduledSearch struct {
	ScheduledSearchDetails `json:"-"`
}

// GetId returns CreateScheduledSearchCreateScheduledSearch.Id, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetId() string {
	return v.ScheduledSearchDetails.Id
}

// GetName returns CreateScheduledSearchCreateScheduledSearch.Name, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetName() string {
	return v.ScheduledSearchDetails.Name
}

// GetDescription returns CreateScheduledSearchCreateScheduledSearch.Description, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetDescription() *string {
	return v.ScheduledSearchDetails.Description
}

// GetQueryString returns CreateScheduledSearchCreateScheduledSearch.QueryString, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetQueryString() string {
	return v.ScheduledSearchDetails.QueryString
}

// GetStart returns CreateScheduledSearchCreateScheduledSearch.Start, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetStart() string {
	return v.ScheduledSearchDetails.Start
}

// GetEnd returns CreateScheduledSearchCreateScheduledSearch.End, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetEnd() string {
	return v.ScheduledSearchDetails.End
}

// GetTimeZone returns CreateScheduledSearchCreateScheduledSearch.TimeZone, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetTimeZone() string {
	return v.ScheduledSearchDetails.TimeZone
}

// GetSchedule returns CreateScheduledSearchCreateScheduledSearch.Schedule, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetSchedule() string {
	return v.ScheduledSearchDetails.Schedule
}

// GetBackfillLimit returns CreateScheduledSearchCreateScheduledSearch.BackfillLimit, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetBackfillLimit() int {
	return v.ScheduledSearchDetails.BackfillLimit
}

// GetEnabled returns CreateScheduledSearchCreateScheduledSearch.Enabled, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetEnabled() bool {
	return v.ScheduledSearchDetails.Enabled
}

// GetLabels returns CreateScheduledSearchCreateScheduledSearch.Labels, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetLabels() []string {
	return v.ScheduledSearchDetails.Labels
}

// GetActionsV2 returns CreateScheduledSearchCreateScheduledSearch.ActionsV2, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetActionsV2() []SharedActionNameType {
	return v.ScheduledSearchDetails.ActionsV2
}

// GetQueryOwnership returns CreateScheduledSearchCreateScheduledSearch.QueryOwnership, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchCreateScheduledSearch) GetQueryOwnership() SharedQueryOwnershipType {
	return v.ScheduledSearchDetails.QueryOwnership
}

func (v *CreateScheduledSearchCreateScheduledSearch) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateScheduledSearchCreateScheduledSearch
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateScheduledSearchCreateScheduledSearch = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ScheduledSearchDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateScheduledSearchCreateScheduledSearch struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	Start string `json:"start"`

	End string `json:"end"`

	TimeZone string `json:"timeZone"`

	Schedule string `json:"schedule"`

	BackfillLimit int `json:"backfillLimit"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *CreateScheduledSearchCreateScheduledSearch) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateScheduledSearchCreateScheduledSearch) __premarshalJSON() (*__premarshalCreateScheduledSearchCreateScheduledSearch, error) {
	var retval __premarshalCreateScheduledSearchCreateScheduledSearch

	retval.Id = v.ScheduledSearchDetails.Id
	retval.Name = v.ScheduledSearchDetails.Name
	retval.Description = v.ScheduledSearchDetails.Description
	retval.QueryString = v.ScheduledSearchDetails.QueryString
	retval.Start = v.ScheduledSearchDetails.Start
	retval.End = v.ScheduledSearchDetails.End
	retval.TimeZone = v.ScheduledSearchDetails.TimeZone
	retval.Schedule = v.ScheduledSearchDetails.Schedule
	retval.BackfillLimit = v.ScheduledSearchDetails.BackfillLimit
	retval.Enabled = v.ScheduledSearchDetails.Enabled
	retval.Labels = v.ScheduledSearchDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.ScheduledSearchDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CreateScheduledSearchCreateScheduledSearch.ScheduledSearchDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.ScheduledSearchDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateScheduledSearchCreateScheduledSearch.ScheduledSearchDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// CreateScheduledSearchResponse is returned by CreateScheduledSearch on success.
type CreateScheduledSearchResponse struct {
	// Create a scheduled search.
	// Stability: Long-term
	CreateScheduledSearch CreateScheduledSearchCreateScheduledSearch `json:"createScheduledSearch"`
}

// GetCreateScheduledSearch returns CreateScheduledSearchResponse.CreateScheduledSearch, and is useful for accessing the field via an interface.
func (v *CreateScheduledSearchResponse) GetCreateScheduledSearch() CreateScheduledSearchCreateScheduledSearch {
	return v.CreateScheduledSearch
}

// CreateSlackActionCreateSlackAction includes the requested fields of the GraphQL type SlackAction.
// The GraphQL type's documentation follows.
//
// A Slack action
type CreateSlackActionCreateSlackAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateSlackActionCreateSlackAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateSlackActionCreateSlackAction) GetTypename() *string { return v.Typename }

// CreateSlackActionResponse is returned by CreateSlackAction on success.
type CreateSlackActionResponse struct {
	// Create a Slack action.
	// Stability: Long-term
	CreateSlackAction CreateSlackActionCreateSlackAction `json:"createSlackAction"`
}

// GetCreateSlackAction returns CreateSlackActionResponse.CreateSlackAction, and is useful for accessing the field via an interface.
func (v *CreateSlackActionResponse) GetCreateSlackAction() CreateSlackActionCreateSlackAction {
	return v.CreateSlackAction
}

// CreateSlackPostMessageActionCreateSlackPostMessageAction includes the requested fields of the GraphQL type SlackPostMessageAction.
// The GraphQL type's documentation follows.
//
// A slack post-message action.
type CreateSlackPostMessageActionCreateSlackPostMessageAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateSlackPostMessageActionCreateSlackPostMessageAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateSlackPostMessageActionCreateSlackPostMessageAction) GetTypename() *string {
	return v.Typename
}

// CreateSlackPostMessageActionResponse is returned by CreateSlackPostMessageAction on success.
type CreateSlackPostMessageActionResponse struct {
	// Create a post message Slack action.
	// Stability: Long-term
	CreateSlackPostMessageAction CreateSlackPostMessageActionCreateSlackPostMessageAction `json:"createSlackPostMessageAction"`
}

// GetCreateSlackPostMessageAction returns CreateSlackPostMessageActionResponse.CreateSlackPostMessageAction, and is useful for accessing the field via an interface.
func (v *CreateSlackPostMessageActionResponse) GetCreateSlackPostMessageAction() CreateSlackPostMessageActionCreateSlackPostMessageAction {
	return v.CreateSlackPostMessageAction
}

// CreateVictorOpsActionCreateVictorOpsAction includes the requested fields of the GraphQL type VictorOpsAction.
// The GraphQL type's documentation follows.
//
// A VictorOps action.
type CreateVictorOpsActionCreateVictorOpsAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateVictorOpsActionCreateVictorOpsAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateVictorOpsActionCreateVictorOpsAction) GetTypename() *string { return v.Typename }

// CreateVictorOpsActionResponse is returned by CreateVictorOpsAction on success.
type CreateVictorOpsActionResponse struct {
	// Create a VictorOps action.
	// Stability: Long-term
	CreateVictorOpsAction CreateVictorOpsActionCreateVictorOpsAction `json:"createVictorOpsAction"`
}

// GetCreateVictorOpsAction returns CreateVictorOpsActionResponse.CreateVictorOpsAction, and is useful for accessing the field via an interface.
func (v *CreateVictorOpsActionResponse) GetCreateVictorOpsAction() CreateVictorOpsActionCreateVictorOpsAction {
	return v.CreateVictorOpsAction
}

// CreateViewCreateView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type CreateViewCreateView struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateViewCreateView.Typename, and is useful for accessing the field via an interface.
func (v *CreateViewCreateView) GetTypename() *string { return v.Typename }

// CreateViewResponse is returned by CreateView on success.
type CreateViewResponse struct {
	// Create a new view.
	// Stability: Long-term
	CreateView CreateViewCreateView `json:"createView"`
}

// GetCreateView returns CreateViewResponse.CreateView, and is useful for accessing the field via an interface.
func (v *CreateViewResponse) GetCreateView() CreateViewCreateView { return v.CreateView }

// CreateWebhookActionCreateWebhookAction includes the requested fields of the GraphQL type WebhookAction.
// The GraphQL type's documentation follows.
//
// A webhook action
type CreateWebhookActionCreateWebhookAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns CreateWebhookActionCreateWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *CreateWebhookActionCreateWebhookAction) GetTypename() *string { return v.Typename }

// CreateWebhookActionResponse is returned by CreateWebhookAction on success.
type CreateWebhookActionResponse struct {
	// Create a webhook action.
	// Stability: Long-term
	CreateWebhookAction CreateWebhookActionCreateWebhookAction `json:"createWebhookAction"`
}

// GetCreateWebhookAction returns CreateWebhookActionResponse.CreateWebhookAction, and is useful for accessing the field via an interface.
func (v *CreateWebhookActionResponse) GetCreateWebhookAction() CreateWebhookActionCreateWebhookAction {
	return v.CreateWebhookAction
}

// DeleteActionByIDResponse is returned by DeleteActionByID on success.
type DeleteActionByIDResponse struct {
	// Delete an action.
	// Stability: Long-term
	DeleteAction bool `json:"deleteAction"`
}

// GetDeleteAction returns DeleteActionByIDResponse.DeleteAction, and is useful for accessing the field via an interface.
func (v *DeleteActionByIDResponse) GetDeleteAction() bool { return v.DeleteAction }

// DeleteAggregateAlertResponse is returned by DeleteAggregateAlert on success.
type DeleteAggregateAlertResponse struct {
	// Delete an aggregate alert.
	// Stability: Long-term
	DeleteAggregateAlert bool `json:"deleteAggregateAlert"`
}

// GetDeleteAggregateAlert returns DeleteAggregateAlertResponse.DeleteAggregateAlert, and is useful for accessing the field via an interface.
func (v *DeleteAggregateAlertResponse) GetDeleteAggregateAlert() bool { return v.DeleteAggregateAlert }

// DeleteAlertByIDResponse is returned by DeleteAlertByID on success.
type DeleteAlertByIDResponse struct {
	// Delete an alert.
	// Stability: Long-term
	DeleteAlert bool `json:"deleteAlert"`
}

// GetDeleteAlert returns DeleteAlertByIDResponse.DeleteAlert, and is useful for accessing the field via an interface.
func (v *DeleteAlertByIDResponse) GetDeleteAlert() bool { return v.DeleteAlert }

// DeleteFilterAlertResponse is returned by DeleteFilterAlert on success.
type DeleteFilterAlertResponse struct {
	// Delete a filter alert.
	// Stability: Long-term
	DeleteFilterAlert bool `json:"deleteFilterAlert"`
}

// GetDeleteFilterAlert returns DeleteFilterAlertResponse.DeleteFilterAlert, and is useful for accessing the field via an interface.
func (v *DeleteFilterAlertResponse) GetDeleteFilterAlert() bool { return v.DeleteFilterAlert }

// DeleteParserByIDDeleteParserBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type DeleteParserByIDDeleteParserBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteParserByIDDeleteParserBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *DeleteParserByIDDeleteParserBooleanResultType) GetTypename() *string { return v.Typename }

// DeleteParserByIDResponse is returned by DeleteParserByID on success.
type DeleteParserByIDResponse struct {
	// Delete a parser.
	// Stability: Long-term
	DeleteParser DeleteParserByIDDeleteParserBooleanResultType `json:"deleteParser"`
}

// GetDeleteParser returns DeleteParserByIDResponse.DeleteParser, and is useful for accessing the field via an interface.
func (v *DeleteParserByIDResponse) GetDeleteParser() DeleteParserByIDDeleteParserBooleanResultType {
	return v.DeleteParser
}

// DeleteScheduledSearchByIDResponse is returned by DeleteScheduledSearchByID on success.
type DeleteScheduledSearchByIDResponse struct {
	// Delete a scheduled search.
	// Stability: Long-term
	DeleteScheduledSearch bool `json:"deleteScheduledSearch"`
}

// GetDeleteScheduledSearch returns DeleteScheduledSearchByIDResponse.DeleteScheduledSearch, and is useful for accessing the field via an interface.
func (v *DeleteScheduledSearchByIDResponse) GetDeleteScheduledSearch() bool {
	return v.DeleteScheduledSearch
}

// DeleteSearchDomainDeleteSearchDomainBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type DeleteSearchDomainDeleteSearchDomainBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteSearchDomainDeleteSearchDomainBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *DeleteSearchDomainDeleteSearchDomainBooleanResultType) GetTypename() *string {
	return v.Typename
}

// DeleteSearchDomainResponse is returned by DeleteSearchDomain on success.
type DeleteSearchDomainResponse struct {
	// Delete a repository or view.
	// Stability: Long-term
	DeleteSearchDomain DeleteSearchDomainDeleteSearchDomainBooleanResultType `json:"deleteSearchDomain"`
}

// GetDeleteSearchDomain returns DeleteSearchDomainResponse.DeleteSearchDomain, and is useful for accessing the field via an interface.
func (v *DeleteSearchDomainResponse) GetDeleteSearchDomain() DeleteSearchDomainDeleteSearchDomainBooleanResultType {
	return v.DeleteSearchDomain
}

// DisableS3ArchivingResponse is returned by DisableS3Archiving on success.
type DisableS3ArchivingResponse struct {
	// Disables the archiving job for the repository.
	// Stability: Short-term
	S3DisableArchiving DisableS3ArchivingS3DisableArchivingBooleanResultType `json:"s3DisableArchiving"`
}

// GetS3DisableArchiving returns DisableS3ArchivingResponse.S3DisableArchiving, and is useful for accessing the field via an interface.
func (v *DisableS3ArchivingResponse) GetS3DisableArchiving() DisableS3ArchivingS3DisableArchivingBooleanResultType {
	return v.S3DisableArchiving
}

// DisableS3ArchivingS3DisableArchivingBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type DisableS3ArchivingS3DisableArchivingBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DisableS3ArchivingS3DisableArchivingBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *DisableS3ArchivingS3DisableArchivingBooleanResultType) GetTypename() *string {
	return v.Typename
}

// EnableS3ArchivingResponse is returned by EnableS3Archiving on success.
type EnableS3ArchivingResponse struct {
	// Enables the archiving job for the repository.
	// Stability: Short-term
	S3EnableArchiving EnableS3ArchivingS3EnableArchivingBooleanResultType `json:"s3EnableArchiving"`
}

// GetS3EnableArchiving returns EnableS3ArchivingResponse.S3EnableArchiving, and is useful for accessing the field via an interface.
func (v *EnableS3ArchivingResponse) GetS3EnableArchiving() EnableS3ArchivingS3EnableArchivingBooleanResultType {
	return v.S3EnableArchiving
}

// EnableS3ArchivingS3EnableArchivingBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type EnableS3ArchivingS3EnableArchivingBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns EnableS3ArchivingS3EnableArchivingBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *EnableS3ArchivingS3EnableArchivingBooleanResultType) GetTypename() *string {
	return v.Typename
}

// Asserts that a given field has an expected value after having been parsed.
type FieldHasValueInput struct {
	// Asserts that a given field has an expected value after having been parsed.
	FieldName string `json:"fieldName"`
	// Asserts that a given field has an expected value after having been parsed.
	ExpectedValue string `json:"expectedValue"`
}

// GetFieldName returns FieldHasValueInput.FieldName, and is useful for accessing the field via an interface.
func (v *FieldHasValueInput) GetFieldName() string { return v.FieldName }

// GetExpectedValue returns FieldHasValueInput.ExpectedValue, and is useful for accessing the field via an interface.
func (v *FieldHasValueInput) GetExpectedValue() string { return v.ExpectedValue }

// FilterAlertDetails includes the GraphQL fields of FilterAlert requested by the fragment FilterAlertDetails.
// The GraphQL type's documentation follows.
//
// A filter alert.
type FilterAlertDetails struct {
	// Id of the filter alert.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the filter alert.
	// Stability: Long-term
	Name string `json:"name"`
	// Description of the filter alert.
	// Stability: Long-term
	Description *string `json:"description"`
	// LogScale query to execute.
	// Stability: Long-term
	QueryString string `json:"queryString"`
	// Throttle time in seconds.
	// Stability: Long-term
	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	// Stability: Long-term
	ThrottleField *string `json:"throttleField"`
	// Labels attached to the filter alert.
	// Stability: Long-term
	Labels []string `json:"labels"`
	// Flag indicating whether the filter alert is enabled.
	// Stability: Long-term
	Enabled bool `json:"enabled"`
	// List of ids for actions to fire on query result.
	// Stability: Long-term
	Actions []SharedActionNameType `json:"-"`
	// Ownership of the query run by this alert
	// Stability: Long-term
	QueryOwnership SharedQueryOwnershipType `json:"-"`
}

// GetId returns FilterAlertDetails.Id, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetId() string { return v.Id }

// GetName returns FilterAlertDetails.Name, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetName() string { return v.Name }

// GetDescription returns FilterAlertDetails.Description, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetDescription() *string { return v.Description }

// GetQueryString returns FilterAlertDetails.QueryString, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetQueryString() string { return v.QueryString }

// GetThrottleTimeSeconds returns FilterAlertDetails.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetThrottleTimeSeconds() *int64 { return v.ThrottleTimeSeconds }

// GetThrottleField returns FilterAlertDetails.ThrottleField, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetThrottleField() *string { return v.ThrottleField }

// GetLabels returns FilterAlertDetails.Labels, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetLabels() []string { return v.Labels }

// GetEnabled returns FilterAlertDetails.Enabled, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetEnabled() bool { return v.Enabled }

// GetActions returns FilterAlertDetails.Actions, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetActions() []SharedActionNameType { return v.Actions }

// GetQueryOwnership returns FilterAlertDetails.QueryOwnership, and is useful for accessing the field via an interface.
func (v *FilterAlertDetails) GetQueryOwnership() SharedQueryOwnershipType { return v.QueryOwnership }

func (v *FilterAlertDetails) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FilterAlertDetails
		Actions        []json.RawMessage `json:"actions"`
		QueryOwnership json.RawMessage   `json:"queryOwnership"`
		graphql.NoUnmarshalJSON
	}
	firstPass.FilterAlertDetails = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Actions
		src := firstPass.Actions
		*dst = make(
			[]SharedActionNameType,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalSharedActionNameType(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal FilterAlertDetails.Actions: %w", err)
				}
			}
		}
	}

	{
		dst := &v.QueryOwnership
		src := firstPass.QueryOwnership
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSharedQueryOwnershipType(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal FilterAlertDetails.QueryOwnership: %w", err)
			}
		}
	}
	return nil
}

type __premarshalFilterAlertDetails struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *FilterAlertDetails) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FilterAlertDetails) __premarshalJSON() (*__premarshalFilterAlertDetails, error) {
	var retval __premarshalFilterAlertDetails

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Description = v.Description
	retval.QueryString = v.QueryString
	retval.ThrottleTimeSeconds = v.ThrottleTimeSeconds
	retval.ThrottleField = v.ThrottleField
	retval.Labels = v.Labels
	retval.Enabled = v.Enabled
	{

		dst := &retval.Actions
		src := v.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal FilterAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal FilterAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// GetActionByIDResponse is returned by GetActionByID on success.
type GetActionByIDResponse struct {
	// Stability: Long-term
	SearchDomain GetActionByIDSearchDomain `json:"-"`
}

// GetSearchDomain returns GetActionByIDResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *GetActionByIDResponse) GetSearchDomain() GetActionByIDSearchDomain { return v.SearchDomain }

func (v *GetActionByIDResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetActionByIDSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetActionByIDResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetActionByIDResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *GetActionByIDResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDResponse) __premarshalJSON() (*__premarshalGetActionByIDResponse, error) {
	var retval __premarshalGetActionByIDResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalGetActionByIDSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetActionByIDResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// GetActionByIDSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// GetActionByIDSearchDomain is implemented by the following types:
// GetActionByIDSearchDomainRepository
// GetActionByIDSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type GetActionByIDSearchDomain interface {
	implementsGraphQLInterfaceGetActionByIDSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetAction returns the interface-field "action" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAction() GetActionByIDSearchDomainAction
}

func (v *GetActionByIDSearchDomainRepository) implementsGraphQLInterfaceGetActionByIDSearchDomain() {}
func (v *GetActionByIDSearchDomainView) implementsGraphQLInterfaceGetActionByIDSearchDomain()       {}

func __unmarshalGetActionByIDSearchDomain(b []byte, v *GetActionByIDSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(GetActionByIDSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(GetActionByIDSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetActionByIDSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalGetActionByIDSearchDomain(v *GetActionByIDSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetActionByIDSearchDomainRepository:
		typename = "Repository"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainRepository
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainView:
		typename = "View"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainView
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetActionByIDSearchDomain: "%T"`, v)
	}
}

// GetActionByIDSearchDomainAction includes the requested fields of the GraphQL interface Action.
//
// GetActionByIDSearchDomainAction is implemented by the following types:
// GetActionByIDSearchDomainActionEmailAction
// GetActionByIDSearchDomainActionHumioRepoAction
// GetActionByIDSearchDomainActionOpsGenieAction
// GetActionByIDSearchDomainActionPagerDutyAction
// GetActionByIDSearchDomainActionSlackAction
// GetActionByIDSearchDomainActionSlackPostMessageAction
// GetActionByIDSearchDomainActionUploadFileAction
// GetActionByIDSearchDomainActionVictorOpsAction
// GetActionByIDSearchDomainActionWebhookAction
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type GetActionByIDSearchDomainAction interface {
	implementsGraphQLInterfaceGetActionByIDSearchDomainAction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ActionDetails
}

func (v *GetActionByIDSearchDomainActionEmailAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionHumioRepoAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionOpsGenieAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionPagerDutyAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionSlackAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionUploadFileAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionVictorOpsAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}
func (v *GetActionByIDSearchDomainActionWebhookAction) implementsGraphQLInterfaceGetActionByIDSearchDomainAction() {
}

func __unmarshalGetActionByIDSearchDomainAction(b []byte, v *GetActionByIDSearchDomainAction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(GetActionByIDSearchDomainActionEmailAction)
		return json.Unmarshal(b, *v)
	case "HumioRepoAction":
		*v = new(GetActionByIDSearchDomainActionHumioRepoAction)
		return json.Unmarshal(b, *v)
	case "OpsGenieAction":
		*v = new(GetActionByIDSearchDomainActionOpsGenieAction)
		return json.Unmarshal(b, *v)
	case "PagerDutyAction":
		*v = new(GetActionByIDSearchDomainActionPagerDutyAction)
		return json.Unmarshal(b, *v)
	case "SlackAction":
		*v = new(GetActionByIDSearchDomainActionSlackAction)
		return json.Unmarshal(b, *v)
	case "SlackPostMessageAction":
		*v = new(GetActionByIDSearchDomainActionSlackPostMessageAction)
		return json.Unmarshal(b, *v)
	case "UploadFileAction":
		*v = new(GetActionByIDSearchDomainActionUploadFileAction)
		return json.Unmarshal(b, *v)
	case "VictorOpsAction":
		*v = new(GetActionByIDSearchDomainActionVictorOpsAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(GetActionByIDSearchDomainActionWebhookAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Action.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetActionByIDSearchDomainAction: "%v"`, tn.TypeName)
	}
}

func __marshalGetActionByIDSearchDomainAction(v *GetActionByIDSearchDomainAction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetActionByIDSearchDomainActionEmailAction:
		typename = "EmailAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionEmailAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionHumioRepoAction:
		typename = "HumioRepoAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionHumioRepoAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionOpsGenieAction:
		typename = "OpsGenieAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionOpsGenieAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionPagerDutyAction:
		typename = "PagerDutyAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionPagerDutyAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionSlackAction:
		typename = "SlackAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionSlackAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionSlackPostMessageAction:
		typename = "SlackPostMessageAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionSlackPostMessageAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionUploadFileAction:
		typename = "UploadFileAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionUploadFileAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionVictorOpsAction:
		typename = "VictorOpsAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionVictorOpsAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetActionByIDSearchDomainActionWebhookAction:
		typename = "WebhookAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetActionByIDSearchDomainActionWebhookAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetActionByIDSearchDomainAction: "%T"`, v)
	}
}

// GetActionByIDSearchDomainActionEmailAction includes the requested fields of the GraphQL type EmailAction.
// The GraphQL type's documentation follows.
//
// An email action.
type GetActionByIDSearchDomainActionEmailAction struct {
	Typename                 *string `json:"__typename"`
	ActionDetailsEmailAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionEmailAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetId() string {
	return v.ActionDetailsEmailAction.Id
}

// GetName returns GetActionByIDSearchDomainActionEmailAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetName() string {
	return v.ActionDetailsEmailAction.Name
}

// GetRecipients returns GetActionByIDSearchDomainActionEmailAction.Recipients, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetRecipients() []string {
	return v.ActionDetailsEmailAction.Recipients
}

// GetSubjectTemplate returns GetActionByIDSearchDomainActionEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetSubjectTemplate() *string {
	return v.ActionDetailsEmailAction.SubjectTemplate
}

// GetEmailBodyTemplate returns GetActionByIDSearchDomainActionEmailAction.EmailBodyTemplate, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetEmailBodyTemplate() *string {
	return v.ActionDetailsEmailAction.EmailBodyTemplate
}

// GetUseProxy returns GetActionByIDSearchDomainActionEmailAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionEmailAction) GetUseProxy() bool {
	return v.ActionDetailsEmailAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionEmailAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionEmailAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionEmailAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsEmailAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionEmailAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Recipients []string `json:"recipients"`

	SubjectTemplate *string `json:"subjectTemplate"`

	EmailBodyTemplate *string `json:"emailBodyTemplate"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionEmailAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionEmailAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionEmailAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionEmailAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsEmailAction.Id
	retval.Name = v.ActionDetailsEmailAction.Name
	retval.Recipients = v.ActionDetailsEmailAction.Recipients
	retval.SubjectTemplate = v.ActionDetailsEmailAction.SubjectTemplate
	retval.EmailBodyTemplate = v.ActionDetailsEmailAction.EmailBodyTemplate
	retval.UseProxy = v.ActionDetailsEmailAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionHumioRepoAction includes the requested fields of the GraphQL type HumioRepoAction.
// The GraphQL type's documentation follows.
//
// A LogScale repository action.
type GetActionByIDSearchDomainActionHumioRepoAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsHumioRepoAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionHumioRepoAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionHumioRepoAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionHumioRepoAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionHumioRepoAction) GetId() string {
	return v.ActionDetailsHumioRepoAction.Id
}

// GetName returns GetActionByIDSearchDomainActionHumioRepoAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionHumioRepoAction) GetName() string {
	return v.ActionDetailsHumioRepoAction.Name
}

// GetIngestToken returns GetActionByIDSearchDomainActionHumioRepoAction.IngestToken, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionHumioRepoAction) GetIngestToken() string {
	return v.ActionDetailsHumioRepoAction.IngestToken
}

func (v *GetActionByIDSearchDomainActionHumioRepoAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionHumioRepoAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionHumioRepoAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsHumioRepoAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionHumioRepoAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	IngestToken string `json:"ingestToken"`
}

func (v *GetActionByIDSearchDomainActionHumioRepoAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionHumioRepoAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionHumioRepoAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionHumioRepoAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsHumioRepoAction.Id
	retval.Name = v.ActionDetailsHumioRepoAction.Name
	retval.IngestToken = v.ActionDetailsHumioRepoAction.IngestToken
	return &retval, nil
}

// GetActionByIDSearchDomainActionOpsGenieAction includes the requested fields of the GraphQL type OpsGenieAction.
// The GraphQL type's documentation follows.
//
// An OpsGenie action
type GetActionByIDSearchDomainActionOpsGenieAction struct {
	Typename                    *string `json:"__typename"`
	ActionDetailsOpsGenieAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionOpsGenieAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionOpsGenieAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetId() string {
	return v.ActionDetailsOpsGenieAction.Id
}

// GetName returns GetActionByIDSearchDomainActionOpsGenieAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetName() string {
	return v.ActionDetailsOpsGenieAction.Name
}

// GetApiUrl returns GetActionByIDSearchDomainActionOpsGenieAction.ApiUrl, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetApiUrl() string {
	return v.ActionDetailsOpsGenieAction.ApiUrl
}

// GetGenieKey returns GetActionByIDSearchDomainActionOpsGenieAction.GenieKey, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetGenieKey() string {
	return v.ActionDetailsOpsGenieAction.GenieKey
}

// GetUseProxy returns GetActionByIDSearchDomainActionOpsGenieAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionOpsGenieAction) GetUseProxy() bool {
	return v.ActionDetailsOpsGenieAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionOpsGenieAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionOpsGenieAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionOpsGenieAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsOpsGenieAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionOpsGenieAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	ApiUrl string `json:"apiUrl"`

	GenieKey string `json:"genieKey"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionOpsGenieAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionOpsGenieAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionOpsGenieAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionOpsGenieAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsOpsGenieAction.Id
	retval.Name = v.ActionDetailsOpsGenieAction.Name
	retval.ApiUrl = v.ActionDetailsOpsGenieAction.ApiUrl
	retval.GenieKey = v.ActionDetailsOpsGenieAction.GenieKey
	retval.UseProxy = v.ActionDetailsOpsGenieAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionPagerDutyAction includes the requested fields of the GraphQL type PagerDutyAction.
// The GraphQL type's documentation follows.
//
// A PagerDuty action.
type GetActionByIDSearchDomainActionPagerDutyAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsPagerDutyAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionPagerDutyAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionPagerDutyAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetId() string {
	return v.ActionDetailsPagerDutyAction.Id
}

// GetName returns GetActionByIDSearchDomainActionPagerDutyAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetName() string {
	return v.ActionDetailsPagerDutyAction.Name
}

// GetSeverity returns GetActionByIDSearchDomainActionPagerDutyAction.Severity, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetSeverity() string {
	return v.ActionDetailsPagerDutyAction.Severity
}

// GetRoutingKey returns GetActionByIDSearchDomainActionPagerDutyAction.RoutingKey, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetRoutingKey() string {
	return v.ActionDetailsPagerDutyAction.RoutingKey
}

// GetUseProxy returns GetActionByIDSearchDomainActionPagerDutyAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionPagerDutyAction) GetUseProxy() bool {
	return v.ActionDetailsPagerDutyAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionPagerDutyAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionPagerDutyAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionPagerDutyAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsPagerDutyAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionPagerDutyAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Severity string `json:"severity"`

	RoutingKey string `json:"routingKey"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionPagerDutyAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionPagerDutyAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionPagerDutyAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionPagerDutyAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsPagerDutyAction.Id
	retval.Name = v.ActionDetailsPagerDutyAction.Name
	retval.Severity = v.ActionDetailsPagerDutyAction.Severity
	retval.RoutingKey = v.ActionDetailsPagerDutyAction.RoutingKey
	retval.UseProxy = v.ActionDetailsPagerDutyAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionSlackAction includes the requested fields of the GraphQL type SlackAction.
// The GraphQL type's documentation follows.
//
// A Slack action
type GetActionByIDSearchDomainActionSlackAction struct {
	Typename                 *string `json:"__typename"`
	ActionDetailsSlackAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionSlackAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionSlackAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetId() string {
	return v.ActionDetailsSlackAction.Id
}

// GetName returns GetActionByIDSearchDomainActionSlackAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetName() string {
	return v.ActionDetailsSlackAction.Name
}

// GetUrl returns GetActionByIDSearchDomainActionSlackAction.Url, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetUrl() string {
	return v.ActionDetailsSlackAction.Url
}

// GetFields returns GetActionByIDSearchDomainActionSlackAction.Fields, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetFields() []ActionDetailsFieldsSlackFieldEntry {
	return v.ActionDetailsSlackAction.Fields
}

// GetUseProxy returns GetActionByIDSearchDomainActionSlackAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackAction) GetUseProxy() bool {
	return v.ActionDetailsSlackAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionSlackAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionSlackAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionSlackAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsSlackAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionSlackAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Url string `json:"url"`

	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionSlackAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionSlackAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionSlackAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionSlackAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsSlackAction.Id
	retval.Name = v.ActionDetailsSlackAction.Name
	retval.Url = v.ActionDetailsSlackAction.Url
	retval.Fields = v.ActionDetailsSlackAction.Fields
	retval.UseProxy = v.ActionDetailsSlackAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionSlackPostMessageAction includes the requested fields of the GraphQL type SlackPostMessageAction.
// The GraphQL type's documentation follows.
//
// A slack post-message action.
type GetActionByIDSearchDomainActionSlackPostMessageAction struct {
	Typename                            *string `json:"__typename"`
	ActionDetailsSlackPostMessageAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionSlackPostMessageAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetTypename() *string {
	return v.Typename
}

// GetId returns GetActionByIDSearchDomainActionSlackPostMessageAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetId() string {
	return v.ActionDetailsSlackPostMessageAction.Id
}

// GetName returns GetActionByIDSearchDomainActionSlackPostMessageAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetName() string {
	return v.ActionDetailsSlackPostMessageAction.Name
}

// GetApiToken returns GetActionByIDSearchDomainActionSlackPostMessageAction.ApiToken, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetApiToken() string {
	return v.ActionDetailsSlackPostMessageAction.ApiToken
}

// GetChannels returns GetActionByIDSearchDomainActionSlackPostMessageAction.Channels, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetChannels() []string {
	return v.ActionDetailsSlackPostMessageAction.Channels
}

// GetFields returns GetActionByIDSearchDomainActionSlackPostMessageAction.Fields, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetFields() []ActionDetailsFieldsSlackFieldEntry {
	return v.ActionDetailsSlackPostMessageAction.Fields
}

// GetUseProxy returns GetActionByIDSearchDomainActionSlackPostMessageAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) GetUseProxy() bool {
	return v.ActionDetailsSlackPostMessageAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionSlackPostMessageAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionSlackPostMessageAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsSlackPostMessageAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionSlackPostMessageAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	ApiToken string `json:"apiToken"`

	Channels []string `json:"channels"`

	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionSlackPostMessageAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionSlackPostMessageAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionSlackPostMessageAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsSlackPostMessageAction.Id
	retval.Name = v.ActionDetailsSlackPostMessageAction.Name
	retval.ApiToken = v.ActionDetailsSlackPostMessageAction.ApiToken
	retval.Channels = v.ActionDetailsSlackPostMessageAction.Channels
	retval.Fields = v.ActionDetailsSlackPostMessageAction.Fields
	retval.UseProxy = v.ActionDetailsSlackPostMessageAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionUploadFileAction includes the requested fields of the GraphQL type UploadFileAction.
// The GraphQL type's documentation follows.
//
// An upload file action.
type GetActionByIDSearchDomainActionUploadFileAction struct {
	Typename                      *string `json:"__typename"`
	ActionDetailsUploadFileAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionUploadFileAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionUploadFileAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionUploadFileAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionUploadFileAction) GetId() string {
	return v.ActionDetailsUploadFileAction.Id
}

// GetName returns GetActionByIDSearchDomainActionUploadFileAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionUploadFileAction) GetName() string {
	return v.ActionDetailsUploadFileAction.Name
}

func (v *GetActionByIDSearchDomainActionUploadFileAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionUploadFileAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionUploadFileAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsUploadFileAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionUploadFileAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *GetActionByIDSearchDomainActionUploadFileAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionUploadFileAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionUploadFileAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionUploadFileAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsUploadFileAction.Id
	retval.Name = v.ActionDetailsUploadFileAction.Name
	return &retval, nil
}

// GetActionByIDSearchDomainActionVictorOpsAction includes the requested fields of the GraphQL type VictorOpsAction.
// The GraphQL type's documentation follows.
//
// A VictorOps action.
type GetActionByIDSearchDomainActionVictorOpsAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsVictorOpsAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionVictorOpsAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionVictorOpsAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetId() string {
	return v.ActionDetailsVictorOpsAction.Id
}

// GetName returns GetActionByIDSearchDomainActionVictorOpsAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetName() string {
	return v.ActionDetailsVictorOpsAction.Name
}

// GetMessageType returns GetActionByIDSearchDomainActionVictorOpsAction.MessageType, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetMessageType() string {
	return v.ActionDetailsVictorOpsAction.MessageType
}

// GetNotifyUrl returns GetActionByIDSearchDomainActionVictorOpsAction.NotifyUrl, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetNotifyUrl() string {
	return v.ActionDetailsVictorOpsAction.NotifyUrl
}

// GetUseProxy returns GetActionByIDSearchDomainActionVictorOpsAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionVictorOpsAction) GetUseProxy() bool {
	return v.ActionDetailsVictorOpsAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionVictorOpsAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionVictorOpsAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionVictorOpsAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsVictorOpsAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionVictorOpsAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	MessageType string `json:"messageType"`

	NotifyUrl string `json:"notifyUrl"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionVictorOpsAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionVictorOpsAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionVictorOpsAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionVictorOpsAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsVictorOpsAction.Id
	retval.Name = v.ActionDetailsVictorOpsAction.Name
	retval.MessageType = v.ActionDetailsVictorOpsAction.MessageType
	retval.NotifyUrl = v.ActionDetailsVictorOpsAction.NotifyUrl
	retval.UseProxy = v.ActionDetailsVictorOpsAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainActionWebhookAction includes the requested fields of the GraphQL type WebhookAction.
// The GraphQL type's documentation follows.
//
// A webhook action
type GetActionByIDSearchDomainActionWebhookAction struct {
	Typename                   *string `json:"__typename"`
	ActionDetailsWebhookAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainActionWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetTypename() *string { return v.Typename }

// GetId returns GetActionByIDSearchDomainActionWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetId() string {
	return v.ActionDetailsWebhookAction.Id
}

// GetName returns GetActionByIDSearchDomainActionWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetName() string {
	return v.ActionDetailsWebhookAction.Name
}

// GetMethod returns GetActionByIDSearchDomainActionWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetMethod() string {
	return v.ActionDetailsWebhookAction.Method
}

// GetUrl returns GetActionByIDSearchDomainActionWebhookAction.Url, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetUrl() string {
	return v.ActionDetailsWebhookAction.Url
}

// GetHeaders returns GetActionByIDSearchDomainActionWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetHeaders() []ActionDetailsHeadersHttpHeaderEntry {
	return v.ActionDetailsWebhookAction.Headers
}

// GetWebhookBodyTemplate returns GetActionByIDSearchDomainActionWebhookAction.WebhookBodyTemplate, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetWebhookBodyTemplate() string {
	return v.ActionDetailsWebhookAction.WebhookBodyTemplate
}

// GetIgnoreSSL returns GetActionByIDSearchDomainActionWebhookAction.IgnoreSSL, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetIgnoreSSL() bool {
	return v.ActionDetailsWebhookAction.IgnoreSSL
}

// GetUseProxy returns GetActionByIDSearchDomainActionWebhookAction.UseProxy, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainActionWebhookAction) GetUseProxy() bool {
	return v.ActionDetailsWebhookAction.UseProxy
}

func (v *GetActionByIDSearchDomainActionWebhookAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainActionWebhookAction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainActionWebhookAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsWebhookAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainActionWebhookAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Method string `json:"method"`

	Url string `json:"url"`

	Headers []ActionDetailsHeadersHttpHeaderEntry `json:"headers"`

	WebhookBodyTemplate string `json:"WebhookBodyTemplate"`

	IgnoreSSL bool `json:"ignoreSSL"`

	UseProxy bool `json:"useProxy"`
}

func (v *GetActionByIDSearchDomainActionWebhookAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainActionWebhookAction) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainActionWebhookAction, error) {
	var retval __premarshalGetActionByIDSearchDomainActionWebhookAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsWebhookAction.Id
	retval.Name = v.ActionDetailsWebhookAction.Name
	retval.Method = v.ActionDetailsWebhookAction.Method
	retval.Url = v.ActionDetailsWebhookAction.Url
	retval.Headers = v.ActionDetailsWebhookAction.Headers
	retval.WebhookBodyTemplate = v.ActionDetailsWebhookAction.WebhookBodyTemplate
	retval.IgnoreSSL = v.ActionDetailsWebhookAction.IgnoreSSL
	retval.UseProxy = v.ActionDetailsWebhookAction.UseProxy
	return &retval, nil
}

// GetActionByIDSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetActionByIDSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Action GetActionByIDSearchDomainAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetAction returns GetActionByIDSearchDomainRepository.Action, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainRepository) GetAction() GetActionByIDSearchDomainAction {
	return v.Action
}

func (v *GetActionByIDSearchDomainRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainRepository
		Action json.RawMessage `json:"action"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Action
		src := firstPass.Action
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetActionByIDSearchDomainAction(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetActionByIDSearchDomainRepository.Action: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainRepository struct {
	Typename *string `json:"__typename"`

	Action json.RawMessage `json:"action"`
}

func (v *GetActionByIDSearchDomainRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainRepository) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainRepository, error) {
	var retval __premarshalGetActionByIDSearchDomainRepository

	retval.Typename = v.Typename
	{

		dst := &retval.Action
		src := v.Action
		var err error
		*dst, err = __marshalGetActionByIDSearchDomainAction(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetActionByIDSearchDomainRepository.Action: %w", err)
		}
	}
	return &retval, nil
}

// GetActionByIDSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type GetActionByIDSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Action GetActionByIDSearchDomainAction `json:"-"`
}

// GetTypename returns GetActionByIDSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainView) GetTypename() *string { return v.Typename }

// GetAction returns GetActionByIDSearchDomainView.Action, and is useful for accessing the field via an interface.
func (v *GetActionByIDSearchDomainView) GetAction() GetActionByIDSearchDomainAction { return v.Action }

func (v *GetActionByIDSearchDomainView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetActionByIDSearchDomainView
		Action json.RawMessage `json:"action"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetActionByIDSearchDomainView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Action
		src := firstPass.Action
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetActionByIDSearchDomainAction(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetActionByIDSearchDomainView.Action: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetActionByIDSearchDomainView struct {
	Typename *string `json:"__typename"`

	Action json.RawMessage `json:"action"`
}

func (v *GetActionByIDSearchDomainView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetActionByIDSearchDomainView) __premarshalJSON() (*__premarshalGetActionByIDSearchDomainView, error) {
	var retval __premarshalGetActionByIDSearchDomainView

	retval.Typename = v.Typename
	{

		dst := &retval.Action
		src := v.Action
		var err error
		*dst, err = __marshalGetActionByIDSearchDomainAction(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetActionByIDSearchDomainView.Action: %w", err)
		}
	}
	return &retval, nil
}

// GetAggregateAlertByIDResponse is returned by GetAggregateAlertByID on success.
type GetAggregateAlertByIDResponse struct {
	// Stability: Long-term
	SearchDomain GetAggregateAlertByIDSearchDomain `json:"-"`
}

// GetSearchDomain returns GetAggregateAlertByIDResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDResponse) GetSearchDomain() GetAggregateAlertByIDSearchDomain {
	return v.SearchDomain
}

func (v *GetAggregateAlertByIDResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAggregateAlertByIDResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAggregateAlertByIDResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAggregateAlertByIDSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAggregateAlertByIDResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAggregateAlertByIDResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *GetAggregateAlertByIDResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAggregateAlertByIDResponse) __premarshalJSON() (*__premarshalGetAggregateAlertByIDResponse, error) {
	var retval __premarshalGetAggregateAlertByIDResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalGetAggregateAlertByIDSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAggregateAlertByIDResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// GetAggregateAlertByIDSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// GetAggregateAlertByIDSearchDomain is implemented by the following types:
// GetAggregateAlertByIDSearchDomainRepository
// GetAggregateAlertByIDSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type GetAggregateAlertByIDSearchDomain interface {
	implementsGraphQLInterfaceGetAggregateAlertByIDSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetAggregateAlert returns the interface-field "aggregateAlert" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAggregateAlert() GetAggregateAlertByIDSearchDomainAggregateAlert
}

func (v *GetAggregateAlertByIDSearchDomainRepository) implementsGraphQLInterfaceGetAggregateAlertByIDSearchDomain() {
}
func (v *GetAggregateAlertByIDSearchDomainView) implementsGraphQLInterfaceGetAggregateAlertByIDSearchDomain() {
}

func __unmarshalGetAggregateAlertByIDSearchDomain(b []byte, v *GetAggregateAlertByIDSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(GetAggregateAlertByIDSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(GetAggregateAlertByIDSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAggregateAlertByIDSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalGetAggregateAlertByIDSearchDomain(v *GetAggregateAlertByIDSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAggregateAlertByIDSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAggregateAlertByIDSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *GetAggregateAlertByIDSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAggregateAlertByIDSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAggregateAlertByIDSearchDomain: "%T"`, v)
	}
}

// GetAggregateAlertByIDSearchDomainAggregateAlert includes the requested fields of the GraphQL type AggregateAlert.
// The GraphQL type's documentation follows.
//
// An aggregate alert.
type GetAggregateAlertByIDSearchDomainAggregateAlert struct {
	AggregateAlertDetails `json:"-"`
}

// GetId returns GetAggregateAlertByIDSearchDomainAggregateAlert.Id, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetId() string {
	return v.AggregateAlertDetails.Id
}

// GetName returns GetAggregateAlertByIDSearchDomainAggregateAlert.Name, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetName() string {
	return v.AggregateAlertDetails.Name
}

// GetDescription returns GetAggregateAlertByIDSearchDomainAggregateAlert.Description, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetDescription() *string {
	return v.AggregateAlertDetails.Description
}

// GetQueryString returns GetAggregateAlertByIDSearchDomainAggregateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetQueryString() string {
	return v.AggregateAlertDetails.QueryString
}

// GetSearchIntervalSeconds returns GetAggregateAlertByIDSearchDomainAggregateAlert.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetSearchIntervalSeconds() int64 {
	return v.AggregateAlertDetails.SearchIntervalSeconds
}

// GetThrottleTimeSeconds returns GetAggregateAlertByIDSearchDomainAggregateAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetThrottleTimeSeconds() int64 {
	return v.AggregateAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns GetAggregateAlertByIDSearchDomainAggregateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetThrottleField() *string {
	return v.AggregateAlertDetails.ThrottleField
}

// GetLabels returns GetAggregateAlertByIDSearchDomainAggregateAlert.Labels, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetLabels() []string {
	return v.AggregateAlertDetails.Labels
}

// GetEnabled returns GetAggregateAlertByIDSearchDomainAggregateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetEnabled() bool {
	return v.AggregateAlertDetails.Enabled
}

// GetTriggerMode returns GetAggregateAlertByIDSearchDomainAggregateAlert.TriggerMode, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetTriggerMode() TriggerMode {
	return v.AggregateAlertDetails.TriggerMode
}

// GetQueryTimestampType returns GetAggregateAlertByIDSearchDomainAggregateAlert.QueryTimestampType, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetQueryTimestampType() QueryTimestampType {
	return v.AggregateAlertDetails.QueryTimestampType
}

// GetActions returns GetAggregateAlertByIDSearchDomainAggregateAlert.Actions, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetActions() []SharedActionNameType {
	return v.AggregateAlertDetails.Actions
}

// GetQueryOwnership returns GetAggregateAlertByIDSearchDomainAggregateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AggregateAlertDetails.QueryOwnership
}

func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAggregateAlertByIDSearchDomainAggregateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAggregateAlertByIDSearchDomainAggregateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AggregateAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAggregateAlertByIDSearchDomainAggregateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`

	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	TriggerMode TriggerMode `json:"triggerMode"`

	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAggregateAlertByIDSearchDomainAggregateAlert) __premarshalJSON() (*__premarshalGetAggregateAlertByIDSearchDomainAggregateAlert, error) {
	var retval __premarshalGetAggregateAlertByIDSearchDomainAggregateAlert

	retval.Id = v.AggregateAlertDetails.Id
	retval.Name = v.AggregateAlertDetails.Name
	retval.Description = v.AggregateAlertDetails.Description
	retval.QueryString = v.AggregateAlertDetails.QueryString
	retval.SearchIntervalSeconds = v.AggregateAlertDetails.SearchIntervalSeconds
	retval.ThrottleTimeSeconds = v.AggregateAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.AggregateAlertDetails.ThrottleField
	retval.Labels = v.AggregateAlertDetails.Labels
	retval.Enabled = v.AggregateAlertDetails.Enabled
	retval.TriggerMode = v.AggregateAlertDetails.TriggerMode
	retval.QueryTimestampType = v.AggregateAlertDetails.QueryTimestampType
	{

		dst := &retval.Actions
		src := v.AggregateAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetAggregateAlertByIDSearchDomainAggregateAlert.AggregateAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AggregateAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAggregateAlertByIDSearchDomainAggregateAlert.AggregateAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// GetAggregateAlertByIDSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetAggregateAlertByIDSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	AggregateAlert GetAggregateAlertByIDSearchDomainAggregateAlert `json:"aggregateAlert"`
}

// GetTypename returns GetAggregateAlertByIDSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetAggregateAlert returns GetAggregateAlertByIDSearchDomainRepository.AggregateAlert, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainRepository) GetAggregateAlert() GetAggregateAlertByIDSearchDomainAggregateAlert {
	return v.AggregateAlert
}

// GetAggregateAlertByIDSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type GetAggregateAlertByIDSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	AggregateAlert GetAggregateAlertByIDSearchDomainAggregateAlert `json:"aggregateAlert"`
}

// GetTypename returns GetAggregateAlertByIDSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainView) GetTypename() *string { return v.Typename }

// GetAggregateAlert returns GetAggregateAlertByIDSearchDomainView.AggregateAlert, and is useful for accessing the field via an interface.
func (v *GetAggregateAlertByIDSearchDomainView) GetAggregateAlert() GetAggregateAlertByIDSearchDomainAggregateAlert {
	return v.AggregateAlert
}

// GetClusterCluster includes the requested fields of the GraphQL type Cluster.
// The GraphQL type's documentation follows.
//
// Information about the LogScale cluster.
type GetClusterCluster struct {
	// Stability: Long-term
	Nodes []GetClusterClusterNodesClusterNode `json:"nodes"`
}

// GetNodes returns GetClusterCluster.Nodes, and is useful for accessing the field via an interface.
func (v *GetClusterCluster) GetNodes() []GetClusterClusterNodesClusterNode { return v.Nodes }

// GetClusterClusterNodesClusterNode includes the requested fields of the GraphQL type ClusterNode.
// The GraphQL type's documentation follows.
//
// A node in the a LogScale Cluster.
type GetClusterClusterNodesClusterNode struct {
	// Stability: Long-term
	Id int `json:"id"`
	// Stability: Long-term
	Zone *string `json:"zone"`
	// Stability: Long-term
	Uri string `json:"uri"`
	// A flag indicating whether the node is considered up or down by the cluster coordinated. This is based on the `lastHeartbeat` field.
	// Stability: Long-term
	IsAvailable bool `json:"isAvailable"`
}

// GetId returns GetClusterClusterNodesClusterNode.Id, and is useful for accessing the field via an interface.
func (v *GetClusterClusterNodesClusterNode) GetId() int { return v.Id }

// GetZone returns GetClusterClusterNodesClusterNode.Zone, and is useful for accessing the field via an interface.
func (v *GetClusterClusterNodesClusterNode) GetZone() *string { return v.Zone }

// GetUri returns GetClusterClusterNodesClusterNode.Uri, and is useful for accessing the field via an interface.
func (v *GetClusterClusterNodesClusterNode) GetUri() string { return v.Uri }

// GetIsAvailable returns GetClusterClusterNodesClusterNode.IsAvailable, and is useful for accessing the field via an interface.
func (v *GetClusterClusterNodesClusterNode) GetIsAvailable() bool { return v.IsAvailable }

// GetClusterResponse is returned by GetCluster on success.
type GetClusterResponse struct {
	// This is used to retrieve information about a cluster.
	// Stability: Long-term
	Cluster GetClusterCluster `json:"cluster"`
}

// GetCluster returns GetClusterResponse.Cluster, and is useful for accessing the field via an interface.
func (v *GetClusterResponse) GetCluster() GetClusterCluster { return v.Cluster }

// GetEvictionStatusCluster includes the requested fields of the GraphQL type Cluster.
// The GraphQL type's documentation follows.
//
// Information about the LogScale cluster.
type GetEvictionStatusCluster struct {
	// Stability: Long-term
	Nodes []GetEvictionStatusClusterNodesClusterNode `json:"nodes"`
}

// GetNodes returns GetEvictionStatusCluster.Nodes, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusCluster) GetNodes() []GetEvictionStatusClusterNodesClusterNode {
	return v.Nodes
}

// GetEvictionStatusClusterNodesClusterNode includes the requested fields of the GraphQL type ClusterNode.
// The GraphQL type's documentation follows.
//
// A node in the a LogScale Cluster.
type GetEvictionStatusClusterNodesClusterNode struct {
	// Stability: Long-term
	Id int `json:"id"`
	// A flag indicating whether the node is marked for eviction. The Falcon LogScale cluster will start to move segments, digesters and queries away from any node marked for eviction
	// Stability: Long-term
	IsBeingEvicted *bool `json:"isBeingEvicted"`
	// Stability: Long-term
	ReasonsNodeCannotBeSafelyUnregistered GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered `json:"reasonsNodeCannotBeSafelyUnregistered"`
}

// GetId returns GetEvictionStatusClusterNodesClusterNode.Id, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNode) GetId() int { return v.Id }

// GetIsBeingEvicted returns GetEvictionStatusClusterNodesClusterNode.IsBeingEvicted, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNode) GetIsBeingEvicted() *bool { return v.IsBeingEvicted }

// GetReasonsNodeCannotBeSafelyUnregistered returns GetEvictionStatusClusterNodesClusterNode.ReasonsNodeCannotBeSafelyUnregistered, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNode) GetReasonsNodeCannotBeSafelyUnregistered() GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered {
	return v.ReasonsNodeCannotBeSafelyUnregistered
}

// GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered includes the requested fields of the GraphQL type ReasonsNodeCannotBeSafelyUnregistered.
// The GraphQL type's documentation follows.
//
// A map from reasons why a node might not be able to be unregistered safely, to the boolean value indicating whether a given reason applies to this node. For a node to be unregistered without any undue disruption, none of the reasons must apply.
type GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered struct {
	// Stability: Long-term
	IsAlive bool `json:"isAlive"`
	// Stability: Long-term
	HasUnderReplicatedData bool `json:"hasUnderReplicatedData"`
	// Stability: Long-term
	HasDataThatExistsOnlyOnThisNode bool `json:"hasDataThatExistsOnlyOnThisNode"`
	// Stability: Long-term
	LeadsDigest bool `json:"leadsDigest"`
}

// GetIsAlive returns GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered.IsAlive, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered) GetIsAlive() bool {
	return v.IsAlive
}

// GetHasUnderReplicatedData returns GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered.HasUnderReplicatedData, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered) GetHasUnderReplicatedData() bool {
	return v.HasUnderReplicatedData
}

// GetHasDataThatExistsOnlyOnThisNode returns GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered.HasDataThatExistsOnlyOnThisNode, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered) GetHasDataThatExistsOnlyOnThisNode() bool {
	return v.HasDataThatExistsOnlyOnThisNode
}

// GetLeadsDigest returns GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered.LeadsDigest, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusClusterNodesClusterNodeReasonsNodeCannotBeSafelyUnregistered) GetLeadsDigest() bool {
	return v.LeadsDigest
}

// GetEvictionStatusResponse is returned by GetEvictionStatus on success.
type GetEvictionStatusResponse struct {
	// This is used to retrieve information about a cluster.
	// Stability: Long-term
	Cluster GetEvictionStatusCluster `json:"cluster"`
}

// GetCluster returns GetEvictionStatusResponse.Cluster, and is useful for accessing the field via an interface.
func (v *GetEvictionStatusResponse) GetCluster() GetEvictionStatusCluster { return v.Cluster }

// GetFilterAlertByIDResponse is returned by GetFilterAlertByID on success.
type GetFilterAlertByIDResponse struct {
	// Stability: Long-term
	SearchDomain GetFilterAlertByIDSearchDomain `json:"-"`
}

// GetSearchDomain returns GetFilterAlertByIDResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDResponse) GetSearchDomain() GetFilterAlertByIDSearchDomain {
	return v.SearchDomain
}

func (v *GetFilterAlertByIDResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetFilterAlertByIDResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetFilterAlertByIDResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetFilterAlertByIDSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetFilterAlertByIDResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetFilterAlertByIDResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *GetFilterAlertByIDResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetFilterAlertByIDResponse) __premarshalJSON() (*__premarshalGetFilterAlertByIDResponse, error) {
	var retval __premarshalGetFilterAlertByIDResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalGetFilterAlertByIDSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetFilterAlertByIDResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// GetFilterAlertByIDSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// GetFilterAlertByIDSearchDomain is implemented by the following types:
// GetFilterAlertByIDSearchDomainRepository
// GetFilterAlertByIDSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type GetFilterAlertByIDSearchDomain interface {
	implementsGraphQLInterfaceGetFilterAlertByIDSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetFilterAlert returns the interface-field "filterAlert" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetFilterAlert() GetFilterAlertByIDSearchDomainFilterAlert
}

func (v *GetFilterAlertByIDSearchDomainRepository) implementsGraphQLInterfaceGetFilterAlertByIDSearchDomain() {
}
func (v *GetFilterAlertByIDSearchDomainView) implementsGraphQLInterfaceGetFilterAlertByIDSearchDomain() {
}

func __unmarshalGetFilterAlertByIDSearchDomain(b []byte, v *GetFilterAlertByIDSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(GetFilterAlertByIDSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(GetFilterAlertByIDSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetFilterAlertByIDSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalGetFilterAlertByIDSearchDomain(v *GetFilterAlertByIDSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetFilterAlertByIDSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*GetFilterAlertByIDSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *GetFilterAlertByIDSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*GetFilterAlertByIDSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetFilterAlertByIDSearchDomain: "%T"`, v)
	}
}

// GetFilterAlertByIDSearchDomainFilterAlert includes the requested fields of the GraphQL type FilterAlert.
// The GraphQL type's documentation follows.
//
// A filter alert.
type GetFilterAlertByIDSearchDomainFilterAlert struct {
	FilterAlertDetails `json:"-"`
}

// GetId returns GetFilterAlertByIDSearchDomainFilterAlert.Id, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetId() string { return v.FilterAlertDetails.Id }

// GetName returns GetFilterAlertByIDSearchDomainFilterAlert.Name, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetName() string {
	return v.FilterAlertDetails.Name
}

// GetDescription returns GetFilterAlertByIDSearchDomainFilterAlert.Description, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetDescription() *string {
	return v.FilterAlertDetails.Description
}

// GetQueryString returns GetFilterAlertByIDSearchDomainFilterAlert.QueryString, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetQueryString() string {
	return v.FilterAlertDetails.QueryString
}

// GetThrottleTimeSeconds returns GetFilterAlertByIDSearchDomainFilterAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetThrottleTimeSeconds() *int64 {
	return v.FilterAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns GetFilterAlertByIDSearchDomainFilterAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetThrottleField() *string {
	return v.FilterAlertDetails.ThrottleField
}

// GetLabels returns GetFilterAlertByIDSearchDomainFilterAlert.Labels, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetLabels() []string {
	return v.FilterAlertDetails.Labels
}

// GetEnabled returns GetFilterAlertByIDSearchDomainFilterAlert.Enabled, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetEnabled() bool {
	return v.FilterAlertDetails.Enabled
}

// GetActions returns GetFilterAlertByIDSearchDomainFilterAlert.Actions, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetActions() []SharedActionNameType {
	return v.FilterAlertDetails.Actions
}

// GetQueryOwnership returns GetFilterAlertByIDSearchDomainFilterAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainFilterAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.FilterAlertDetails.QueryOwnership
}

func (v *GetFilterAlertByIDSearchDomainFilterAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetFilterAlertByIDSearchDomainFilterAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.GetFilterAlertByIDSearchDomainFilterAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetFilterAlertByIDSearchDomainFilterAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *GetFilterAlertByIDSearchDomainFilterAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetFilterAlertByIDSearchDomainFilterAlert) __premarshalJSON() (*__premarshalGetFilterAlertByIDSearchDomainFilterAlert, error) {
	var retval __premarshalGetFilterAlertByIDSearchDomainFilterAlert

	retval.Id = v.FilterAlertDetails.Id
	retval.Name = v.FilterAlertDetails.Name
	retval.Description = v.FilterAlertDetails.Description
	retval.QueryString = v.FilterAlertDetails.QueryString
	retval.ThrottleTimeSeconds = v.FilterAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.FilterAlertDetails.ThrottleField
	retval.Labels = v.FilterAlertDetails.Labels
	retval.Enabled = v.FilterAlertDetails.Enabled
	{

		dst := &retval.Actions
		src := v.FilterAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetFilterAlertByIDSearchDomainFilterAlert.FilterAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.FilterAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetFilterAlertByIDSearchDomainFilterAlert.FilterAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// GetFilterAlertByIDSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetFilterAlertByIDSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	FilterAlert GetFilterAlertByIDSearchDomainFilterAlert `json:"filterAlert"`
}

// GetTypename returns GetFilterAlertByIDSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetFilterAlert returns GetFilterAlertByIDSearchDomainRepository.FilterAlert, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainRepository) GetFilterAlert() GetFilterAlertByIDSearchDomainFilterAlert {
	return v.FilterAlert
}

// GetFilterAlertByIDSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type GetFilterAlertByIDSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	FilterAlert GetFilterAlertByIDSearchDomainFilterAlert `json:"filterAlert"`
}

// GetTypename returns GetFilterAlertByIDSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainView) GetTypename() *string { return v.Typename }

// GetFilterAlert returns GetFilterAlertByIDSearchDomainView.FilterAlert, and is useful for accessing the field via an interface.
func (v *GetFilterAlertByIDSearchDomainView) GetFilterAlert() GetFilterAlertByIDSearchDomainFilterAlert {
	return v.FilterAlert
}

// GetLicenseInstalledLicense includes the requested fields of the GraphQL interface License.
//
// GetLicenseInstalledLicense is implemented by the following types:
// GetLicenseInstalledLicenseOnPremLicense
// GetLicenseInstalledLicenseTrialLicense
// The GraphQL type's documentation follows.
//
// Represents information about the LogScale instance.
type GetLicenseInstalledLicense interface {
	implementsGraphQLInterfaceGetLicenseInstalledLicense()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetLicenseInstalledLicenseOnPremLicense) implementsGraphQLInterfaceGetLicenseInstalledLicense() {
}
func (v *GetLicenseInstalledLicenseTrialLicense) implementsGraphQLInterfaceGetLicenseInstalledLicense() {
}

func __unmarshalGetLicenseInstalledLicense(b []byte, v *GetLicenseInstalledLicense) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OnPremLicense":
		*v = new(GetLicenseInstalledLicenseOnPremLicense)
		return json.Unmarshal(b, *v)
	case "TrialLicense":
		*v = new(GetLicenseInstalledLicenseTrialLicense)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing License.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetLicenseInstalledLicense: "%v"`, tn.TypeName)
	}
}

func __marshalGetLicenseInstalledLicense(v *GetLicenseInstalledLicense) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetLicenseInstalledLicenseOnPremLicense:
		typename = "OnPremLicense"

		result := struct {
			TypeName string `json:"__typename"`
			*GetLicenseInstalledLicenseOnPremLicense
		}{typename, v}
		return json.Marshal(result)
	case *GetLicenseInstalledLicenseTrialLicense:
		typename = "TrialLicense"

		result := struct {
			TypeName string `json:"__typename"`
			*GetLicenseInstalledLicenseTrialLicense
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetLicenseInstalledLicense: "%T"`, v)
	}
}

// GetLicenseInstalledLicenseOnPremLicense includes the requested fields of the GraphQL type OnPremLicense.
// The GraphQL type's documentation follows.
//
// Represents information about a LogScale License.
type GetLicenseInstalledLicenseOnPremLicense struct {
	Typename *string `json:"__typename"`
	// license id.
	// Stability: Long-term
	Uid string `json:"uid"`
	// The time at which the license expires.
	// Stability: Long-term
	ExpiresAt time.Time `json:"expiresAt"`
}

// GetTypename returns GetLicenseInstalledLicenseOnPremLicense.Typename, and is useful for accessing the field via an interface.
func (v *GetLicenseInstalledLicenseOnPremLicense) GetTypename() *string { return v.Typename }

// GetUid returns GetLicenseInstalledLicenseOnPremLicense.Uid, and is useful for accessing the field via an interface.
func (v *GetLicenseInstalledLicenseOnPremLicense) GetUid() string { return v.Uid }

// GetExpiresAt returns GetLicenseInstalledLicenseOnPremLicense.ExpiresAt, and is useful for accessing the field via an interface.
func (v *GetLicenseInstalledLicenseOnPremLicense) GetExpiresAt() time.Time { return v.ExpiresAt }

// GetLicenseInstalledLicenseTrialLicense includes the requested fields of the GraphQL type TrialLicense.
// The GraphQL type's documentation follows.
//
// Represents information about an on-going trial of LogScale.
type GetLicenseInstalledLicenseTrialLicense struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetLicenseInstalledLicenseTrialLicense.Typename, and is useful for accessing the field via an interface.
func (v *GetLicenseInstalledLicenseTrialLicense) GetTypename() *string { return v.Typename }

// GetLicenseResponse is returned by GetLicense on success.
type GetLicenseResponse struct {
	// This returns information about the license for the LogScale instance, if any license installed.
	// Stability: Long-term
	InstalledLicense *GetLicenseInstalledLicense `json:"-"`
}

// GetInstalledLicense returns GetLicenseResponse.InstalledLicense, and is useful for accessing the field via an interface.
func (v *GetLicenseResponse) GetInstalledLicense() *GetLicenseInstalledLicense {
	return v.InstalledLicense
}

func (v *GetLicenseResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetLicenseResponse
		InstalledLicense json.RawMessage `json:"installedLicense"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetLicenseResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.InstalledLicense
		src := firstPass.InstalledLicense
		if len(src) != 0 && string(src) != "null" {
			*dst = new(GetLicenseInstalledLicense)
			err = __unmarshalGetLicenseInstalledLicense(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetLicenseResponse.InstalledLicense: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetLicenseResponse struct {
	InstalledLicense json.RawMessage `json:"installedLicense"`
}

func (v *GetLicenseResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetLicenseResponse) __premarshalJSON() (*__premarshalGetLicenseResponse, error) {
	var retval __premarshalGetLicenseResponse

	{

		dst := &retval.InstalledLicense
		src := v.InstalledLicense
		if src != nil {
			var err error
			*dst, err = __marshalGetLicenseInstalledLicense(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetLicenseResponse.InstalledLicense: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetParserByIDRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetParserByIDRepository struct {
	// A parser on the repository.
	// Stability: Long-term
	Parser *GetParserByIDRepositoryParser `json:"parser"`
}

// GetParser returns GetParserByIDRepository.Parser, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepository) GetParser() *GetParserByIDRepositoryParser { return v.Parser }

// GetParserByIDRepositoryParser includes the requested fields of the GraphQL type Parser.
// The GraphQL type's documentation follows.
//
// A configured parser for incoming data.
type GetParserByIDRepositoryParser struct {
	ParserDetails `json:"-"`
}

// GetId returns GetParserByIDRepositoryParser.Id, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepositoryParser) GetId() string { return v.ParserDetails.Id }

// GetName returns GetParserByIDRepositoryParser.Name, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepositoryParser) GetName() string { return v.ParserDetails.Name }

// GetScript returns GetParserByIDRepositoryParser.Script, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepositoryParser) GetScript() string { return v.ParserDetails.Script }

// GetFieldsToTag returns GetParserByIDRepositoryParser.FieldsToTag, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepositoryParser) GetFieldsToTag() []string { return v.ParserDetails.FieldsToTag }

// GetTestCases returns GetParserByIDRepositoryParser.TestCases, and is useful for accessing the field via an interface.
func (v *GetParserByIDRepositoryParser) GetTestCases() []ParserDetailsTestCasesParserTestCase {
	return v.ParserDetails.TestCases
}

func (v *GetParserByIDRepositoryParser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetParserByIDRepositoryParser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetParserByIDRepositoryParser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ParserDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetParserByIDRepositoryParser struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Script string `json:"script"`

	FieldsToTag []string `json:"fieldsToTag"`

	TestCases []ParserDetailsTestCasesParserTestCase `json:"testCases"`
}

func (v *GetParserByIDRepositoryParser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetParserByIDRepositoryParser) __premarshalJSON() (*__premarshalGetParserByIDRepositoryParser, error) {
	var retval __premarshalGetParserByIDRepositoryParser

	retval.Id = v.ParserDetails.Id
	retval.Name = v.ParserDetails.Name
	retval.Script = v.ParserDetails.Script
	retval.FieldsToTag = v.ParserDetails.FieldsToTag
	retval.TestCases = v.ParserDetails.TestCases
	return &retval, nil
}

// GetParserByIDResponse is returned by GetParserByID on success.
type GetParserByIDResponse struct {
	// Lookup a given repository by name.
	// Stability: Long-term
	Repository GetParserByIDRepository `json:"repository"`
}

// GetRepository returns GetParserByIDResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetParserByIDResponse) GetRepository() GetParserByIDRepository { return v.Repository }

// GetRepositoryRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetRepositoryRepository struct {
	RepositoryDetails `json:"-"`
}

// GetId returns GetRepositoryRepository.Id, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetId() string { return v.RepositoryDetails.Id }

// GetName returns GetRepositoryRepository.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetName() string { return v.RepositoryDetails.Name }

// GetDescription returns GetRepositoryRepository.Description, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetDescription() *string { return v.RepositoryDetails.Description }

// GetTimeBasedRetention returns GetRepositoryRepository.TimeBasedRetention, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetTimeBasedRetention() *float64 {
	return v.RepositoryDetails.TimeBasedRetention
}

// GetIngestSizeBasedRetention returns GetRepositoryRepository.IngestSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetIngestSizeBasedRetention() *float64 {
	return v.RepositoryDetails.IngestSizeBasedRetention
}

// GetStorageSizeBasedRetention returns GetRepositoryRepository.StorageSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetStorageSizeBasedRetention() *float64 {
	return v.RepositoryDetails.StorageSizeBasedRetention
}

// GetCompressedByteSize returns GetRepositoryRepository.CompressedByteSize, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetCompressedByteSize() int64 {
	return v.RepositoryDetails.CompressedByteSize
}

// GetAutomaticSearch returns GetRepositoryRepository.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetAutomaticSearch() bool {
	return v.RepositoryDetails.AutomaticSearch
}

// GetS3ArchivingConfiguration returns GetRepositoryRepository.S3ArchivingConfiguration, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetS3ArchivingConfiguration() *RepositoryDetailsS3ArchivingConfigurationS3Configuration {
	return v.RepositoryDetails.S3ArchivingConfiguration
}

func (v *GetRepositoryRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRepositoryRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRepositoryRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRepositoryRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	TimeBasedRetention *float64 `json:"timeBasedRetention"`

	IngestSizeBasedRetention *float64 `json:"ingestSizeBasedRetention"`

	StorageSizeBasedRetention *float64 `json:"storageSizeBasedRetention"`

	CompressedByteSize int64 `json:"compressedByteSize"`

	AutomaticSearch bool `json:"automaticSearch"`

	S3ArchivingConfiguration *RepositoryDetailsS3ArchivingConfigurationS3Configuration `json:"s3ArchivingConfiguration"`
}

func (v *GetRepositoryRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRepositoryRepository) __premarshalJSON() (*__premarshalGetRepositoryRepository, error) {
	var retval __premarshalGetRepositoryRepository

	retval.Id = v.RepositoryDetails.Id
	retval.Name = v.RepositoryDetails.Name
	retval.Description = v.RepositoryDetails.Description
	retval.TimeBasedRetention = v.RepositoryDetails.TimeBasedRetention
	retval.IngestSizeBasedRetention = v.RepositoryDetails.IngestSizeBasedRetention
	retval.StorageSizeBasedRetention = v.RepositoryDetails.StorageSizeBasedRetention
	retval.CompressedByteSize = v.RepositoryDetails.CompressedByteSize
	retval.AutomaticSearch = v.RepositoryDetails.AutomaticSearch
	retval.S3ArchivingConfiguration = v.RepositoryDetails.S3ArchivingConfiguration
	return &retval, nil
}

// GetRepositoryResponse is returned by GetRepository on success.
type GetRepositoryResponse struct {
	// Lookup a given repository by name.
	// Stability: Long-term
	Repository GetRepositoryRepository `json:"repository"`
}

// GetRepository returns GetRepositoryResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetRepositoryResponse) GetRepository() GetRepositoryRepository { return v.Repository }

// GetScheduledSearchByIDResponse is returned by GetScheduledSearchByID on success.
type GetScheduledSearchByIDResponse struct {
	// Stability: Long-term
	SearchDomain GetScheduledSearchByIDSearchDomain `json:"-"`
}

// GetSearchDomain returns GetScheduledSearchByIDResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDResponse) GetSearchDomain() GetScheduledSearchByIDSearchDomain {
	return v.SearchDomain
}

func (v *GetScheduledSearchByIDResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetScheduledSearchByIDResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetScheduledSearchByIDResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetScheduledSearchByIDSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetScheduledSearchByIDResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetScheduledSearchByIDResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *GetScheduledSearchByIDResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetScheduledSearchByIDResponse) __premarshalJSON() (*__premarshalGetScheduledSearchByIDResponse, error) {
	var retval __premarshalGetScheduledSearchByIDResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalGetScheduledSearchByIDSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetScheduledSearchByIDResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// GetScheduledSearchByIDSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// GetScheduledSearchByIDSearchDomain is implemented by the following types:
// GetScheduledSearchByIDSearchDomainRepository
// GetScheduledSearchByIDSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type GetScheduledSearchByIDSearchDomain interface {
	implementsGraphQLInterfaceGetScheduledSearchByIDSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetScheduledSearch returns the interface-field "scheduledSearch" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetScheduledSearch() GetScheduledSearchByIDSearchDomainScheduledSearch
}

func (v *GetScheduledSearchByIDSearchDomainRepository) implementsGraphQLInterfaceGetScheduledSearchByIDSearchDomain() {
}
func (v *GetScheduledSearchByIDSearchDomainView) implementsGraphQLInterfaceGetScheduledSearchByIDSearchDomain() {
}

func __unmarshalGetScheduledSearchByIDSearchDomain(b []byte, v *GetScheduledSearchByIDSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(GetScheduledSearchByIDSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(GetScheduledSearchByIDSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetScheduledSearchByIDSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalGetScheduledSearchByIDSearchDomain(v *GetScheduledSearchByIDSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetScheduledSearchByIDSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*GetScheduledSearchByIDSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *GetScheduledSearchByIDSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*GetScheduledSearchByIDSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetScheduledSearchByIDSearchDomain: "%T"`, v)
	}
}

// GetScheduledSearchByIDSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetScheduledSearchByIDSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	ScheduledSearch GetScheduledSearchByIDSearchDomainScheduledSearch `json:"scheduledSearch"`
}

// GetTypename returns GetScheduledSearchByIDSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetScheduledSearch returns GetScheduledSearchByIDSearchDomainRepository.ScheduledSearch, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainRepository) GetScheduledSearch() GetScheduledSearchByIDSearchDomainScheduledSearch {
	return v.ScheduledSearch
}

// GetScheduledSearchByIDSearchDomainScheduledSearch includes the requested fields of the GraphQL type ScheduledSearch.
// The GraphQL type's documentation follows.
//
// Information about a scheduled search
type GetScheduledSearchByIDSearchDomainScheduledSearch struct {
	ScheduledSearchDetails `json:"-"`
}

// GetId returns GetScheduledSearchByIDSearchDomainScheduledSearch.Id, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetId() string {
	return v.ScheduledSearchDetails.Id
}

// GetName returns GetScheduledSearchByIDSearchDomainScheduledSearch.Name, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetName() string {
	return v.ScheduledSearchDetails.Name
}

// GetDescription returns GetScheduledSearchByIDSearchDomainScheduledSearch.Description, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetDescription() *string {
	return v.ScheduledSearchDetails.Description
}

// GetQueryString returns GetScheduledSearchByIDSearchDomainScheduledSearch.QueryString, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetQueryString() string {
	return v.ScheduledSearchDetails.QueryString
}

// GetStart returns GetScheduledSearchByIDSearchDomainScheduledSearch.Start, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetStart() string {
	return v.ScheduledSearchDetails.Start
}

// GetEnd returns GetScheduledSearchByIDSearchDomainScheduledSearch.End, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetEnd() string {
	return v.ScheduledSearchDetails.End
}

// GetTimeZone returns GetScheduledSearchByIDSearchDomainScheduledSearch.TimeZone, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetTimeZone() string {
	return v.ScheduledSearchDetails.TimeZone
}

// GetSchedule returns GetScheduledSearchByIDSearchDomainScheduledSearch.Schedule, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetSchedule() string {
	return v.ScheduledSearchDetails.Schedule
}

// GetBackfillLimit returns GetScheduledSearchByIDSearchDomainScheduledSearch.BackfillLimit, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetBackfillLimit() int {
	return v.ScheduledSearchDetails.BackfillLimit
}

// GetEnabled returns GetScheduledSearchByIDSearchDomainScheduledSearch.Enabled, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetEnabled() bool {
	return v.ScheduledSearchDetails.Enabled
}

// GetLabels returns GetScheduledSearchByIDSearchDomainScheduledSearch.Labels, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetLabels() []string {
	return v.ScheduledSearchDetails.Labels
}

// GetActionsV2 returns GetScheduledSearchByIDSearchDomainScheduledSearch.ActionsV2, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetActionsV2() []SharedActionNameType {
	return v.ScheduledSearchDetails.ActionsV2
}

// GetQueryOwnership returns GetScheduledSearchByIDSearchDomainScheduledSearch.QueryOwnership, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) GetQueryOwnership() SharedQueryOwnershipType {
	return v.ScheduledSearchDetails.QueryOwnership
}

func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetScheduledSearchByIDSearchDomainScheduledSearch
		graphql.NoUnmarshalJSON
	}
	firstPass.GetScheduledSearchByIDSearchDomainScheduledSearch = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ScheduledSearchDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetScheduledSearchByIDSearchDomainScheduledSearch struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	Start string `json:"start"`

	End string `json:"end"`

	TimeZone string `json:"timeZone"`

	Schedule string `json:"schedule"`

	BackfillLimit int `json:"backfillLimit"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetScheduledSearchByIDSearchDomainScheduledSearch) __premarshalJSON() (*__premarshalGetScheduledSearchByIDSearchDomainScheduledSearch, error) {
	var retval __premarshalGetScheduledSearchByIDSearchDomainScheduledSearch

	retval.Id = v.ScheduledSearchDetails.Id
	retval.Name = v.ScheduledSearchDetails.Name
	retval.Description = v.ScheduledSearchDetails.Description
	retval.QueryString = v.ScheduledSearchDetails.QueryString
	retval.Start = v.ScheduledSearchDetails.Start
	retval.End = v.ScheduledSearchDetails.End
	retval.TimeZone = v.ScheduledSearchDetails.TimeZone
	retval.Schedule = v.ScheduledSearchDetails.Schedule
	retval.BackfillLimit = v.ScheduledSearchDetails.BackfillLimit
	retval.Enabled = v.ScheduledSearchDetails.Enabled
	retval.Labels = v.ScheduledSearchDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.ScheduledSearchDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetScheduledSearchByIDSearchDomainScheduledSearch.ScheduledSearchDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.ScheduledSearchDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetScheduledSearchByIDSearchDomainScheduledSearch.ScheduledSearchDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// GetScheduledSearchByIDSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type GetScheduledSearchByIDSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	ScheduledSearch GetScheduledSearchByIDSearchDomainScheduledSearch `json:"scheduledSearch"`
}

// GetTypename returns GetScheduledSearchByIDSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainView) GetTypename() *string { return v.Typename }

// GetScheduledSearch returns GetScheduledSearchByIDSearchDomainView.ScheduledSearch, and is useful for accessing the field via an interface.
func (v *GetScheduledSearchByIDSearchDomainView) GetScheduledSearch() GetScheduledSearchByIDSearchDomainScheduledSearch {
	return v.ScheduledSearch
}

// GetSearchDomainResponse is returned by GetSearchDomain on success.
type GetSearchDomainResponse struct {
	// Stability: Long-term
	SearchDomain GetSearchDomainSearchDomain `json:"-"`
}

// GetSearchDomain returns GetSearchDomainResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *GetSearchDomainResponse) GetSearchDomain() GetSearchDomainSearchDomain {
	return v.SearchDomain
}

func (v *GetSearchDomainResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSearchDomainResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSearchDomainResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetSearchDomainSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetSearchDomainResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetSearchDomainResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *GetSearchDomainResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSearchDomainResponse) __premarshalJSON() (*__premarshalGetSearchDomainResponse, error) {
	var retval __premarshalGetSearchDomainResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalGetSearchDomainSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetSearchDomainResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// GetSearchDomainSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// GetSearchDomainSearchDomain is implemented by the following types:
// GetSearchDomainSearchDomainRepository
// GetSearchDomainSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type GetSearchDomainSearchDomain interface {
	implementsGraphQLInterfaceGetSearchDomainSearchDomain()
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetName() string
	// GetDescription returns the interface-field "description" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetDescription() *string
	// GetAutomaticSearch returns the interface-field "automaticSearch" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAutomaticSearch() bool
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetSearchDomainSearchDomainRepository) implementsGraphQLInterfaceGetSearchDomainSearchDomain() {
}
func (v *GetSearchDomainSearchDomainView) implementsGraphQLInterfaceGetSearchDomainSearchDomain() {}

func __unmarshalGetSearchDomainSearchDomain(b []byte, v *GetSearchDomainSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(GetSearchDomainSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(GetSearchDomainSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetSearchDomainSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalGetSearchDomainSearchDomain(v *GetSearchDomainSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetSearchDomainSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*GetSearchDomainSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *GetSearchDomainSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*GetSearchDomainSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetSearchDomainSearchDomain: "%T"`, v)
	}
}

// GetSearchDomainSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetSearchDomainSearchDomainRepository struct {
	// Common interface for Repositories and Views.
	Id string `json:"id"`
	// Common interface for Repositories and Views.
	Name string `json:"name"`
	// Common interface for Repositories and Views.
	Description *string `json:"description"`
	// Common interface for Repositories and Views.
	AutomaticSearch bool    `json:"automaticSearch"`
	Typename        *string `json:"__typename"`
}

// GetId returns GetSearchDomainSearchDomainRepository.Id, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainRepository) GetId() string { return v.Id }

// GetName returns GetSearchDomainSearchDomainRepository.Name, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainRepository) GetName() string { return v.Name }

// GetDescription returns GetSearchDomainSearchDomainRepository.Description, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainRepository) GetDescription() *string { return v.Description }

// GetAutomaticSearch returns GetSearchDomainSearchDomainRepository.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainRepository) GetAutomaticSearch() bool { return v.AutomaticSearch }

// GetTypename returns GetSearchDomainSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetSearchDomainSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type GetSearchDomainSearchDomainView struct {
	// Common interface for Repositories and Views.
	Id string `json:"id"`
	// Common interface for Repositories and Views.
	Name string `json:"name"`
	// Common interface for Repositories and Views.
	Description *string `json:"description"`
	// Common interface for Repositories and Views.
	AutomaticSearch bool `json:"automaticSearch"`
	// Stability: Long-term
	Connections []GetSearchDomainSearchDomainViewConnectionsViewConnection `json:"connections"`
	Typename    *string                                                    `json:"__typename"`
}

// GetId returns GetSearchDomainSearchDomainView.Id, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetId() string { return v.Id }

// GetName returns GetSearchDomainSearchDomainView.Name, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetName() string { return v.Name }

// GetDescription returns GetSearchDomainSearchDomainView.Description, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetDescription() *string { return v.Description }

// GetAutomaticSearch returns GetSearchDomainSearchDomainView.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetAutomaticSearch() bool { return v.AutomaticSearch }

// GetConnections returns GetSearchDomainSearchDomainView.Connections, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetConnections() []GetSearchDomainSearchDomainViewConnectionsViewConnection {
	return v.Connections
}

// GetTypename returns GetSearchDomainSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainView) GetTypename() *string { return v.Typename }

// GetSearchDomainSearchDomainViewConnectionsViewConnection includes the requested fields of the GraphQL type ViewConnection.
// The GraphQL type's documentation follows.
//
// Represents the connection between a view and an underlying repository.
type GetSearchDomainSearchDomainViewConnectionsViewConnection struct {
	// The underlying repository
	// Stability: Long-term
	Repository GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository `json:"repository"`
	// The filter applied to all results from the repository.
	// Stability: Long-term
	Filter string `json:"filter"`
}

// GetRepository returns GetSearchDomainSearchDomainViewConnectionsViewConnection.Repository, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainViewConnectionsViewConnection) GetRepository() GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository {
	return v.Repository
}

// GetFilter returns GetSearchDomainSearchDomainViewConnectionsViewConnection.Filter, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainViewConnectionsViewConnection) GetFilter() string {
	return v.Filter
}

// GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository struct {
	// Stability: Long-term
	Name string `json:"name"`
}

// GetName returns GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository.Name, and is useful for accessing the field via an interface.
func (v *GetSearchDomainSearchDomainViewConnectionsViewConnectionRepository) GetName() string {
	return v.Name
}

// GetUsernameResponse is returned by GetUsername on success.
type GetUsernameResponse struct {
	// The currently authenticated user's account.
	// Stability: Long-term
	Viewer GetUsernameViewerAccount `json:"viewer"`
}

// GetViewer returns GetUsernameResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetUsernameResponse) GetViewer() GetUsernameViewerAccount { return v.Viewer }

// GetUsernameViewerAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// A user account.
type GetUsernameViewerAccount struct {
	// Stability: Long-term
	Username string `json:"username"`
}

// GetUsername returns GetUsernameViewerAccount.Username, and is useful for accessing the field via an interface.
func (v *GetUsernameViewerAccount) GetUsername() string { return v.Username }

// GetUsersByUsernameResponse is returned by GetUsersByUsername on success.
type GetUsersByUsernameResponse struct {
	// Requires manage cluster permission; Returns all users in the system.
	// Stability: Long-term
	Users []GetUsersByUsernameUsersUser `json:"users"`
}

// GetUsers returns GetUsersByUsernameResponse.Users, and is useful for accessing the field via an interface.
func (v *GetUsersByUsernameResponse) GetUsers() []GetUsersByUsernameUsersUser { return v.Users }

// GetUsersByUsernameUsersUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user profile.
type GetUsersByUsernameUsersUser struct {
	UserDetails `json:"-"`
}

// GetId returns GetUsersByUsernameUsersUser.Id, and is useful for accessing the field via an interface.
func (v *GetUsersByUsernameUsersUser) GetId() string { return v.UserDetails.Id }

// GetUsername returns GetUsersByUsernameUsersUser.Username, and is useful for accessing the field via an interface.
func (v *GetUsersByUsernameUsersUser) GetUsername() string { return v.UserDetails.Username }

// GetIsRoot returns GetUsersByUsernameUsersUser.IsRoot, and is useful for accessing the field via an interface.
func (v *GetUsersByUsernameUsersUser) GetIsRoot() bool { return v.UserDetails.IsRoot }

func (v *GetUsersByUsernameUsersUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUsersByUsernameUsersUser
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUsersByUsernameUsersUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUsersByUsernameUsersUser struct {
	Id string `json:"id"`

	Username string `json:"username"`

	IsRoot bool `json:"isRoot"`
}

func (v *GetUsersByUsernameUsersUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUsersByUsernameUsersUser) __premarshalJSON() (*__premarshalGetUsersByUsernameUsersUser, error) {
	var retval __premarshalGetUsersByUsernameUsersUser

	retval.Id = v.UserDetails.Id
	retval.Username = v.UserDetails.Username
	retval.IsRoot = v.UserDetails.IsRoot
	return &retval, nil
}

// Http(s) Header entry.
type HttpHeaderEntryInput struct {
	// Http(s) Header entry.
	Header string `json:"header"`
	// Http(s) Header entry.
	Value string `json:"value"`
}

// GetHeader returns HttpHeaderEntryInput.Header, and is useful for accessing the field via an interface.
func (v *HttpHeaderEntryInput) GetHeader() string { return v.Header }

// GetValue returns HttpHeaderEntryInput.Value, and is useful for accessing the field via an interface.
func (v *HttpHeaderEntryInput) GetValue() string { return v.Value }

// IngestTokenDetails includes the GraphQL fields of IngestToken requested by the fragment IngestTokenDetails.
// The GraphQL type's documentation follows.
//
// An API ingest token used for sending data to LogScale.
type IngestTokenDetails struct {
	// Stability: Long-term
	Name string `json:"name"`
	// Stability: Long-term
	Token string `json:"token"`
	// Stability: Long-term
	Parser *IngestTokenDetailsParser `json:"parser"`
}

// GetName returns IngestTokenDetails.Name, and is useful for accessing the field via an interface.
func (v *IngestTokenDetails) GetName() string { return v.Name }

// GetToken returns IngestTokenDetails.Token, and is useful for accessing the field via an interface.
func (v *IngestTokenDetails) GetToken() string { return v.Token }

// GetParser returns IngestTokenDetails.Parser, and is useful for accessing the field via an interface.
func (v *IngestTokenDetails) GetParser() *IngestTokenDetailsParser { return v.Parser }

// IngestTokenDetailsParser includes the requested fields of the GraphQL type Parser.
// The GraphQL type's documentation follows.
//
// A configured parser for incoming data.
type IngestTokenDetailsParser struct {
	// Name of the parser.
	// Stability: Long-term
	Name string `json:"name"`
}

// GetName returns IngestTokenDetailsParser.Name, and is useful for accessing the field via an interface.
func (v *IngestTokenDetailsParser) GetName() string { return v.Name }

// The version of the LogScale query language to use.
type LanguageVersionEnum string

const (
	LanguageVersionEnumLegacy      LanguageVersionEnum = "legacy"
	LanguageVersionEnumXdr1        LanguageVersionEnum = "xdr1"
	LanguageVersionEnumXdrdetects1 LanguageVersionEnum = "xdrdetects1"
	LanguageVersionEnumFilteralert LanguageVersionEnum = "filteralert"
	LanguageVersionEnumFederated1  LanguageVersionEnum = "federated1"
)

// ListActionsResponse is returned by ListActions on success.
type ListActionsResponse struct {
	// Stability: Long-term
	SearchDomain ListActionsSearchDomain `json:"-"`
}

// GetSearchDomain returns ListActionsResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *ListActionsResponse) GetSearchDomain() ListActionsSearchDomain { return v.SearchDomain }

func (v *ListActionsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListActionsSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListActionsResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListActionsResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *ListActionsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsResponse) __premarshalJSON() (*__premarshalListActionsResponse, error) {
	var retval __premarshalListActionsResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalListActionsSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListActionsResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// ListActionsSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListActionsSearchDomain is implemented by the following types:
// ListActionsSearchDomainRepository
// ListActionsSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListActionsSearchDomain interface {
	implementsGraphQLInterfaceListActionsSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetActions returns the interface-field "actions" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetActions() []ListActionsSearchDomainActionsAction
}

func (v *ListActionsSearchDomainRepository) implementsGraphQLInterfaceListActionsSearchDomain() {}
func (v *ListActionsSearchDomainView) implementsGraphQLInterfaceListActionsSearchDomain()       {}

func __unmarshalListActionsSearchDomain(b []byte, v *ListActionsSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListActionsSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListActionsSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListActionsSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListActionsSearchDomain(v *ListActionsSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListActionsSearchDomainRepository:
		typename = "Repository"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainRepository
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainView:
		typename = "View"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainView
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListActionsSearchDomain: "%T"`, v)
	}
}

// ListActionsSearchDomainActionsAction includes the requested fields of the GraphQL interface Action.
//
// ListActionsSearchDomainActionsAction is implemented by the following types:
// ListActionsSearchDomainActionsEmailAction
// ListActionsSearchDomainActionsHumioRepoAction
// ListActionsSearchDomainActionsOpsGenieAction
// ListActionsSearchDomainActionsPagerDutyAction
// ListActionsSearchDomainActionsSlackAction
// ListActionsSearchDomainActionsSlackPostMessageAction
// ListActionsSearchDomainActionsUploadFileAction
// ListActionsSearchDomainActionsVictorOpsAction
// ListActionsSearchDomainActionsWebhookAction
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type ListActionsSearchDomainActionsAction interface {
	implementsGraphQLInterfaceListActionsSearchDomainActionsAction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ActionDetails
}

func (v *ListActionsSearchDomainActionsEmailAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsHumioRepoAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsOpsGenieAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsPagerDutyAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsSlackAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsUploadFileAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsVictorOpsAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}
func (v *ListActionsSearchDomainActionsWebhookAction) implementsGraphQLInterfaceListActionsSearchDomainActionsAction() {
}

func __unmarshalListActionsSearchDomainActionsAction(b []byte, v *ListActionsSearchDomainActionsAction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(ListActionsSearchDomainActionsEmailAction)
		return json.Unmarshal(b, *v)
	case "HumioRepoAction":
		*v = new(ListActionsSearchDomainActionsHumioRepoAction)
		return json.Unmarshal(b, *v)
	case "OpsGenieAction":
		*v = new(ListActionsSearchDomainActionsOpsGenieAction)
		return json.Unmarshal(b, *v)
	case "PagerDutyAction":
		*v = new(ListActionsSearchDomainActionsPagerDutyAction)
		return json.Unmarshal(b, *v)
	case "SlackAction":
		*v = new(ListActionsSearchDomainActionsSlackAction)
		return json.Unmarshal(b, *v)
	case "SlackPostMessageAction":
		*v = new(ListActionsSearchDomainActionsSlackPostMessageAction)
		return json.Unmarshal(b, *v)
	case "UploadFileAction":
		*v = new(ListActionsSearchDomainActionsUploadFileAction)
		return json.Unmarshal(b, *v)
	case "VictorOpsAction":
		*v = new(ListActionsSearchDomainActionsVictorOpsAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(ListActionsSearchDomainActionsWebhookAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Action.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListActionsSearchDomainActionsAction: "%v"`, tn.TypeName)
	}
}

func __marshalListActionsSearchDomainActionsAction(v *ListActionsSearchDomainActionsAction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListActionsSearchDomainActionsEmailAction:
		typename = "EmailAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsEmailAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsHumioRepoAction:
		typename = "HumioRepoAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsHumioRepoAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsOpsGenieAction:
		typename = "OpsGenieAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsOpsGenieAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsPagerDutyAction:
		typename = "PagerDutyAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsPagerDutyAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsSlackAction:
		typename = "SlackAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsSlackAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsSlackPostMessageAction:
		typename = "SlackPostMessageAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsSlackPostMessageAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsUploadFileAction:
		typename = "UploadFileAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsUploadFileAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsVictorOpsAction:
		typename = "VictorOpsAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsVictorOpsAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListActionsSearchDomainActionsWebhookAction:
		typename = "WebhookAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListActionsSearchDomainActionsWebhookAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListActionsSearchDomainActionsAction: "%T"`, v)
	}
}

// ListActionsSearchDomainActionsEmailAction includes the requested fields of the GraphQL type EmailAction.
// The GraphQL type's documentation follows.
//
// An email action.
type ListActionsSearchDomainActionsEmailAction struct {
	Typename                 *string `json:"__typename"`
	ActionDetailsEmailAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsEmailAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetId() string {
	return v.ActionDetailsEmailAction.Id
}

// GetName returns ListActionsSearchDomainActionsEmailAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetName() string {
	return v.ActionDetailsEmailAction.Name
}

// GetRecipients returns ListActionsSearchDomainActionsEmailAction.Recipients, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetRecipients() []string {
	return v.ActionDetailsEmailAction.Recipients
}

// GetSubjectTemplate returns ListActionsSearchDomainActionsEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetSubjectTemplate() *string {
	return v.ActionDetailsEmailAction.SubjectTemplate
}

// GetEmailBodyTemplate returns ListActionsSearchDomainActionsEmailAction.EmailBodyTemplate, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetEmailBodyTemplate() *string {
	return v.ActionDetailsEmailAction.EmailBodyTemplate
}

// GetUseProxy returns ListActionsSearchDomainActionsEmailAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsEmailAction) GetUseProxy() bool {
	return v.ActionDetailsEmailAction.UseProxy
}

func (v *ListActionsSearchDomainActionsEmailAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsEmailAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsEmailAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsEmailAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsEmailAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Recipients []string `json:"recipients"`

	SubjectTemplate *string `json:"subjectTemplate"`

	EmailBodyTemplate *string `json:"emailBodyTemplate"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsEmailAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsEmailAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsEmailAction, error) {
	var retval __premarshalListActionsSearchDomainActionsEmailAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsEmailAction.Id
	retval.Name = v.ActionDetailsEmailAction.Name
	retval.Recipients = v.ActionDetailsEmailAction.Recipients
	retval.SubjectTemplate = v.ActionDetailsEmailAction.SubjectTemplate
	retval.EmailBodyTemplate = v.ActionDetailsEmailAction.EmailBodyTemplate
	retval.UseProxy = v.ActionDetailsEmailAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsHumioRepoAction includes the requested fields of the GraphQL type HumioRepoAction.
// The GraphQL type's documentation follows.
//
// A LogScale repository action.
type ListActionsSearchDomainActionsHumioRepoAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsHumioRepoAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsHumioRepoAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsHumioRepoAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsHumioRepoAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsHumioRepoAction) GetId() string {
	return v.ActionDetailsHumioRepoAction.Id
}

// GetName returns ListActionsSearchDomainActionsHumioRepoAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsHumioRepoAction) GetName() string {
	return v.ActionDetailsHumioRepoAction.Name
}

// GetIngestToken returns ListActionsSearchDomainActionsHumioRepoAction.IngestToken, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsHumioRepoAction) GetIngestToken() string {
	return v.ActionDetailsHumioRepoAction.IngestToken
}

func (v *ListActionsSearchDomainActionsHumioRepoAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsHumioRepoAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsHumioRepoAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsHumioRepoAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsHumioRepoAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	IngestToken string `json:"ingestToken"`
}

func (v *ListActionsSearchDomainActionsHumioRepoAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsHumioRepoAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsHumioRepoAction, error) {
	var retval __premarshalListActionsSearchDomainActionsHumioRepoAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsHumioRepoAction.Id
	retval.Name = v.ActionDetailsHumioRepoAction.Name
	retval.IngestToken = v.ActionDetailsHumioRepoAction.IngestToken
	return &retval, nil
}

// ListActionsSearchDomainActionsOpsGenieAction includes the requested fields of the GraphQL type OpsGenieAction.
// The GraphQL type's documentation follows.
//
// An OpsGenie action
type ListActionsSearchDomainActionsOpsGenieAction struct {
	Typename                    *string `json:"__typename"`
	ActionDetailsOpsGenieAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsOpsGenieAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsOpsGenieAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetId() string {
	return v.ActionDetailsOpsGenieAction.Id
}

// GetName returns ListActionsSearchDomainActionsOpsGenieAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetName() string {
	return v.ActionDetailsOpsGenieAction.Name
}

// GetApiUrl returns ListActionsSearchDomainActionsOpsGenieAction.ApiUrl, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetApiUrl() string {
	return v.ActionDetailsOpsGenieAction.ApiUrl
}

// GetGenieKey returns ListActionsSearchDomainActionsOpsGenieAction.GenieKey, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetGenieKey() string {
	return v.ActionDetailsOpsGenieAction.GenieKey
}

// GetUseProxy returns ListActionsSearchDomainActionsOpsGenieAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsOpsGenieAction) GetUseProxy() bool {
	return v.ActionDetailsOpsGenieAction.UseProxy
}

func (v *ListActionsSearchDomainActionsOpsGenieAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsOpsGenieAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsOpsGenieAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsOpsGenieAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsOpsGenieAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	ApiUrl string `json:"apiUrl"`

	GenieKey string `json:"genieKey"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsOpsGenieAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsOpsGenieAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsOpsGenieAction, error) {
	var retval __premarshalListActionsSearchDomainActionsOpsGenieAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsOpsGenieAction.Id
	retval.Name = v.ActionDetailsOpsGenieAction.Name
	retval.ApiUrl = v.ActionDetailsOpsGenieAction.ApiUrl
	retval.GenieKey = v.ActionDetailsOpsGenieAction.GenieKey
	retval.UseProxy = v.ActionDetailsOpsGenieAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsPagerDutyAction includes the requested fields of the GraphQL type PagerDutyAction.
// The GraphQL type's documentation follows.
//
// A PagerDuty action.
type ListActionsSearchDomainActionsPagerDutyAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsPagerDutyAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsPagerDutyAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsPagerDutyAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetId() string {
	return v.ActionDetailsPagerDutyAction.Id
}

// GetName returns ListActionsSearchDomainActionsPagerDutyAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetName() string {
	return v.ActionDetailsPagerDutyAction.Name
}

// GetSeverity returns ListActionsSearchDomainActionsPagerDutyAction.Severity, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetSeverity() string {
	return v.ActionDetailsPagerDutyAction.Severity
}

// GetRoutingKey returns ListActionsSearchDomainActionsPagerDutyAction.RoutingKey, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetRoutingKey() string {
	return v.ActionDetailsPagerDutyAction.RoutingKey
}

// GetUseProxy returns ListActionsSearchDomainActionsPagerDutyAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsPagerDutyAction) GetUseProxy() bool {
	return v.ActionDetailsPagerDutyAction.UseProxy
}

func (v *ListActionsSearchDomainActionsPagerDutyAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsPagerDutyAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsPagerDutyAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsPagerDutyAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsPagerDutyAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Severity string `json:"severity"`

	RoutingKey string `json:"routingKey"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsPagerDutyAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsPagerDutyAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsPagerDutyAction, error) {
	var retval __premarshalListActionsSearchDomainActionsPagerDutyAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsPagerDutyAction.Id
	retval.Name = v.ActionDetailsPagerDutyAction.Name
	retval.Severity = v.ActionDetailsPagerDutyAction.Severity
	retval.RoutingKey = v.ActionDetailsPagerDutyAction.RoutingKey
	retval.UseProxy = v.ActionDetailsPagerDutyAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsSlackAction includes the requested fields of the GraphQL type SlackAction.
// The GraphQL type's documentation follows.
//
// A Slack action
type ListActionsSearchDomainActionsSlackAction struct {
	Typename                 *string `json:"__typename"`
	ActionDetailsSlackAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsSlackAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsSlackAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetId() string {
	return v.ActionDetailsSlackAction.Id
}

// GetName returns ListActionsSearchDomainActionsSlackAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetName() string {
	return v.ActionDetailsSlackAction.Name
}

// GetUrl returns ListActionsSearchDomainActionsSlackAction.Url, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetUrl() string {
	return v.ActionDetailsSlackAction.Url
}

// GetFields returns ListActionsSearchDomainActionsSlackAction.Fields, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetFields() []ActionDetailsFieldsSlackFieldEntry {
	return v.ActionDetailsSlackAction.Fields
}

// GetUseProxy returns ListActionsSearchDomainActionsSlackAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackAction) GetUseProxy() bool {
	return v.ActionDetailsSlackAction.UseProxy
}

func (v *ListActionsSearchDomainActionsSlackAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsSlackAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsSlackAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsSlackAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsSlackAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Url string `json:"url"`

	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsSlackAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsSlackAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsSlackAction, error) {
	var retval __premarshalListActionsSearchDomainActionsSlackAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsSlackAction.Id
	retval.Name = v.ActionDetailsSlackAction.Name
	retval.Url = v.ActionDetailsSlackAction.Url
	retval.Fields = v.ActionDetailsSlackAction.Fields
	retval.UseProxy = v.ActionDetailsSlackAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsSlackPostMessageAction includes the requested fields of the GraphQL type SlackPostMessageAction.
// The GraphQL type's documentation follows.
//
// A slack post-message action.
type ListActionsSearchDomainActionsSlackPostMessageAction struct {
	Typename                            *string `json:"__typename"`
	ActionDetailsSlackPostMessageAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsSlackPostMessageAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetTypename() *string {
	return v.Typename
}

// GetId returns ListActionsSearchDomainActionsSlackPostMessageAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetId() string {
	return v.ActionDetailsSlackPostMessageAction.Id
}

// GetName returns ListActionsSearchDomainActionsSlackPostMessageAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetName() string {
	return v.ActionDetailsSlackPostMessageAction.Name
}

// GetApiToken returns ListActionsSearchDomainActionsSlackPostMessageAction.ApiToken, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetApiToken() string {
	return v.ActionDetailsSlackPostMessageAction.ApiToken
}

// GetChannels returns ListActionsSearchDomainActionsSlackPostMessageAction.Channels, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetChannels() []string {
	return v.ActionDetailsSlackPostMessageAction.Channels
}

// GetFields returns ListActionsSearchDomainActionsSlackPostMessageAction.Fields, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetFields() []ActionDetailsFieldsSlackFieldEntry {
	return v.ActionDetailsSlackPostMessageAction.Fields
}

// GetUseProxy returns ListActionsSearchDomainActionsSlackPostMessageAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsSlackPostMessageAction) GetUseProxy() bool {
	return v.ActionDetailsSlackPostMessageAction.UseProxy
}

func (v *ListActionsSearchDomainActionsSlackPostMessageAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsSlackPostMessageAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsSlackPostMessageAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsSlackPostMessageAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsSlackPostMessageAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	ApiToken string `json:"apiToken"`

	Channels []string `json:"channels"`

	Fields []ActionDetailsFieldsSlackFieldEntry `json:"fields"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsSlackPostMessageAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsSlackPostMessageAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsSlackPostMessageAction, error) {
	var retval __premarshalListActionsSearchDomainActionsSlackPostMessageAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsSlackPostMessageAction.Id
	retval.Name = v.ActionDetailsSlackPostMessageAction.Name
	retval.ApiToken = v.ActionDetailsSlackPostMessageAction.ApiToken
	retval.Channels = v.ActionDetailsSlackPostMessageAction.Channels
	retval.Fields = v.ActionDetailsSlackPostMessageAction.Fields
	retval.UseProxy = v.ActionDetailsSlackPostMessageAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsUploadFileAction includes the requested fields of the GraphQL type UploadFileAction.
// The GraphQL type's documentation follows.
//
// An upload file action.
type ListActionsSearchDomainActionsUploadFileAction struct {
	Typename                      *string `json:"__typename"`
	ActionDetailsUploadFileAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsUploadFileAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsUploadFileAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsUploadFileAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsUploadFileAction) GetId() string {
	return v.ActionDetailsUploadFileAction.Id
}

// GetName returns ListActionsSearchDomainActionsUploadFileAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsUploadFileAction) GetName() string {
	return v.ActionDetailsUploadFileAction.Name
}

func (v *ListActionsSearchDomainActionsUploadFileAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsUploadFileAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsUploadFileAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsUploadFileAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsUploadFileAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *ListActionsSearchDomainActionsUploadFileAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsUploadFileAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsUploadFileAction, error) {
	var retval __premarshalListActionsSearchDomainActionsUploadFileAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsUploadFileAction.Id
	retval.Name = v.ActionDetailsUploadFileAction.Name
	return &retval, nil
}

// ListActionsSearchDomainActionsVictorOpsAction includes the requested fields of the GraphQL type VictorOpsAction.
// The GraphQL type's documentation follows.
//
// A VictorOps action.
type ListActionsSearchDomainActionsVictorOpsAction struct {
	Typename                     *string `json:"__typename"`
	ActionDetailsVictorOpsAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsVictorOpsAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsVictorOpsAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetId() string {
	return v.ActionDetailsVictorOpsAction.Id
}

// GetName returns ListActionsSearchDomainActionsVictorOpsAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetName() string {
	return v.ActionDetailsVictorOpsAction.Name
}

// GetMessageType returns ListActionsSearchDomainActionsVictorOpsAction.MessageType, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetMessageType() string {
	return v.ActionDetailsVictorOpsAction.MessageType
}

// GetNotifyUrl returns ListActionsSearchDomainActionsVictorOpsAction.NotifyUrl, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetNotifyUrl() string {
	return v.ActionDetailsVictorOpsAction.NotifyUrl
}

// GetUseProxy returns ListActionsSearchDomainActionsVictorOpsAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsVictorOpsAction) GetUseProxy() bool {
	return v.ActionDetailsVictorOpsAction.UseProxy
}

func (v *ListActionsSearchDomainActionsVictorOpsAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsVictorOpsAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsVictorOpsAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsVictorOpsAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsVictorOpsAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	MessageType string `json:"messageType"`

	NotifyUrl string `json:"notifyUrl"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsVictorOpsAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsVictorOpsAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsVictorOpsAction, error) {
	var retval __premarshalListActionsSearchDomainActionsVictorOpsAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsVictorOpsAction.Id
	retval.Name = v.ActionDetailsVictorOpsAction.Name
	retval.MessageType = v.ActionDetailsVictorOpsAction.MessageType
	retval.NotifyUrl = v.ActionDetailsVictorOpsAction.NotifyUrl
	retval.UseProxy = v.ActionDetailsVictorOpsAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainActionsWebhookAction includes the requested fields of the GraphQL type WebhookAction.
// The GraphQL type's documentation follows.
//
// A webhook action
type ListActionsSearchDomainActionsWebhookAction struct {
	Typename                   *string `json:"__typename"`
	ActionDetailsWebhookAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainActionsWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetTypename() *string { return v.Typename }

// GetId returns ListActionsSearchDomainActionsWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetId() string {
	return v.ActionDetailsWebhookAction.Id
}

// GetName returns ListActionsSearchDomainActionsWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetName() string {
	return v.ActionDetailsWebhookAction.Name
}

// GetMethod returns ListActionsSearchDomainActionsWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetMethod() string {
	return v.ActionDetailsWebhookAction.Method
}

// GetUrl returns ListActionsSearchDomainActionsWebhookAction.Url, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetUrl() string {
	return v.ActionDetailsWebhookAction.Url
}

// GetHeaders returns ListActionsSearchDomainActionsWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetHeaders() []ActionDetailsHeadersHttpHeaderEntry {
	return v.ActionDetailsWebhookAction.Headers
}

// GetWebhookBodyTemplate returns ListActionsSearchDomainActionsWebhookAction.WebhookBodyTemplate, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetWebhookBodyTemplate() string {
	return v.ActionDetailsWebhookAction.WebhookBodyTemplate
}

// GetIgnoreSSL returns ListActionsSearchDomainActionsWebhookAction.IgnoreSSL, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetIgnoreSSL() bool {
	return v.ActionDetailsWebhookAction.IgnoreSSL
}

// GetUseProxy returns ListActionsSearchDomainActionsWebhookAction.UseProxy, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainActionsWebhookAction) GetUseProxy() bool {
	return v.ActionDetailsWebhookAction.UseProxy
}

func (v *ListActionsSearchDomainActionsWebhookAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainActionsWebhookAction
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainActionsWebhookAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionDetailsWebhookAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListActionsSearchDomainActionsWebhookAction struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Method string `json:"method"`

	Url string `json:"url"`

	Headers []ActionDetailsHeadersHttpHeaderEntry `json:"headers"`

	WebhookBodyTemplate string `json:"WebhookBodyTemplate"`

	IgnoreSSL bool `json:"ignoreSSL"`

	UseProxy bool `json:"useProxy"`
}

func (v *ListActionsSearchDomainActionsWebhookAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainActionsWebhookAction) __premarshalJSON() (*__premarshalListActionsSearchDomainActionsWebhookAction, error) {
	var retval __premarshalListActionsSearchDomainActionsWebhookAction

	retval.Typename = v.Typename
	retval.Id = v.ActionDetailsWebhookAction.Id
	retval.Name = v.ActionDetailsWebhookAction.Name
	retval.Method = v.ActionDetailsWebhookAction.Method
	retval.Url = v.ActionDetailsWebhookAction.Url
	retval.Headers = v.ActionDetailsWebhookAction.Headers
	retval.WebhookBodyTemplate = v.ActionDetailsWebhookAction.WebhookBodyTemplate
	retval.IgnoreSSL = v.ActionDetailsWebhookAction.IgnoreSSL
	retval.UseProxy = v.ActionDetailsWebhookAction.UseProxy
	return &retval, nil
}

// ListActionsSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListActionsSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Actions []ListActionsSearchDomainActionsAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetActions returns ListActionsSearchDomainRepository.Actions, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainRepository) GetActions() []ListActionsSearchDomainActionsAction {
	return v.Actions
}

func (v *ListActionsSearchDomainRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainRepository
		Actions []json.RawMessage `json:"actions"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Actions
		src := firstPass.Actions
		*dst = make(
			[]ListActionsSearchDomainActionsAction,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalListActionsSearchDomainActionsAction(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ListActionsSearchDomainRepository.Actions: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalListActionsSearchDomainRepository struct {
	Typename *string `json:"__typename"`

	Actions []json.RawMessage `json:"actions"`
}

func (v *ListActionsSearchDomainRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainRepository) __premarshalJSON() (*__premarshalListActionsSearchDomainRepository, error) {
	var retval __premarshalListActionsSearchDomainRepository

	retval.Typename = v.Typename
	{

		dst := &retval.Actions
		src := v.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalListActionsSearchDomainActionsAction(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListActionsSearchDomainRepository.Actions: %w", err)
			}
		}
	}
	return &retval, nil
}

// ListActionsSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListActionsSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Actions []ListActionsSearchDomainActionsAction `json:"-"`
}

// GetTypename returns ListActionsSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainView) GetTypename() *string { return v.Typename }

// GetActions returns ListActionsSearchDomainView.Actions, and is useful for accessing the field via an interface.
func (v *ListActionsSearchDomainView) GetActions() []ListActionsSearchDomainActionsAction {
	return v.Actions
}

func (v *ListActionsSearchDomainView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListActionsSearchDomainView
		Actions []json.RawMessage `json:"actions"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListActionsSearchDomainView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Actions
		src := firstPass.Actions
		*dst = make(
			[]ListActionsSearchDomainActionsAction,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalListActionsSearchDomainActionsAction(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ListActionsSearchDomainView.Actions: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalListActionsSearchDomainView struct {
	Typename *string `json:"__typename"`

	Actions []json.RawMessage `json:"actions"`
}

func (v *ListActionsSearchDomainView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListActionsSearchDomainView) __premarshalJSON() (*__premarshalListActionsSearchDomainView, error) {
	var retval __premarshalListActionsSearchDomainView

	retval.Typename = v.Typename
	{

		dst := &retval.Actions
		src := v.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalListActionsSearchDomainActionsAction(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListActionsSearchDomainView.Actions: %w", err)
			}
		}
	}
	return &retval, nil
}

// ListAggregateAlertsResponse is returned by ListAggregateAlerts on success.
type ListAggregateAlertsResponse struct {
	// Stability: Long-term
	SearchDomain ListAggregateAlertsSearchDomain `json:"-"`
}

// GetSearchDomain returns ListAggregateAlertsResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsResponse) GetSearchDomain() ListAggregateAlertsSearchDomain {
	return v.SearchDomain
}

func (v *ListAggregateAlertsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAggregateAlertsResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAggregateAlertsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAggregateAlertsSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAggregateAlertsResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAggregateAlertsResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *ListAggregateAlertsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAggregateAlertsResponse) __premarshalJSON() (*__premarshalListAggregateAlertsResponse, error) {
	var retval __premarshalListAggregateAlertsResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalListAggregateAlertsSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAggregateAlertsResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// ListAggregateAlertsSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListAggregateAlertsSearchDomain is implemented by the following types:
// ListAggregateAlertsSearchDomainRepository
// ListAggregateAlertsSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListAggregateAlertsSearchDomain interface {
	implementsGraphQLInterfaceListAggregateAlertsSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetAggregateAlerts returns the interface-field "aggregateAlerts" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAggregateAlerts() []ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert
}

func (v *ListAggregateAlertsSearchDomainRepository) implementsGraphQLInterfaceListAggregateAlertsSearchDomain() {
}
func (v *ListAggregateAlertsSearchDomainView) implementsGraphQLInterfaceListAggregateAlertsSearchDomain() {
}

func __unmarshalListAggregateAlertsSearchDomain(b []byte, v *ListAggregateAlertsSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListAggregateAlertsSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListAggregateAlertsSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAggregateAlertsSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListAggregateAlertsSearchDomain(v *ListAggregateAlertsSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAggregateAlertsSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAggregateAlertsSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *ListAggregateAlertsSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAggregateAlertsSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAggregateAlertsSearchDomain: "%T"`, v)
	}
}

// ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert includes the requested fields of the GraphQL type AggregateAlert.
// The GraphQL type's documentation follows.
//
// An aggregate alert.
type ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert struct {
	AggregateAlertDetails `json:"-"`
}

// GetId returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Id, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetId() string {
	return v.AggregateAlertDetails.Id
}

// GetName returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Name, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetName() string {
	return v.AggregateAlertDetails.Name
}

// GetDescription returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Description, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetDescription() *string {
	return v.AggregateAlertDetails.Description
}

// GetQueryString returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetQueryString() string {
	return v.AggregateAlertDetails.QueryString
}

// GetSearchIntervalSeconds returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetSearchIntervalSeconds() int64 {
	return v.AggregateAlertDetails.SearchIntervalSeconds
}

// GetThrottleTimeSeconds returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetThrottleTimeSeconds() int64 {
	return v.AggregateAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetThrottleField() *string {
	return v.AggregateAlertDetails.ThrottleField
}

// GetLabels returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Labels, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetLabels() []string {
	return v.AggregateAlertDetails.Labels
}

// GetEnabled returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetEnabled() bool {
	return v.AggregateAlertDetails.Enabled
}

// GetTriggerMode returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.TriggerMode, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetTriggerMode() TriggerMode {
	return v.AggregateAlertDetails.TriggerMode
}

// GetQueryTimestampType returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.QueryTimestampType, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetQueryTimestampType() QueryTimestampType {
	return v.AggregateAlertDetails.QueryTimestampType
}

// GetActions returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.Actions, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetActions() []SharedActionNameType {
	return v.AggregateAlertDetails.Actions
}

// GetQueryOwnership returns ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AggregateAlertDetails.QueryOwnership
}

func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AggregateAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`

	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	TriggerMode TriggerMode `json:"triggerMode"`

	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert) __premarshalJSON() (*__premarshalListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert, error) {
	var retval __premarshalListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert

	retval.Id = v.AggregateAlertDetails.Id
	retval.Name = v.AggregateAlertDetails.Name
	retval.Description = v.AggregateAlertDetails.Description
	retval.QueryString = v.AggregateAlertDetails.QueryString
	retval.SearchIntervalSeconds = v.AggregateAlertDetails.SearchIntervalSeconds
	retval.ThrottleTimeSeconds = v.AggregateAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.AggregateAlertDetails.ThrottleField
	retval.Labels = v.AggregateAlertDetails.Labels
	retval.Enabled = v.AggregateAlertDetails.Enabled
	retval.TriggerMode = v.AggregateAlertDetails.TriggerMode
	retval.QueryTimestampType = v.AggregateAlertDetails.QueryTimestampType
	{

		dst := &retval.Actions
		src := v.AggregateAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.AggregateAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AggregateAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert.AggregateAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// ListAggregateAlertsSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListAggregateAlertsSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	AggregateAlerts []ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert `json:"aggregateAlerts"`
}

// GetTypename returns ListAggregateAlertsSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetAggregateAlerts returns ListAggregateAlertsSearchDomainRepository.AggregateAlerts, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainRepository) GetAggregateAlerts() []ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert {
	return v.AggregateAlerts
}

// ListAggregateAlertsSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListAggregateAlertsSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	AggregateAlerts []ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert `json:"aggregateAlerts"`
}

// GetTypename returns ListAggregateAlertsSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainView) GetTypename() *string { return v.Typename }

// GetAggregateAlerts returns ListAggregateAlertsSearchDomainView.AggregateAlerts, and is useful for accessing the field via an interface.
func (v *ListAggregateAlertsSearchDomainView) GetAggregateAlerts() []ListAggregateAlertsSearchDomainAggregateAlertsAggregateAlert {
	return v.AggregateAlerts
}

// ListAlertsResponse is returned by ListAlerts on success.
type ListAlertsResponse struct {
	// Stability: Long-term
	SearchDomain ListAlertsSearchDomain `json:"-"`
}

// GetSearchDomain returns ListAlertsResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *ListAlertsResponse) GetSearchDomain() ListAlertsSearchDomain { return v.SearchDomain }

func (v *ListAlertsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAlertsResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAlertsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAlertsSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAlertsResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAlertsResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *ListAlertsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAlertsResponse) __premarshalJSON() (*__premarshalListAlertsResponse, error) {
	var retval __premarshalListAlertsResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalListAlertsSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAlertsResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// ListAlertsSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListAlertsSearchDomain is implemented by the following types:
// ListAlertsSearchDomainRepository
// ListAlertsSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListAlertsSearchDomain interface {
	implementsGraphQLInterfaceListAlertsSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetAlerts returns the interface-field "alerts" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAlerts() []ListAlertsSearchDomainAlertsAlert
}

func (v *ListAlertsSearchDomainRepository) implementsGraphQLInterfaceListAlertsSearchDomain() {}
func (v *ListAlertsSearchDomainView) implementsGraphQLInterfaceListAlertsSearchDomain()       {}

func __unmarshalListAlertsSearchDomain(b []byte, v *ListAlertsSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListAlertsSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListAlertsSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAlertsSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListAlertsSearchDomain(v *ListAlertsSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAlertsSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAlertsSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *ListAlertsSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*ListAlertsSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAlertsSearchDomain: "%T"`, v)
	}
}

// ListAlertsSearchDomainAlertsAlert includes the requested fields of the GraphQL type Alert.
// The GraphQL type's documentation follows.
//
// An alert.
type ListAlertsSearchDomainAlertsAlert struct {
	AlertDetails `json:"-"`
}

// GetId returns ListAlertsSearchDomainAlertsAlert.Id, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetId() string { return v.AlertDetails.Id }

// GetName returns ListAlertsSearchDomainAlertsAlert.Name, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetName() string { return v.AlertDetails.Name }

// GetQueryString returns ListAlertsSearchDomainAlertsAlert.QueryString, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetQueryString() string {
	return v.AlertDetails.QueryString
}

// GetQueryStart returns ListAlertsSearchDomainAlertsAlert.QueryStart, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetQueryStart() string { return v.AlertDetails.QueryStart }

// GetThrottleField returns ListAlertsSearchDomainAlertsAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetThrottleField() *string {
	return v.AlertDetails.ThrottleField
}

// GetDescription returns ListAlertsSearchDomainAlertsAlert.Description, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetDescription() *string {
	return v.AlertDetails.Description
}

// GetThrottleTimeMillis returns ListAlertsSearchDomainAlertsAlert.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetThrottleTimeMillis() int64 {
	return v.AlertDetails.ThrottleTimeMillis
}

// GetEnabled returns ListAlertsSearchDomainAlertsAlert.Enabled, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetEnabled() bool { return v.AlertDetails.Enabled }

// GetLabels returns ListAlertsSearchDomainAlertsAlert.Labels, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetLabels() []string { return v.AlertDetails.Labels }

// GetActionsV2 returns ListAlertsSearchDomainAlertsAlert.ActionsV2, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetActionsV2() []SharedActionNameType {
	return v.AlertDetails.ActionsV2
}

// GetQueryOwnership returns ListAlertsSearchDomainAlertsAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainAlertsAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AlertDetails.QueryOwnership
}

func (v *ListAlertsSearchDomainAlertsAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAlertsSearchDomainAlertsAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAlertsSearchDomainAlertsAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAlertsSearchDomainAlertsAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	QueryString string `json:"queryString"`

	QueryStart string `json:"queryStart"`

	ThrottleField *string `json:"throttleField"`

	Description *string `json:"description"`

	ThrottleTimeMillis int64 `json:"throttleTimeMillis"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *ListAlertsSearchDomainAlertsAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAlertsSearchDomainAlertsAlert) __premarshalJSON() (*__premarshalListAlertsSearchDomainAlertsAlert, error) {
	var retval __premarshalListAlertsSearchDomainAlertsAlert

	retval.Id = v.AlertDetails.Id
	retval.Name = v.AlertDetails.Name
	retval.QueryString = v.AlertDetails.QueryString
	retval.QueryStart = v.AlertDetails.QueryStart
	retval.ThrottleField = v.AlertDetails.ThrottleField
	retval.Description = v.AlertDetails.Description
	retval.ThrottleTimeMillis = v.AlertDetails.ThrottleTimeMillis
	retval.Enabled = v.AlertDetails.Enabled
	retval.Labels = v.AlertDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.AlertDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListAlertsSearchDomainAlertsAlert.AlertDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAlertsSearchDomainAlertsAlert.AlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// ListAlertsSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListAlertsSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Alerts []ListAlertsSearchDomainAlertsAlert `json:"alerts"`
}

// GetTypename returns ListAlertsSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetAlerts returns ListAlertsSearchDomainRepository.Alerts, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainRepository) GetAlerts() []ListAlertsSearchDomainAlertsAlert {
	return v.Alerts
}

// ListAlertsSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListAlertsSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Alerts []ListAlertsSearchDomainAlertsAlert `json:"alerts"`
}

// GetTypename returns ListAlertsSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainView) GetTypename() *string { return v.Typename }

// GetAlerts returns ListAlertsSearchDomainView.Alerts, and is useful for accessing the field via an interface.
func (v *ListAlertsSearchDomainView) GetAlerts() []ListAlertsSearchDomainAlertsAlert { return v.Alerts }

// ListFilterAlertsResponse is returned by ListFilterAlerts on success.
type ListFilterAlertsResponse struct {
	// Stability: Long-term
	SearchDomain ListFilterAlertsSearchDomain `json:"-"`
}

// GetSearchDomain returns ListFilterAlertsResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsResponse) GetSearchDomain() ListFilterAlertsSearchDomain {
	return v.SearchDomain
}

func (v *ListFilterAlertsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListFilterAlertsResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListFilterAlertsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListFilterAlertsSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListFilterAlertsResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListFilterAlertsResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *ListFilterAlertsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListFilterAlertsResponse) __premarshalJSON() (*__premarshalListFilterAlertsResponse, error) {
	var retval __premarshalListFilterAlertsResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalListFilterAlertsSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListFilterAlertsResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// ListFilterAlertsSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListFilterAlertsSearchDomain is implemented by the following types:
// ListFilterAlertsSearchDomainRepository
// ListFilterAlertsSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListFilterAlertsSearchDomain interface {
	implementsGraphQLInterfaceListFilterAlertsSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetFilterAlerts returns the interface-field "filterAlerts" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetFilterAlerts() []ListFilterAlertsSearchDomainFilterAlertsFilterAlert
}

func (v *ListFilterAlertsSearchDomainRepository) implementsGraphQLInterfaceListFilterAlertsSearchDomain() {
}
func (v *ListFilterAlertsSearchDomainView) implementsGraphQLInterfaceListFilterAlertsSearchDomain() {}

func __unmarshalListFilterAlertsSearchDomain(b []byte, v *ListFilterAlertsSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListFilterAlertsSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListFilterAlertsSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListFilterAlertsSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListFilterAlertsSearchDomain(v *ListFilterAlertsSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListFilterAlertsSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*ListFilterAlertsSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *ListFilterAlertsSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*ListFilterAlertsSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListFilterAlertsSearchDomain: "%T"`, v)
	}
}

// ListFilterAlertsSearchDomainFilterAlertsFilterAlert includes the requested fields of the GraphQL type FilterAlert.
// The GraphQL type's documentation follows.
//
// A filter alert.
type ListFilterAlertsSearchDomainFilterAlertsFilterAlert struct {
	FilterAlertDetails `json:"-"`
}

// GetId returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Id, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetId() string {
	return v.FilterAlertDetails.Id
}

// GetName returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Name, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetName() string {
	return v.FilterAlertDetails.Name
}

// GetDescription returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Description, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetDescription() *string {
	return v.FilterAlertDetails.Description
}

// GetQueryString returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.QueryString, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetQueryString() string {
	return v.FilterAlertDetails.QueryString
}

// GetThrottleTimeSeconds returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetThrottleTimeSeconds() *int64 {
	return v.FilterAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetThrottleField() *string {
	return v.FilterAlertDetails.ThrottleField
}

// GetLabels returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Labels, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetLabels() []string {
	return v.FilterAlertDetails.Labels
}

// GetEnabled returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Enabled, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetEnabled() bool {
	return v.FilterAlertDetails.Enabled
}

// GetActions returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.Actions, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetActions() []SharedActionNameType {
	return v.FilterAlertDetails.Actions
}

// GetQueryOwnership returns ListFilterAlertsSearchDomainFilterAlertsFilterAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.FilterAlertDetails.QueryOwnership
}

func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListFilterAlertsSearchDomainFilterAlertsFilterAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.ListFilterAlertsSearchDomainFilterAlertsFilterAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListFilterAlertsSearchDomainFilterAlertsFilterAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListFilterAlertsSearchDomainFilterAlertsFilterAlert) __premarshalJSON() (*__premarshalListFilterAlertsSearchDomainFilterAlertsFilterAlert, error) {
	var retval __premarshalListFilterAlertsSearchDomainFilterAlertsFilterAlert

	retval.Id = v.FilterAlertDetails.Id
	retval.Name = v.FilterAlertDetails.Name
	retval.Description = v.FilterAlertDetails.Description
	retval.QueryString = v.FilterAlertDetails.QueryString
	retval.ThrottleTimeSeconds = v.FilterAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.FilterAlertDetails.ThrottleField
	retval.Labels = v.FilterAlertDetails.Labels
	retval.Enabled = v.FilterAlertDetails.Enabled
	{

		dst := &retval.Actions
		src := v.FilterAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListFilterAlertsSearchDomainFilterAlertsFilterAlert.FilterAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.FilterAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListFilterAlertsSearchDomainFilterAlertsFilterAlert.FilterAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// ListFilterAlertsSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListFilterAlertsSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	FilterAlerts []ListFilterAlertsSearchDomainFilterAlertsFilterAlert `json:"filterAlerts"`
}

// GetTypename returns ListFilterAlertsSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetFilterAlerts returns ListFilterAlertsSearchDomainRepository.FilterAlerts, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainRepository) GetFilterAlerts() []ListFilterAlertsSearchDomainFilterAlertsFilterAlert {
	return v.FilterAlerts
}

// ListFilterAlertsSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListFilterAlertsSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	FilterAlerts []ListFilterAlertsSearchDomainFilterAlertsFilterAlert `json:"filterAlerts"`
}

// GetTypename returns ListFilterAlertsSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainView) GetTypename() *string { return v.Typename }

// GetFilterAlerts returns ListFilterAlertsSearchDomainView.FilterAlerts, and is useful for accessing the field via an interface.
func (v *ListFilterAlertsSearchDomainView) GetFilterAlerts() []ListFilterAlertsSearchDomainFilterAlertsFilterAlert {
	return v.FilterAlerts
}

// ListIngestTokensRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListIngestTokensRepository struct {
	// Stability: Long-term
	IngestTokens []ListIngestTokensRepositoryIngestTokensIngestToken `json:"ingestTokens"`
}

// GetIngestTokens returns ListIngestTokensRepository.IngestTokens, and is useful for accessing the field via an interface.
func (v *ListIngestTokensRepository) GetIngestTokens() []ListIngestTokensRepositoryIngestTokensIngestToken {
	return v.IngestTokens
}

// ListIngestTokensRepositoryIngestTokensIngestToken includes the requested fields of the GraphQL type IngestToken.
// The GraphQL type's documentation follows.
//
// An API ingest token used for sending data to LogScale.
type ListIngestTokensRepositoryIngestTokensIngestToken struct {
	IngestTokenDetails `json:"-"`
}

// GetName returns ListIngestTokensRepositoryIngestTokensIngestToken.Name, and is useful for accessing the field via an interface.
func (v *ListIngestTokensRepositoryIngestTokensIngestToken) GetName() string {
	return v.IngestTokenDetails.Name
}

// GetToken returns ListIngestTokensRepositoryIngestTokensIngestToken.Token, and is useful for accessing the field via an interface.
func (v *ListIngestTokensRepositoryIngestTokensIngestToken) GetToken() string {
	return v.IngestTokenDetails.Token
}

// GetParser returns ListIngestTokensRepositoryIngestTokensIngestToken.Parser, and is useful for accessing the field via an interface.
func (v *ListIngestTokensRepositoryIngestTokensIngestToken) GetParser() *IngestTokenDetailsParser {
	return v.IngestTokenDetails.Parser
}

func (v *ListIngestTokensRepositoryIngestTokensIngestToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIngestTokensRepositoryIngestTokensIngestToken
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIngestTokensRepositoryIngestTokensIngestToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IngestTokenDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListIngestTokensRepositoryIngestTokensIngestToken struct {
	Name string `json:"name"`

	Token string `json:"token"`

	Parser *IngestTokenDetailsParser `json:"parser"`
}

func (v *ListIngestTokensRepositoryIngestTokensIngestToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIngestTokensRepositoryIngestTokensIngestToken) __premarshalJSON() (*__premarshalListIngestTokensRepositoryIngestTokensIngestToken, error) {
	var retval __premarshalListIngestTokensRepositoryIngestTokensIngestToken

	retval.Name = v.IngestTokenDetails.Name
	retval.Token = v.IngestTokenDetails.Token
	retval.Parser = v.IngestTokenDetails.Parser
	return &retval, nil
}

// ListIngestTokensResponse is returned by ListIngestTokens on success.
type ListIngestTokensResponse struct {
	// Lookup a given repository by name.
	// Stability: Long-term
	Repository ListIngestTokensRepository `json:"repository"`
}

// GetRepository returns ListIngestTokensResponse.Repository, and is useful for accessing the field via an interface.
func (v *ListIngestTokensResponse) GetRepository() ListIngestTokensRepository { return v.Repository }

// ListParsersRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListParsersRepository struct {
	// Saved parsers.
	// Stability: Long-term
	Parsers []ListParsersRepositoryParsersParser `json:"parsers"`
}

// GetParsers returns ListParsersRepository.Parsers, and is useful for accessing the field via an interface.
func (v *ListParsersRepository) GetParsers() []ListParsersRepositoryParsersParser { return v.Parsers }

// ListParsersRepositoryParsersParser includes the requested fields of the GraphQL type Parser.
// The GraphQL type's documentation follows.
//
// A configured parser for incoming data.
type ListParsersRepositoryParsersParser struct {
	// The id of the parser.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the parser.
	// Stability: Long-term
	Name string `json:"name"`
}

// GetId returns ListParsersRepositoryParsersParser.Id, and is useful for accessing the field via an interface.
func (v *ListParsersRepositoryParsersParser) GetId() string { return v.Id }

// GetName returns ListParsersRepositoryParsersParser.Name, and is useful for accessing the field via an interface.
func (v *ListParsersRepositoryParsersParser) GetName() string { return v.Name }

// ListParsersResponse is returned by ListParsers on success.
type ListParsersResponse struct {
	// Lookup a given repository by name.
	// Stability: Long-term
	Repository ListParsersRepository `json:"repository"`
}

// GetRepository returns ListParsersResponse.Repository, and is useful for accessing the field via an interface.
func (v *ListParsersResponse) GetRepository() ListParsersRepository { return v.Repository }

// ListRepositoriesRepositoriesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListRepositoriesRepositoriesRepository struct {
	// Stability: Long-term
	Id string `json:"id"`
	// Stability: Long-term
	Name string `json:"name"`
	// Total size of data. Size is measured as the size after compression.
	// Stability: Long-term
	CompressedByteSize int64 `json:"compressedByteSize"`
}

// GetId returns ListRepositoriesRepositoriesRepository.Id, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepository) GetId() string { return v.Id }

// GetName returns ListRepositoriesRepositoriesRepository.Name, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepository) GetName() string { return v.Name }

// GetCompressedByteSize returns ListRepositoriesRepositoriesRepository.CompressedByteSize, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepository) GetCompressedByteSize() int64 {
	return v.CompressedByteSize
}

// ListRepositoriesResponse is returned by ListRepositories on success.
type ListRepositoriesResponse struct {
	// Stability: Long-term
	Repositories []ListRepositoriesRepositoriesRepository `json:"repositories"`
}

// GetRepositories returns ListRepositoriesResponse.Repositories, and is useful for accessing the field via an interface.
func (v *ListRepositoriesResponse) GetRepositories() []ListRepositoriesRepositoriesRepository {
	return v.Repositories
}

// ListScheduledSearchesResponse is returned by ListScheduledSearches on success.
type ListScheduledSearchesResponse struct {
	// Stability: Long-term
	SearchDomain ListScheduledSearchesSearchDomain `json:"-"`
}

// GetSearchDomain returns ListScheduledSearchesResponse.SearchDomain, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesResponse) GetSearchDomain() ListScheduledSearchesSearchDomain {
	return v.SearchDomain
}

func (v *ListScheduledSearchesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListScheduledSearchesResponse
		SearchDomain json.RawMessage `json:"searchDomain"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListScheduledSearchesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomain
		src := firstPass.SearchDomain
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListScheduledSearchesSearchDomain(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListScheduledSearchesResponse.SearchDomain: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListScheduledSearchesResponse struct {
	SearchDomain json.RawMessage `json:"searchDomain"`
}

func (v *ListScheduledSearchesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListScheduledSearchesResponse) __premarshalJSON() (*__premarshalListScheduledSearchesResponse, error) {
	var retval __premarshalListScheduledSearchesResponse

	{

		dst := &retval.SearchDomain
		src := v.SearchDomain
		var err error
		*dst, err = __marshalListScheduledSearchesSearchDomain(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListScheduledSearchesResponse.SearchDomain: %w", err)
		}
	}
	return &retval, nil
}

// ListScheduledSearchesSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListScheduledSearchesSearchDomain is implemented by the following types:
// ListScheduledSearchesSearchDomainRepository
// ListScheduledSearchesSearchDomainView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListScheduledSearchesSearchDomain interface {
	implementsGraphQLInterfaceListScheduledSearchesSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetScheduledSearches returns the interface-field "scheduledSearches" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetScheduledSearches() []ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch
}

func (v *ListScheduledSearchesSearchDomainRepository) implementsGraphQLInterfaceListScheduledSearchesSearchDomain() {
}
func (v *ListScheduledSearchesSearchDomainView) implementsGraphQLInterfaceListScheduledSearchesSearchDomain() {
}

func __unmarshalListScheduledSearchesSearchDomain(b []byte, v *ListScheduledSearchesSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListScheduledSearchesSearchDomainRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListScheduledSearchesSearchDomainView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListScheduledSearchesSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListScheduledSearchesSearchDomain(v *ListScheduledSearchesSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListScheduledSearchesSearchDomainRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*ListScheduledSearchesSearchDomainRepository
		}{typename, v}
		return json.Marshal(result)
	case *ListScheduledSearchesSearchDomainView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*ListScheduledSearchesSearchDomainView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListScheduledSearchesSearchDomain: "%T"`, v)
	}
}

// ListScheduledSearchesSearchDomainRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListScheduledSearchesSearchDomainRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	ScheduledSearches []ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch `json:"scheduledSearches"`
}

// GetTypename returns ListScheduledSearchesSearchDomainRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainRepository) GetTypename() *string { return v.Typename }

// GetScheduledSearches returns ListScheduledSearchesSearchDomainRepository.ScheduledSearches, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainRepository) GetScheduledSearches() []ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch {
	return v.ScheduledSearches
}

// ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch includes the requested fields of the GraphQL type ScheduledSearch.
// The GraphQL type's documentation follows.
//
// Information about a scheduled search
type ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch struct {
	ScheduledSearchDetails `json:"-"`
}

// GetId returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Id, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetId() string {
	return v.ScheduledSearchDetails.Id
}

// GetName returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Name, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetName() string {
	return v.ScheduledSearchDetails.Name
}

// GetDescription returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Description, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetDescription() *string {
	return v.ScheduledSearchDetails.Description
}

// GetQueryString returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.QueryString, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetQueryString() string {
	return v.ScheduledSearchDetails.QueryString
}

// GetStart returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Start, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetStart() string {
	return v.ScheduledSearchDetails.Start
}

// GetEnd returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.End, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetEnd() string {
	return v.ScheduledSearchDetails.End
}

// GetTimeZone returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.TimeZone, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetTimeZone() string {
	return v.ScheduledSearchDetails.TimeZone
}

// GetSchedule returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Schedule, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetSchedule() string {
	return v.ScheduledSearchDetails.Schedule
}

// GetBackfillLimit returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.BackfillLimit, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetBackfillLimit() int {
	return v.ScheduledSearchDetails.BackfillLimit
}

// GetEnabled returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Enabled, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetEnabled() bool {
	return v.ScheduledSearchDetails.Enabled
}

// GetLabels returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.Labels, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetLabels() []string {
	return v.ScheduledSearchDetails.Labels
}

// GetActionsV2 returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.ActionsV2, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetActionsV2() []SharedActionNameType {
	return v.ScheduledSearchDetails.ActionsV2
}

// GetQueryOwnership returns ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.QueryOwnership, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) GetQueryOwnership() SharedQueryOwnershipType {
	return v.ScheduledSearchDetails.QueryOwnership
}

func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch
		graphql.NoUnmarshalJSON
	}
	firstPass.ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ScheduledSearchDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	Start string `json:"start"`

	End string `json:"end"`

	TimeZone string `json:"timeZone"`

	Schedule string `json:"schedule"`

	BackfillLimit int `json:"backfillLimit"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch) __premarshalJSON() (*__premarshalListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch, error) {
	var retval __premarshalListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch

	retval.Id = v.ScheduledSearchDetails.Id
	retval.Name = v.ScheduledSearchDetails.Name
	retval.Description = v.ScheduledSearchDetails.Description
	retval.QueryString = v.ScheduledSearchDetails.QueryString
	retval.Start = v.ScheduledSearchDetails.Start
	retval.End = v.ScheduledSearchDetails.End
	retval.TimeZone = v.ScheduledSearchDetails.TimeZone
	retval.Schedule = v.ScheduledSearchDetails.Schedule
	retval.BackfillLimit = v.ScheduledSearchDetails.BackfillLimit
	retval.Enabled = v.ScheduledSearchDetails.Enabled
	retval.Labels = v.ScheduledSearchDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.ScheduledSearchDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.ScheduledSearchDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.ScheduledSearchDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch.ScheduledSearchDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// ListScheduledSearchesSearchDomainView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListScheduledSearchesSearchDomainView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	ScheduledSearches []ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch `json:"scheduledSearches"`
}

// GetTypename returns ListScheduledSearchesSearchDomainView.Typename, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainView) GetTypename() *string { return v.Typename }

// GetScheduledSearches returns ListScheduledSearchesSearchDomainView.ScheduledSearches, and is useful for accessing the field via an interface.
func (v *ListScheduledSearchesSearchDomainView) GetScheduledSearches() []ListScheduledSearchesSearchDomainScheduledSearchesScheduledSearch {
	return v.ScheduledSearches
}

// ListSearchDomainsResponse is returned by ListSearchDomains on success.
type ListSearchDomainsResponse struct {
	// Stability: Long-term
	SearchDomains []ListSearchDomainsSearchDomainsSearchDomain `json:"-"`
}

// GetSearchDomains returns ListSearchDomainsResponse.SearchDomains, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsResponse) GetSearchDomains() []ListSearchDomainsSearchDomainsSearchDomain {
	return v.SearchDomains
}

func (v *ListSearchDomainsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListSearchDomainsResponse
		SearchDomains []json.RawMessage `json:"searchDomains"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListSearchDomainsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SearchDomains
		src := firstPass.SearchDomains
		*dst = make(
			[]ListSearchDomainsSearchDomainsSearchDomain,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalListSearchDomainsSearchDomainsSearchDomain(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ListSearchDomainsResponse.SearchDomains: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalListSearchDomainsResponse struct {
	SearchDomains []json.RawMessage `json:"searchDomains"`
}

func (v *ListSearchDomainsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListSearchDomainsResponse) __premarshalJSON() (*__premarshalListSearchDomainsResponse, error) {
	var retval __premarshalListSearchDomainsResponse

	{

		dst := &retval.SearchDomains
		src := v.SearchDomains
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalListSearchDomainsSearchDomainsSearchDomain(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ListSearchDomainsResponse.SearchDomains: %w", err)
			}
		}
	}
	return &retval, nil
}

// ListSearchDomainsSearchDomainsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type ListSearchDomainsSearchDomainsRepository struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Name string `json:"name"`
	// Common interface for Repositories and Views.
	AutomaticSearch bool `json:"automaticSearch"`
}

// GetTypename returns ListSearchDomainsSearchDomainsRepository.Typename, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsRepository) GetTypename() *string { return v.Typename }

// GetName returns ListSearchDomainsSearchDomainsRepository.Name, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsRepository) GetName() string { return v.Name }

// GetAutomaticSearch returns ListSearchDomainsSearchDomainsRepository.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsRepository) GetAutomaticSearch() bool {
	return v.AutomaticSearch
}

// ListSearchDomainsSearchDomainsSearchDomain includes the requested fields of the GraphQL interface SearchDomain.
//
// ListSearchDomainsSearchDomainsSearchDomain is implemented by the following types:
// ListSearchDomainsSearchDomainsRepository
// ListSearchDomainsSearchDomainsView
// The GraphQL type's documentation follows.
//
// Common interface for Repositories and Views.
type ListSearchDomainsSearchDomainsSearchDomain interface {
	implementsGraphQLInterfaceListSearchDomainsSearchDomainsSearchDomain()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetName() string
	// GetAutomaticSearch returns the interface-field "automaticSearch" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Common interface for Repositories and Views.
	GetAutomaticSearch() bool
}

func (v *ListSearchDomainsSearchDomainsRepository) implementsGraphQLInterfaceListSearchDomainsSearchDomainsSearchDomain() {
}
func (v *ListSearchDomainsSearchDomainsView) implementsGraphQLInterfaceListSearchDomainsSearchDomainsSearchDomain() {
}

func __unmarshalListSearchDomainsSearchDomainsSearchDomain(b []byte, v *ListSearchDomainsSearchDomainsSearchDomain) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Repository":
		*v = new(ListSearchDomainsSearchDomainsRepository)
		return json.Unmarshal(b, *v)
	case "View":
		*v = new(ListSearchDomainsSearchDomainsView)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchDomain.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListSearchDomainsSearchDomainsSearchDomain: "%v"`, tn.TypeName)
	}
}

func __marshalListSearchDomainsSearchDomainsSearchDomain(v *ListSearchDomainsSearchDomainsSearchDomain) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListSearchDomainsSearchDomainsRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*ListSearchDomainsSearchDomainsRepository
		}{typename, v}
		return json.Marshal(result)
	case *ListSearchDomainsSearchDomainsView:
		typename = "View"

		result := struct {
			TypeName string `json:"__typename"`
			*ListSearchDomainsSearchDomainsView
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListSearchDomainsSearchDomainsSearchDomain: "%T"`, v)
	}
}

// ListSearchDomainsSearchDomainsView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type ListSearchDomainsSearchDomainsView struct {
	Typename *string `json:"__typename"`
	// Common interface for Repositories and Views.
	Name string `json:"name"`
	// Common interface for Repositories and Views.
	AutomaticSearch bool `json:"automaticSearch"`
}

// GetTypename returns ListSearchDomainsSearchDomainsView.Typename, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsView) GetTypename() *string { return v.Typename }

// GetName returns ListSearchDomainsSearchDomainsView.Name, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsView) GetName() string { return v.Name }

// GetAutomaticSearch returns ListSearchDomainsSearchDomainsView.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *ListSearchDomainsSearchDomainsView) GetAutomaticSearch() bool { return v.AutomaticSearch }

// ParserDetails includes the GraphQL fields of Parser requested by the fragment ParserDetails.
// The GraphQL type's documentation follows.
//
// A configured parser for incoming data.
type ParserDetails struct {
	// The id of the parser.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the parser.
	// Stability: Long-term
	Name string `json:"name"`
	// The parser script that is executed for every incoming event.
	// Stability: Long-term
	Script string `json:"script"`
	// Fields that are used as tags.
	// Stability: Long-term
	FieldsToTag []string `json:"fieldsToTag"`
	// Test cases that can be used to help verify that the parser works as expected.
	// Stability: Long-term
	TestCases []ParserDetailsTestCasesParserTestCase `json:"testCases"`
}

// GetId returns ParserDetails.Id, and is useful for accessing the field via an interface.
func (v *ParserDetails) GetId() string { return v.Id }

// GetName returns ParserDetails.Name, and is useful for accessing the field via an interface.
func (v *ParserDetails) GetName() string { return v.Name }

// GetScript returns ParserDetails.Script, and is useful for accessing the field via an interface.
func (v *ParserDetails) GetScript() string { return v.Script }

// GetFieldsToTag returns ParserDetails.FieldsToTag, and is useful for accessing the field via an interface.
func (v *ParserDetails) GetFieldsToTag() []string { return v.FieldsToTag }

// GetTestCases returns ParserDetails.TestCases, and is useful for accessing the field via an interface.
func (v *ParserDetails) GetTestCases() []ParserDetailsTestCasesParserTestCase { return v.TestCases }

// ParserDetailsTestCasesParserTestCase includes the requested fields of the GraphQL type ParserTestCase.
// The GraphQL type's documentation follows.
//
// A test case for a parser.
type ParserDetailsTestCasesParserTestCase struct {
	// The event to parse and test on.
	// Stability: Long-term
	Event ParserDetailsTestCasesParserTestCaseEventParserTestEvent `json:"event"`
	// Assertions on the shape of the test case output events. The list consists of key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the assertions are the value.
	// Stability: Long-term
	OutputAssertions []ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput `json:"outputAssertions"`
}

// GetEvent returns ParserDetailsTestCasesParserTestCase.Event, and is useful for accessing the field via an interface.
func (v *ParserDetailsTestCasesParserTestCase) GetEvent() ParserDetailsTestCasesParserTestCaseEventParserTestEvent {
	return v.Event
}

// GetOutputAssertions returns ParserDetailsTestCasesParserTestCase.OutputAssertions, and is useful for accessing the field via an interface.
func (v *ParserDetailsTestCasesParserTestCase) GetOutputAssertions() []ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput {
	return v.OutputAssertions
}

// ParserDetailsTestCasesParserTestCaseEventParserTestEvent includes the requested fields of the GraphQL type ParserTestEvent.
// The GraphQL type's documentation follows.
//
// An event for a parser to parse during testing.
type ParserDetailsTestCasesParserTestCaseEventParserTestEvent struct {
	// The contents of the `@rawstring` field when the event begins parsing.
	// Stability: Long-term
	RawString string `json:"rawString"`
}

// GetRawString returns ParserDetailsTestCasesParserTestCaseEventParserTestEvent.RawString, and is useful for accessing the field via an interface.
func (v *ParserDetailsTestCasesParserTestCaseEventParserTestEvent) GetRawString() string {
	return v.RawString
}

// ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput includes the requested fields of the GraphQL type ParserTestCaseAssertionsForOutput.
// The GraphQL type's documentation follows.
//
// Assertions on the shape of the given output event. It is a key-value pair, where the index of the output event is the key, and the assertions are the value.
type ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput.Typename, and is useful for accessing the field via an interface.
func (v *ParserDetailsTestCasesParserTestCaseOutputAssertionsParserTestCaseAssertionsForOutput) GetTypename() *string {
	return v.Typename
}

// Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
type ParserTestCaseAssertionsForOutputInput struct {
	// Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
	OutputEventIndex int `json:"outputEventIndex"`
	// Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
	Assertions ParserTestCaseOutputAssertionsInput `json:"assertions"`
}

// GetOutputEventIndex returns ParserTestCaseAssertionsForOutputInput.OutputEventIndex, and is useful for accessing the field via an interface.
func (v *ParserTestCaseAssertionsForOutputInput) GetOutputEventIndex() int { return v.OutputEventIndex }

// GetAssertions returns ParserTestCaseAssertionsForOutputInput.Assertions, and is useful for accessing the field via an interface.
func (v *ParserTestCaseAssertionsForOutputInput) GetAssertions() ParserTestCaseOutputAssertionsInput {
	return v.Assertions
}

// A test case for a parser.
type ParserTestCaseInput struct {
	// A test case for a parser.
	Event ParserTestEventInput `json:"event"`
	// A test case for a parser.
	OutputAssertions []ParserTestCaseAssertionsForOutputInput `json:"outputAssertions"`
}

// GetEvent returns ParserTestCaseInput.Event, and is useful for accessing the field via an interface.
func (v *ParserTestCaseInput) GetEvent() ParserTestEventInput { return v.Event }

// GetOutputAssertions returns ParserTestCaseInput.OutputAssertions, and is useful for accessing the field via an interface.
func (v *ParserTestCaseInput) GetOutputAssertions() []ParserTestCaseAssertionsForOutputInput {
	return v.OutputAssertions
}

// Assertions on the shape of a given test case output event.
type ParserTestCaseOutputAssertionsInput struct {
	// Assertions on the shape of a given test case output event.
	FieldsNotPresent []string `json:"fieldsNotPresent"`
	// Assertions on the shape of a given test case output event.
	FieldsHaveValues []FieldHasValueInput `json:"fieldsHaveValues"`
}

// GetFieldsNotPresent returns ParserTestCaseOutputAssertionsInput.FieldsNotPresent, and is useful for accessing the field via an interface.
func (v *ParserTestCaseOutputAssertionsInput) GetFieldsNotPresent() []string {
	return v.FieldsNotPresent
}

// GetFieldsHaveValues returns ParserTestCaseOutputAssertionsInput.FieldsHaveValues, and is useful for accessing the field via an interface.
func (v *ParserTestCaseOutputAssertionsInput) GetFieldsHaveValues() []FieldHasValueInput {
	return v.FieldsHaveValues
}

// An event for a parser to parse during testing.
type ParserTestEventInput struct {
	// An event for a parser to parse during testing.
	RawString string `json:"rawString"`
}

// GetRawString returns ParserTestEventInput.RawString, and is useful for accessing the field via an interface.
func (v *ParserTestEventInput) GetRawString() string { return v.RawString }

// QueryOwnership includes the GraphQL fields of QueryOwnership requested by the fragment QueryOwnership.
// The GraphQL type's documentation follows.
//
// # Query ownership
//
// QueryOwnership is implemented by the following types:
// QueryOwnershipOrganizationOwnership
// QueryOwnershipUserOwnership
type QueryOwnership interface {
	implementsGraphQLInterfaceQueryOwnership()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *QueryOwnershipOrganizationOwnership) implementsGraphQLInterfaceQueryOwnership() {}
func (v *QueryOwnershipUserOwnership) implementsGraphQLInterfaceQueryOwnership()         {}

func __unmarshalQueryOwnership(b []byte, v *QueryOwnership) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OrganizationOwnership":
		*v = new(QueryOwnershipOrganizationOwnership)
		return json.Unmarshal(b, *v)
	case "UserOwnership":
		*v = new(QueryOwnershipUserOwnership)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing QueryOwnership.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for QueryOwnership: "%v"`, tn.TypeName)
	}
}

func __marshalQueryOwnership(v *QueryOwnership) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *QueryOwnershipOrganizationOwnership:
		typename = "OrganizationOwnership"

		result := struct {
			TypeName string `json:"__typename"`
			*QueryOwnershipOrganizationOwnership
		}{typename, v}
		return json.Marshal(result)
	case *QueryOwnershipUserOwnership:
		typename = "UserOwnership"

		result := struct {
			TypeName string `json:"__typename"`
			*QueryOwnershipUserOwnership
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for QueryOwnership: "%T"`, v)
	}
}

// QueryOwnership includes the GraphQL fields of OrganizationOwnership requested by the fragment QueryOwnership.
// The GraphQL type's documentation follows.
//
// Query ownership
type QueryOwnershipOrganizationOwnership struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns QueryOwnershipOrganizationOwnership.Typename, and is useful for accessing the field via an interface.
func (v *QueryOwnershipOrganizationOwnership) GetTypename() *string { return v.Typename }

// The type of query ownership
type QueryOwnershipType string

const (
	// Queries run on behalf of user
	QueryOwnershipTypeUser QueryOwnershipType = "User"
	// Queries run on behalf of the organization
	QueryOwnershipTypeOrganization QueryOwnershipType = "Organization"
)

// QueryOwnership includes the GraphQL fields of UserOwnership requested by the fragment QueryOwnership.
// The GraphQL type's documentation follows.
//
// Query ownership
type QueryOwnershipUserOwnership struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns QueryOwnershipUserOwnership.Typename, and is useful for accessing the field via an interface.
func (v *QueryOwnershipUserOwnership) GetTypename() *string { return v.Typename }

// Timestamp type to use for a query.
type QueryTimestampType string

const (
	// Use @timestamp for the query.
	QueryTimestampTypeEventtimestamp QueryTimestampType = "EventTimestamp"
	// Use @ingesttimestamp for the query.
	QueryTimestampTypeIngesttimestamp QueryTimestampType = "IngestTimestamp"
)

// RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation includes the requested fields of the GraphQL type RefreshClusterManagementStatsMutation.
type RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation struct {
	// Stability: Preview
	ReasonsNodeCannotBeSafelyUnregistered RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered `json:"reasonsNodeCannotBeSafelyUnregistered"`
}

// GetReasonsNodeCannotBeSafelyUnregistered returns RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation.ReasonsNodeCannotBeSafelyUnregistered, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation) GetReasonsNodeCannotBeSafelyUnregistered() RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered {
	return v.ReasonsNodeCannotBeSafelyUnregistered
}

// RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered includes the requested fields of the GraphQL type ReasonsNodeCannotBeSafelyUnregistered.
// The GraphQL type's documentation follows.
//
// A map from reasons why a node might not be able to be unregistered safely, to the boolean value indicating whether a given reason applies to this node. For a node to be unregistered without any undue disruption, none of the reasons must apply.
type RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered struct {
	// Stability: Long-term
	IsAlive bool `json:"isAlive"`
	// Stability: Long-term
	HasUnderReplicatedData bool `json:"hasUnderReplicatedData"`
	// Stability: Long-term
	HasDataThatExistsOnlyOnThisNode bool `json:"hasDataThatExistsOnlyOnThisNode"`
	// Stability: Long-term
	LeadsDigest bool `json:"leadsDigest"`
}

// GetIsAlive returns RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered.IsAlive, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered) GetIsAlive() bool {
	return v.IsAlive
}

// GetHasUnderReplicatedData returns RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered.HasUnderReplicatedData, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered) GetHasUnderReplicatedData() bool {
	return v.HasUnderReplicatedData
}

// GetHasDataThatExistsOnlyOnThisNode returns RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered.HasDataThatExistsOnlyOnThisNode, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered) GetHasDataThatExistsOnlyOnThisNode() bool {
	return v.HasDataThatExistsOnlyOnThisNode
}

// GetLeadsDigest returns RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered.LeadsDigest, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutationReasonsNodeCannotBeSafelyUnregistered) GetLeadsDigest() bool {
	return v.LeadsDigest
}

// RefreshClusterManagementStatsResponse is returned by RefreshClusterManagementStats on success.
type RefreshClusterManagementStatsResponse struct {
	// Force a refresh of the ClusterManagementStats cache and return reasonsNodeCannotBeSafelyUnregistered for the specified node.
	// Stability: Preview
	RefreshClusterManagementStats RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation `json:"refreshClusterManagementStats"`
}

// GetRefreshClusterManagementStats returns RefreshClusterManagementStatsResponse.RefreshClusterManagementStats, and is useful for accessing the field via an interface.
func (v *RefreshClusterManagementStatsResponse) GetRefreshClusterManagementStats() RefreshClusterManagementStatsRefreshClusterManagementStatsRefreshClusterManagementStatsMutation {
	return v.RefreshClusterManagementStats
}

// RemoveIngestTokenRemoveIngestTokenBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type RemoveIngestTokenRemoveIngestTokenBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns RemoveIngestTokenRemoveIngestTokenBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIngestTokenRemoveIngestTokenBooleanResultType) GetTypename() *string {
	return v.Typename
}

// RemoveIngestTokenResponse is returned by RemoveIngestToken on success.
type RemoveIngestTokenResponse struct {
	// Remove an Ingest Token.
	// Stability: Long-term
	RemoveIngestToken RemoveIngestTokenRemoveIngestTokenBooleanResultType `json:"removeIngestToken"`
}

// GetRemoveIngestToken returns RemoveIngestTokenResponse.RemoveIngestToken, and is useful for accessing the field via an interface.
func (v *RemoveIngestTokenResponse) GetRemoveIngestToken() RemoveIngestTokenRemoveIngestTokenBooleanResultType {
	return v.RemoveIngestToken
}

// RepositoryDetails includes the GraphQL fields of Repository requested by the fragment RepositoryDetails.
// The GraphQL type's documentation follows.
//
// A repository stores ingested data, configures parsers and data retention policies.
type RepositoryDetails struct {
	// Stability: Long-term
	Id string `json:"id"`
	// Stability: Long-term
	Name string `json:"name"`
	// Stability: Long-term
	Description *string `json:"description"`
	// The maximum time (in days) to keep data. Data old than this will be deleted.
	// Stability: Long-term
	TimeBasedRetention *float64 `json:"timeBasedRetention"`
	// Retention (in Gigabytes) based on the size of data when it arrives to LogScale, that is before parsing and compression. LogScale will keep `at most` this amount of data.
	// Stability: Long-term
	IngestSizeBasedRetention *float64 `json:"ingestSizeBasedRetention"`
	// Retention (in Gigabytes) based on the size of data when in storage, that is, after parsing and compression. LogScale will keep `at least` this amount of data, but as close to this number as possible.
	// Stability: Long-term
	StorageSizeBasedRetention *float64 `json:"storageSizeBasedRetention"`
	// Total size of data. Size is measured as the size after compression.
	// Stability: Long-term
	CompressedByteSize int64 `json:"compressedByteSize"`
	// Stability: Long-term
	AutomaticSearch bool `json:"automaticSearch"`
	// Configuration for S3 archiving. E.g. bucket name and region.
	// Stability: Long-term
	S3ArchivingConfiguration *RepositoryDetailsS3ArchivingConfigurationS3Configuration `json:"s3ArchivingConfiguration"`
}

// GetId returns RepositoryDetails.Id, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetId() string { return v.Id }

// GetName returns RepositoryDetails.Name, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetName() string { return v.Name }

// GetDescription returns RepositoryDetails.Description, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetDescription() *string { return v.Description }

// GetTimeBasedRetention returns RepositoryDetails.TimeBasedRetention, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetTimeBasedRetention() *float64 { return v.TimeBasedRetention }

// GetIngestSizeBasedRetention returns RepositoryDetails.IngestSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetIngestSizeBasedRetention() *float64 { return v.IngestSizeBasedRetention }

// GetStorageSizeBasedRetention returns RepositoryDetails.StorageSizeBasedRetention, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetStorageSizeBasedRetention() *float64 {
	return v.StorageSizeBasedRetention
}

// GetCompressedByteSize returns RepositoryDetails.CompressedByteSize, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetCompressedByteSize() int64 { return v.CompressedByteSize }

// GetAutomaticSearch returns RepositoryDetails.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetAutomaticSearch() bool { return v.AutomaticSearch }

// GetS3ArchivingConfiguration returns RepositoryDetails.S3ArchivingConfiguration, and is useful for accessing the field via an interface.
func (v *RepositoryDetails) GetS3ArchivingConfiguration() *RepositoryDetailsS3ArchivingConfigurationS3Configuration {
	return v.S3ArchivingConfiguration
}

// RepositoryDetailsS3ArchivingConfigurationS3Configuration includes the requested fields of the GraphQL type S3Configuration.
// The GraphQL type's documentation follows.
//
// Configuration for S3 archiving. E.g. bucket name and region.
type RepositoryDetailsS3ArchivingConfigurationS3Configuration struct {
	// S3 bucket name for storing archived data. Example: acme-bucket.
	// Stability: Short-term
	Bucket string `json:"bucket"`
	// The region the S3 bucket belongs to. Example: eu-central-1.
	// Stability: Short-term
	Region string `json:"region"`
	// Whether the archiving has been disabled.
	// Stability: Short-term
	Disabled *bool `json:"disabled"`
	// The format to store the archived data in on S3.
	// Stability: Short-term
	Format *S3ArchivingFormat `json:"format"`
}

// GetBucket returns RepositoryDetailsS3ArchivingConfigurationS3Configuration.Bucket, and is useful for accessing the field via an interface.
func (v *RepositoryDetailsS3ArchivingConfigurationS3Configuration) GetBucket() string {
	return v.Bucket
}

// GetRegion returns RepositoryDetailsS3ArchivingConfigurationS3Configuration.Region, and is useful for accessing the field via an interface.
func (v *RepositoryDetailsS3ArchivingConfigurationS3Configuration) GetRegion() string {
	return v.Region
}

// GetDisabled returns RepositoryDetailsS3ArchivingConfigurationS3Configuration.Disabled, and is useful for accessing the field via an interface.
func (v *RepositoryDetailsS3ArchivingConfigurationS3Configuration) GetDisabled() *bool {
	return v.Disabled
}

// GetFormat returns RepositoryDetailsS3ArchivingConfigurationS3Configuration.Format, and is useful for accessing the field via an interface.
func (v *RepositoryDetailsS3ArchivingConfigurationS3Configuration) GetFormat() *S3ArchivingFormat {
	return v.Format
}

// RotateTokenByIDResponse is returned by RotateTokenByID on success.
type RotateTokenByIDResponse struct {
	// Rotate a token
	// Stability: Long-term
	RotateToken string `json:"rotateToken"`
}

// GetRotateToken returns RotateTokenByIDResponse.RotateToken, and is useful for accessing the field via an interface.
func (v *RotateTokenByIDResponse) GetRotateToken() string { return v.RotateToken }

// The format to store archived segments in on AWS S3.
type S3ArchivingFormat string

const (
	S3ArchivingFormatRaw    S3ArchivingFormat = "RAW"
	S3ArchivingFormatNdjson S3ArchivingFormat = "NDJSON"
)

// ScheduledSearchDetails includes the GraphQL fields of ScheduledSearch requested by the fragment ScheduledSearchDetails.
// The GraphQL type's documentation follows.
//
// Information about a scheduled search
type ScheduledSearchDetails struct {
	// Id of the scheduled search.
	// Stability: Long-term
	Id string `json:"id"`
	// Name of the scheduled search.
	// Stability: Long-term
	Name string `json:"name"`
	// Description of the scheduled search.
	// Stability: Long-term
	Description *string `json:"description"`
	// LogScale query to execute.
	// Stability: Long-term
	QueryString string `json:"queryString"`
	// Start of the relative time interval for the query.
	// Stability: Long-term
	Start string `json:"start"`
	// End of the relative time interval for the query.
	// Stability: Long-term
	End string `json:"end"`
	// Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
	// Stability: Long-term
	TimeZone string `json:"timeZone"`
	// Cron pattern describing the schedule to execute the query on.
	// Stability: Long-term
	Schedule string `json:"schedule"`
	// User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
	// Stability: Long-term
	BackfillLimit int `json:"backfillLimit"`
	// Flag indicating whether the scheduled search is enabled.
	// Stability: Long-term
	Enabled bool `json:"enabled"`
	// Labels added to the scheduled search.
	// Stability: Long-term
	Labels []string `json:"labels"`
	// List of actions to fire on query result.
	// Stability: Long-term
	ActionsV2 []SharedActionNameType `json:"-"`
	// Ownership of the query run by this scheduled search
	// Stability: Long-term
	QueryOwnership SharedQueryOwnershipType `json:"-"`
}

// GetId returns ScheduledSearchDetails.Id, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetId() string { return v.Id }

// GetName returns ScheduledSearchDetails.Name, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetName() string { return v.Name }

// GetDescription returns ScheduledSearchDetails.Description, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetDescription() *string { return v.Description }

// GetQueryString returns ScheduledSearchDetails.QueryString, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetQueryString() string { return v.QueryString }

// GetStart returns ScheduledSearchDetails.Start, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetStart() string { return v.Start }

// GetEnd returns ScheduledSearchDetails.End, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetEnd() string { return v.End }

// GetTimeZone returns ScheduledSearchDetails.TimeZone, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetTimeZone() string { return v.TimeZone }

// GetSchedule returns ScheduledSearchDetails.Schedule, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetSchedule() string { return v.Schedule }

// GetBackfillLimit returns ScheduledSearchDetails.BackfillLimit, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetBackfillLimit() int { return v.BackfillLimit }

// GetEnabled returns ScheduledSearchDetails.Enabled, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetEnabled() bool { return v.Enabled }

// GetLabels returns ScheduledSearchDetails.Labels, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetLabels() []string { return v.Labels }

// GetActionsV2 returns ScheduledSearchDetails.ActionsV2, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetActionsV2() []SharedActionNameType { return v.ActionsV2 }

// GetQueryOwnership returns ScheduledSearchDetails.QueryOwnership, and is useful for accessing the field via an interface.
func (v *ScheduledSearchDetails) GetQueryOwnership() SharedQueryOwnershipType {
	return v.QueryOwnership
}

func (v *ScheduledSearchDetails) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScheduledSearchDetails
		ActionsV2      []json.RawMessage `json:"actionsV2"`
		QueryOwnership json.RawMessage   `json:"queryOwnership"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ScheduledSearchDetails = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ActionsV2
		src := firstPass.ActionsV2
		*dst = make(
			[]SharedActionNameType,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalSharedActionNameType(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ScheduledSearchDetails.ActionsV2: %w", err)
				}
			}
		}
	}

	{
		dst := &v.QueryOwnership
		src := firstPass.QueryOwnership
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSharedQueryOwnershipType(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ScheduledSearchDetails.QueryOwnership: %w", err)
			}
		}
	}
	return nil
}

type __premarshalScheduledSearchDetails struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	Start string `json:"start"`

	End string `json:"end"`

	TimeZone string `json:"timeZone"`

	Schedule string `json:"schedule"`

	BackfillLimit int `json:"backfillLimit"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *ScheduledSearchDetails) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScheduledSearchDetails) __premarshalJSON() (*__premarshalScheduledSearchDetails, error) {
	var retval __premarshalScheduledSearchDetails

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Description = v.Description
	retval.QueryString = v.QueryString
	retval.Start = v.Start
	retval.End = v.End
	retval.TimeZone = v.TimeZone
	retval.Schedule = v.Schedule
	retval.BackfillLimit = v.BackfillLimit
	retval.Enabled = v.Enabled
	retval.Labels = v.Labels
	{

		dst := &retval.ActionsV2
		src := v.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ScheduledSearchDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ScheduledSearchDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// SetAutomaticSearchingResponse is returned by SetAutomaticSearching on success.
type SetAutomaticSearchingResponse struct {
	// Automatically search when arriving at the search page
	// Stability: Long-term
	SetAutomaticSearching SetAutomaticSearchingSetAutomaticSearching `json:"setAutomaticSearching"`
}

// GetSetAutomaticSearching returns SetAutomaticSearchingResponse.SetAutomaticSearching, and is useful for accessing the field via an interface.
func (v *SetAutomaticSearchingResponse) GetSetAutomaticSearching() SetAutomaticSearchingSetAutomaticSearching {
	return v.SetAutomaticSearching
}

// SetAutomaticSearchingSetAutomaticSearching includes the requested fields of the GraphQL type setAutomaticSearching.
type SetAutomaticSearchingSetAutomaticSearching struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns SetAutomaticSearchingSetAutomaticSearching.Typename, and is useful for accessing the field via an interface.
func (v *SetAutomaticSearchingSetAutomaticSearching) GetTypename() *string { return v.Typename }

// SetIsBeingEvictedResponse is returned by SetIsBeingEvicted on success.
type SetIsBeingEvictedResponse struct {
	// Toggle whether the specified host should be prepared for eviction from the cluster. If preparing for eviction, the cluster will attempt to move data and work away from the host.
	// Stability: Short-term
	SetIsBeingEvicted bool `json:"setIsBeingEvicted"`
}

// GetSetIsBeingEvicted returns SetIsBeingEvictedResponse.SetIsBeingEvicted, and is useful for accessing the field via an interface.
func (v *SetIsBeingEvictedResponse) GetSetIsBeingEvicted() bool { return v.SetIsBeingEvicted }

// SharedActionNameType includes the requested fields of the GraphQL interface Action.
//
// SharedActionNameType is implemented by the following types:
// SharedActionNameTypeEmailAction
// SharedActionNameTypeHumioRepoAction
// SharedActionNameTypeOpsGenieAction
// SharedActionNameTypePagerDutyAction
// SharedActionNameTypeSlackAction
// SharedActionNameTypeSlackPostMessageAction
// SharedActionNameTypeUploadFileAction
// SharedActionNameTypeVictorOpsAction
// SharedActionNameTypeWebhookAction
// The GraphQL type's documentation follows.
//
// An action that can be invoked from a trigger.
type SharedActionNameType interface {
	implementsGraphQLInterfaceSharedActionNameType()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ActionName
}

func (v *SharedActionNameTypeEmailAction) implementsGraphQLInterfaceSharedActionNameType()     {}
func (v *SharedActionNameTypeHumioRepoAction) implementsGraphQLInterfaceSharedActionNameType() {}
func (v *SharedActionNameTypeOpsGenieAction) implementsGraphQLInterfaceSharedActionNameType()  {}
func (v *SharedActionNameTypePagerDutyAction) implementsGraphQLInterfaceSharedActionNameType() {}
func (v *SharedActionNameTypeSlackAction) implementsGraphQLInterfaceSharedActionNameType()     {}
func (v *SharedActionNameTypeSlackPostMessageAction) implementsGraphQLInterfaceSharedActionNameType() {
}
func (v *SharedActionNameTypeUploadFileAction) implementsGraphQLInterfaceSharedActionNameType() {}
func (v *SharedActionNameTypeVictorOpsAction) implementsGraphQLInterfaceSharedActionNameType()  {}
func (v *SharedActionNameTypeWebhookAction) implementsGraphQLInterfaceSharedActionNameType()    {}

func __unmarshalSharedActionNameType(b []byte, v *SharedActionNameType) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(SharedActionNameTypeEmailAction)
		return json.Unmarshal(b, *v)
	case "HumioRepoAction":
		*v = new(SharedActionNameTypeHumioRepoAction)
		return json.Unmarshal(b, *v)
	case "OpsGenieAction":
		*v = new(SharedActionNameTypeOpsGenieAction)
		return json.Unmarshal(b, *v)
	case "PagerDutyAction":
		*v = new(SharedActionNameTypePagerDutyAction)
		return json.Unmarshal(b, *v)
	case "SlackAction":
		*v = new(SharedActionNameTypeSlackAction)
		return json.Unmarshal(b, *v)
	case "SlackPostMessageAction":
		*v = new(SharedActionNameTypeSlackPostMessageAction)
		return json.Unmarshal(b, *v)
	case "UploadFileAction":
		*v = new(SharedActionNameTypeUploadFileAction)
		return json.Unmarshal(b, *v)
	case "VictorOpsAction":
		*v = new(SharedActionNameTypeVictorOpsAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(SharedActionNameTypeWebhookAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Action.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SharedActionNameType: "%v"`, tn.TypeName)
	}
}

func __marshalSharedActionNameType(v *SharedActionNameType) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SharedActionNameTypeEmailAction:
		typename = "EmailAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeEmailAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeHumioRepoAction:
		typename = "HumioRepoAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeHumioRepoAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeOpsGenieAction:
		typename = "OpsGenieAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeOpsGenieAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypePagerDutyAction:
		typename = "PagerDutyAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypePagerDutyAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeSlackAction:
		typename = "SlackAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeSlackAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeSlackPostMessageAction:
		typename = "SlackPostMessageAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeSlackPostMessageAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeUploadFileAction:
		typename = "UploadFileAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeUploadFileAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeVictorOpsAction:
		typename = "VictorOpsAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeVictorOpsAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedActionNameTypeWebhookAction:
		typename = "WebhookAction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedActionNameTypeWebhookAction
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SharedActionNameType: "%T"`, v)
	}
}

// SharedActionNameTypeEmailAction includes the requested fields of the GraphQL type EmailAction.
// The GraphQL type's documentation follows.
//
// An email action.
type SharedActionNameTypeEmailAction struct {
	Typename              *string `json:"__typename"`
	ActionNameEmailAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeEmailAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeEmailAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeEmailAction) GetName() string { return v.ActionNameEmailAction.Name }

func (v *SharedActionNameTypeEmailAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeEmailAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeEmailAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameEmailAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeEmailAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeEmailAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeEmailAction) __premarshalJSON() (*__premarshalSharedActionNameTypeEmailAction, error) {
	var retval __premarshalSharedActionNameTypeEmailAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameEmailAction.Name
	return &retval, nil
}

// SharedActionNameTypeHumioRepoAction includes the requested fields of the GraphQL type HumioRepoAction.
// The GraphQL type's documentation follows.
//
// A LogScale repository action.
type SharedActionNameTypeHumioRepoAction struct {
	Typename                  *string `json:"__typename"`
	ActionNameHumioRepoAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeHumioRepoAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeHumioRepoAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeHumioRepoAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeHumioRepoAction) GetName() string {
	return v.ActionNameHumioRepoAction.Name
}

func (v *SharedActionNameTypeHumioRepoAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeHumioRepoAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeHumioRepoAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameHumioRepoAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeHumioRepoAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeHumioRepoAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeHumioRepoAction) __premarshalJSON() (*__premarshalSharedActionNameTypeHumioRepoAction, error) {
	var retval __premarshalSharedActionNameTypeHumioRepoAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameHumioRepoAction.Name
	return &retval, nil
}

// SharedActionNameTypeOpsGenieAction includes the requested fields of the GraphQL type OpsGenieAction.
// The GraphQL type's documentation follows.
//
// An OpsGenie action
type SharedActionNameTypeOpsGenieAction struct {
	Typename                 *string `json:"__typename"`
	ActionNameOpsGenieAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeOpsGenieAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeOpsGenieAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeOpsGenieAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeOpsGenieAction) GetName() string { return v.ActionNameOpsGenieAction.Name }

func (v *SharedActionNameTypeOpsGenieAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeOpsGenieAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeOpsGenieAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameOpsGenieAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeOpsGenieAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeOpsGenieAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeOpsGenieAction) __premarshalJSON() (*__premarshalSharedActionNameTypeOpsGenieAction, error) {
	var retval __premarshalSharedActionNameTypeOpsGenieAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameOpsGenieAction.Name
	return &retval, nil
}

// SharedActionNameTypePagerDutyAction includes the requested fields of the GraphQL type PagerDutyAction.
// The GraphQL type's documentation follows.
//
// A PagerDuty action.
type SharedActionNameTypePagerDutyAction struct {
	Typename                  *string `json:"__typename"`
	ActionNamePagerDutyAction `json:"-"`
}

// GetTypename returns SharedActionNameTypePagerDutyAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypePagerDutyAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypePagerDutyAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypePagerDutyAction) GetName() string {
	return v.ActionNamePagerDutyAction.Name
}

func (v *SharedActionNameTypePagerDutyAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypePagerDutyAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypePagerDutyAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNamePagerDutyAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypePagerDutyAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypePagerDutyAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypePagerDutyAction) __premarshalJSON() (*__premarshalSharedActionNameTypePagerDutyAction, error) {
	var retval __premarshalSharedActionNameTypePagerDutyAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNamePagerDutyAction.Name
	return &retval, nil
}

// SharedActionNameTypeSlackAction includes the requested fields of the GraphQL type SlackAction.
// The GraphQL type's documentation follows.
//
// A Slack action
type SharedActionNameTypeSlackAction struct {
	Typename              *string `json:"__typename"`
	ActionNameSlackAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeSlackAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeSlackAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeSlackAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeSlackAction) GetName() string { return v.ActionNameSlackAction.Name }

func (v *SharedActionNameTypeSlackAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeSlackAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeSlackAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameSlackAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeSlackAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeSlackAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeSlackAction) __premarshalJSON() (*__premarshalSharedActionNameTypeSlackAction, error) {
	var retval __premarshalSharedActionNameTypeSlackAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameSlackAction.Name
	return &retval, nil
}

// SharedActionNameTypeSlackPostMessageAction includes the requested fields of the GraphQL type SlackPostMessageAction.
// The GraphQL type's documentation follows.
//
// A slack post-message action.
type SharedActionNameTypeSlackPostMessageAction struct {
	Typename                         *string `json:"__typename"`
	ActionNameSlackPostMessageAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeSlackPostMessageAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeSlackPostMessageAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeSlackPostMessageAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeSlackPostMessageAction) GetName() string {
	return v.ActionNameSlackPostMessageAction.Name
}

func (v *SharedActionNameTypeSlackPostMessageAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeSlackPostMessageAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeSlackPostMessageAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameSlackPostMessageAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeSlackPostMessageAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeSlackPostMessageAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeSlackPostMessageAction) __premarshalJSON() (*__premarshalSharedActionNameTypeSlackPostMessageAction, error) {
	var retval __premarshalSharedActionNameTypeSlackPostMessageAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameSlackPostMessageAction.Name
	return &retval, nil
}

// SharedActionNameTypeUploadFileAction includes the requested fields of the GraphQL type UploadFileAction.
// The GraphQL type's documentation follows.
//
// An upload file action.
type SharedActionNameTypeUploadFileAction struct {
	Typename                   *string `json:"__typename"`
	ActionNameUploadFileAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeUploadFileAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeUploadFileAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeUploadFileAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeUploadFileAction) GetName() string {
	return v.ActionNameUploadFileAction.Name
}

func (v *SharedActionNameTypeUploadFileAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeUploadFileAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeUploadFileAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameUploadFileAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeUploadFileAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeUploadFileAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeUploadFileAction) __premarshalJSON() (*__premarshalSharedActionNameTypeUploadFileAction, error) {
	var retval __premarshalSharedActionNameTypeUploadFileAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameUploadFileAction.Name
	return &retval, nil
}

// SharedActionNameTypeVictorOpsAction includes the requested fields of the GraphQL type VictorOpsAction.
// The GraphQL type's documentation follows.
//
// A VictorOps action.
type SharedActionNameTypeVictorOpsAction struct {
	Typename                  *string `json:"__typename"`
	ActionNameVictorOpsAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeVictorOpsAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeVictorOpsAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeVictorOpsAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeVictorOpsAction) GetName() string {
	return v.ActionNameVictorOpsAction.Name
}

func (v *SharedActionNameTypeVictorOpsAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeVictorOpsAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeVictorOpsAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameVictorOpsAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeVictorOpsAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeVictorOpsAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeVictorOpsAction) __premarshalJSON() (*__premarshalSharedActionNameTypeVictorOpsAction, error) {
	var retval __premarshalSharedActionNameTypeVictorOpsAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameVictorOpsAction.Name
	return &retval, nil
}

// SharedActionNameTypeWebhookAction includes the requested fields of the GraphQL type WebhookAction.
// The GraphQL type's documentation follows.
//
// A webhook action
type SharedActionNameTypeWebhookAction struct {
	Typename                *string `json:"__typename"`
	ActionNameWebhookAction `json:"-"`
}

// GetTypename returns SharedActionNameTypeWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeWebhookAction) GetTypename() *string { return v.Typename }

// GetName returns SharedActionNameTypeWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *SharedActionNameTypeWebhookAction) GetName() string { return v.ActionNameWebhookAction.Name }

func (v *SharedActionNameTypeWebhookAction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedActionNameTypeWebhookAction
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedActionNameTypeWebhookAction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ActionNameWebhookAction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedActionNameTypeWebhookAction struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`
}

func (v *SharedActionNameTypeWebhookAction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedActionNameTypeWebhookAction) __premarshalJSON() (*__premarshalSharedActionNameTypeWebhookAction, error) {
	var retval __premarshalSharedActionNameTypeWebhookAction

	retval.Typename = v.Typename
	retval.Name = v.ActionNameWebhookAction.Name
	return &retval, nil
}

// SharedQueryOwnershipType includes the requested fields of the GraphQL interface QueryOwnership.
//
// SharedQueryOwnershipType is implemented by the following types:
// SharedQueryOwnershipTypeOrganizationOwnership
// SharedQueryOwnershipTypeUserOwnership
// The GraphQL type's documentation follows.
//
// Query ownership
type SharedQueryOwnershipType interface {
	implementsGraphQLInterfaceSharedQueryOwnershipType()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	QueryOwnership
}

func (v *SharedQueryOwnershipTypeOrganizationOwnership) implementsGraphQLInterfaceSharedQueryOwnershipType() {
}
func (v *SharedQueryOwnershipTypeUserOwnership) implementsGraphQLInterfaceSharedQueryOwnershipType() {
}

func __unmarshalSharedQueryOwnershipType(b []byte, v *SharedQueryOwnershipType) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OrganizationOwnership":
		*v = new(SharedQueryOwnershipTypeOrganizationOwnership)
		return json.Unmarshal(b, *v)
	case "UserOwnership":
		*v = new(SharedQueryOwnershipTypeUserOwnership)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing QueryOwnership.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SharedQueryOwnershipType: "%v"`, tn.TypeName)
	}
}

func __marshalSharedQueryOwnershipType(v *SharedQueryOwnershipType) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SharedQueryOwnershipTypeOrganizationOwnership:
		typename = "OrganizationOwnership"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedQueryOwnershipTypeOrganizationOwnership
		}{typename, premarshaled}
		return json.Marshal(result)
	case *SharedQueryOwnershipTypeUserOwnership:
		typename = "UserOwnership"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalSharedQueryOwnershipTypeUserOwnership
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SharedQueryOwnershipType: "%T"`, v)
	}
}

// SharedQueryOwnershipTypeOrganizationOwnership includes the requested fields of the GraphQL type OrganizationOwnership.
// The GraphQL type's documentation follows.
//
// Query running with organization based ownership
type SharedQueryOwnershipTypeOrganizationOwnership struct {
	Typename                            *string `json:"__typename"`
	QueryOwnershipOrganizationOwnership `json:"-"`
}

// GetTypename returns SharedQueryOwnershipTypeOrganizationOwnership.Typename, and is useful for accessing the field via an interface.
func (v *SharedQueryOwnershipTypeOrganizationOwnership) GetTypename() *string { return v.Typename }

func (v *SharedQueryOwnershipTypeOrganizationOwnership) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedQueryOwnershipTypeOrganizationOwnership
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedQueryOwnershipTypeOrganizationOwnership = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.QueryOwnershipOrganizationOwnership)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedQueryOwnershipTypeOrganizationOwnership struct {
	Typename *string `json:"__typename"`
}

func (v *SharedQueryOwnershipTypeOrganizationOwnership) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedQueryOwnershipTypeOrganizationOwnership) __premarshalJSON() (*__premarshalSharedQueryOwnershipTypeOrganizationOwnership, error) {
	var retval __premarshalSharedQueryOwnershipTypeOrganizationOwnership

	retval.Typename = v.Typename
	return &retval, nil
}

// SharedQueryOwnershipTypeUserOwnership includes the requested fields of the GraphQL type UserOwnership.
// The GraphQL type's documentation follows.
//
// Query running with user based ownership
type SharedQueryOwnershipTypeUserOwnership struct {
	Typename                    *string `json:"__typename"`
	QueryOwnershipUserOwnership `json:"-"`
}

// GetTypename returns SharedQueryOwnershipTypeUserOwnership.Typename, and is useful for accessing the field via an interface.
func (v *SharedQueryOwnershipTypeUserOwnership) GetTypename() *string { return v.Typename }

func (v *SharedQueryOwnershipTypeUserOwnership) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SharedQueryOwnershipTypeUserOwnership
		graphql.NoUnmarshalJSON
	}
	firstPass.SharedQueryOwnershipTypeUserOwnership = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.QueryOwnershipUserOwnership)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSharedQueryOwnershipTypeUserOwnership struct {
	Typename *string `json:"__typename"`
}

func (v *SharedQueryOwnershipTypeUserOwnership) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SharedQueryOwnershipTypeUserOwnership) __premarshalJSON() (*__premarshalSharedQueryOwnershipTypeUserOwnership, error) {
	var retval __premarshalSharedQueryOwnershipTypeUserOwnership

	retval.Typename = v.Typename
	return &retval, nil
}

// Slack message field entry.
type SlackFieldEntryInput struct {
	// Slack message field entry.
	FieldName string `json:"fieldName"`
	// Slack message field entry.
	Value string `json:"value"`
}

// GetFieldName returns SlackFieldEntryInput.FieldName, and is useful for accessing the field via an interface.
func (v *SlackFieldEntryInput) GetFieldName() string { return v.FieldName }

// GetValue returns SlackFieldEntryInput.Value, and is useful for accessing the field via an interface.
func (v *SlackFieldEntryInput) GetValue() string { return v.Value }

// Trigger mode for an aggregate alert.
type TriggerMode string

const (
	// Wait for up to 20 minutes for a complete result before triggering.
	TriggerModeCompletemode TriggerMode = "CompleteMode"
	// Trigger immediately, even on incomplete results. If nothing to trigger on, wait for up to 20 minutes for there to be a result to trigger on.
	TriggerModeImmediatemode TriggerMode = "ImmediateMode"
)

// UnassignParserToIngestTokenResponse is returned by UnassignParserToIngestToken on success.
type UnassignParserToIngestTokenResponse struct {
	// Un-associates a token with its currently assigned parser.
	// Stability: Long-term
	UnassignIngestToken UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation `json:"unassignIngestToken"`
}

// GetUnassignIngestToken returns UnassignParserToIngestTokenResponse.UnassignIngestToken, and is useful for accessing the field via an interface.
func (v *UnassignParserToIngestTokenResponse) GetUnassignIngestToken() UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation {
	return v.UnassignIngestToken
}

// UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation includes the requested fields of the GraphQL type UnassignIngestTokenMutation.
type UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation.Typename, and is useful for accessing the field via an interface.
func (v *UnassignParserToIngestTokenUnassignIngestTokenUnassignIngestTokenMutation) GetTypename() *string {
	return v.Typename
}

// UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation includes the requested fields of the GraphQL type UnregisterNodeMutation.
type UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation struct {
	// Stability: Long-term
	Cluster UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster `json:"cluster"`
}

// GetCluster returns UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation.Cluster, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation) GetCluster() UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster {
	return v.Cluster
}

// UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster includes the requested fields of the GraphQL type Cluster.
// The GraphQL type's documentation follows.
//
// Information about the LogScale cluster.
type UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster struct {
	// Stability: Long-term
	Nodes []UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode `json:"nodes"`
}

// GetNodes returns UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster.Nodes, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationCluster) GetNodes() []UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode {
	return v.Nodes
}

// UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode includes the requested fields of the GraphQL type ClusterNode.
// The GraphQL type's documentation follows.
//
// A node in the a LogScale Cluster.
type UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode struct {
	// Stability: Long-term
	Id int `json:"id"`
	// Stability: Long-term
	Zone *string `json:"zone"`
	// A flag indicating whether the node is marked for eviction. The Falcon LogScale cluster will start to move segments, digesters and queries away from any node marked for eviction
	// Stability: Long-term
	IsBeingEvicted *bool `json:"isBeingEvicted"`
}

// GetId returns UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode.Id, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode) GetId() int {
	return v.Id
}

// GetZone returns UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode.Zone, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode) GetZone() *string {
	return v.Zone
}

// GetIsBeingEvicted returns UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode.IsBeingEvicted, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutationClusterNodesClusterNode) GetIsBeingEvicted() *bool {
	return v.IsBeingEvicted
}

// UnregisterClusterNodeResponse is returned by UnregisterClusterNode on success.
type UnregisterClusterNodeResponse struct {
	// Unregisters a node from the cluster.
	// Stability: Long-term
	ClusterUnregisterNode UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation `json:"clusterUnregisterNode"`
}

// GetClusterUnregisterNode returns UnregisterClusterNodeResponse.ClusterUnregisterNode, and is useful for accessing the field via an interface.
func (v *UnregisterClusterNodeResponse) GetClusterUnregisterNode() UnregisterClusterNodeClusterUnregisterNodeUnregisterNodeMutation {
	return v.ClusterUnregisterNode
}

// UpdateAggregateAlertResponse is returned by UpdateAggregateAlert on success.
type UpdateAggregateAlertResponse struct {
	// Update an aggregate alert.
	// Stability: Long-term
	UpdateAggregateAlert UpdateAggregateAlertUpdateAggregateAlert `json:"updateAggregateAlert"`
}

// GetUpdateAggregateAlert returns UpdateAggregateAlertResponse.UpdateAggregateAlert, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertResponse) GetUpdateAggregateAlert() UpdateAggregateAlertUpdateAggregateAlert {
	return v.UpdateAggregateAlert
}

// UpdateAggregateAlertUpdateAggregateAlert includes the requested fields of the GraphQL type AggregateAlert.
// The GraphQL type's documentation follows.
//
// An aggregate alert.
type UpdateAggregateAlertUpdateAggregateAlert struct {
	AggregateAlertDetails `json:"-"`
}

// GetId returns UpdateAggregateAlertUpdateAggregateAlert.Id, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetId() string { return v.AggregateAlertDetails.Id }

// GetName returns UpdateAggregateAlertUpdateAggregateAlert.Name, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetName() string {
	return v.AggregateAlertDetails.Name
}

// GetDescription returns UpdateAggregateAlertUpdateAggregateAlert.Description, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetDescription() *string {
	return v.AggregateAlertDetails.Description
}

// GetQueryString returns UpdateAggregateAlertUpdateAggregateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetQueryString() string {
	return v.AggregateAlertDetails.QueryString
}

// GetSearchIntervalSeconds returns UpdateAggregateAlertUpdateAggregateAlert.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetSearchIntervalSeconds() int64 {
	return v.AggregateAlertDetails.SearchIntervalSeconds
}

// GetThrottleTimeSeconds returns UpdateAggregateAlertUpdateAggregateAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetThrottleTimeSeconds() int64 {
	return v.AggregateAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns UpdateAggregateAlertUpdateAggregateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetThrottleField() *string {
	return v.AggregateAlertDetails.ThrottleField
}

// GetLabels returns UpdateAggregateAlertUpdateAggregateAlert.Labels, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetLabels() []string {
	return v.AggregateAlertDetails.Labels
}

// GetEnabled returns UpdateAggregateAlertUpdateAggregateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetEnabled() bool {
	return v.AggregateAlertDetails.Enabled
}

// GetTriggerMode returns UpdateAggregateAlertUpdateAggregateAlert.TriggerMode, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetTriggerMode() TriggerMode {
	return v.AggregateAlertDetails.TriggerMode
}

// GetQueryTimestampType returns UpdateAggregateAlertUpdateAggregateAlert.QueryTimestampType, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetQueryTimestampType() QueryTimestampType {
	return v.AggregateAlertDetails.QueryTimestampType
}

// GetActions returns UpdateAggregateAlertUpdateAggregateAlert.Actions, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetActions() []SharedActionNameType {
	return v.AggregateAlertDetails.Actions
}

// GetQueryOwnership returns UpdateAggregateAlertUpdateAggregateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *UpdateAggregateAlertUpdateAggregateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AggregateAlertDetails.QueryOwnership
}

func (v *UpdateAggregateAlertUpdateAggregateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAggregateAlertUpdateAggregateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAggregateAlertUpdateAggregateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AggregateAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAggregateAlertUpdateAggregateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	SearchIntervalSeconds int64 `json:"searchIntervalSeconds"`

	ThrottleTimeSeconds int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	TriggerMode TriggerMode `json:"triggerMode"`

	QueryTimestampType QueryTimestampType `json:"queryTimestampType"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *UpdateAggregateAlertUpdateAggregateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAggregateAlertUpdateAggregateAlert) __premarshalJSON() (*__premarshalUpdateAggregateAlertUpdateAggregateAlert, error) {
	var retval __premarshalUpdateAggregateAlertUpdateAggregateAlert

	retval.Id = v.AggregateAlertDetails.Id
	retval.Name = v.AggregateAlertDetails.Name
	retval.Description = v.AggregateAlertDetails.Description
	retval.QueryString = v.AggregateAlertDetails.QueryString
	retval.SearchIntervalSeconds = v.AggregateAlertDetails.SearchIntervalSeconds
	retval.ThrottleTimeSeconds = v.AggregateAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.AggregateAlertDetails.ThrottleField
	retval.Labels = v.AggregateAlertDetails.Labels
	retval.Enabled = v.AggregateAlertDetails.Enabled
	retval.TriggerMode = v.AggregateAlertDetails.TriggerMode
	retval.QueryTimestampType = v.AggregateAlertDetails.QueryTimestampType
	{

		dst := &retval.Actions
		src := v.AggregateAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateAggregateAlertUpdateAggregateAlert.AggregateAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AggregateAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateAggregateAlertUpdateAggregateAlert.AggregateAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// UpdateAlertResponse is returned by UpdateAlert on success.
type UpdateAlertResponse struct {
	// Update an alert.
	// Stability: Long-term
	UpdateAlert UpdateAlertUpdateAlert `json:"updateAlert"`
}

// GetUpdateAlert returns UpdateAlertResponse.UpdateAlert, and is useful for accessing the field via an interface.
func (v *UpdateAlertResponse) GetUpdateAlert() UpdateAlertUpdateAlert { return v.UpdateAlert }

// UpdateAlertUpdateAlert includes the requested fields of the GraphQL type Alert.
// The GraphQL type's documentation follows.
//
// An alert.
type UpdateAlertUpdateAlert struct {
	AlertDetails `json:"-"`
}

// GetId returns UpdateAlertUpdateAlert.Id, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetId() string { return v.AlertDetails.Id }

// GetName returns UpdateAlertUpdateAlert.Name, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetName() string { return v.AlertDetails.Name }

// GetQueryString returns UpdateAlertUpdateAlert.QueryString, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetQueryString() string { return v.AlertDetails.QueryString }

// GetQueryStart returns UpdateAlertUpdateAlert.QueryStart, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetQueryStart() string { return v.AlertDetails.QueryStart }

// GetThrottleField returns UpdateAlertUpdateAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetThrottleField() *string { return v.AlertDetails.ThrottleField }

// GetDescription returns UpdateAlertUpdateAlert.Description, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetDescription() *string { return v.AlertDetails.Description }

// GetThrottleTimeMillis returns UpdateAlertUpdateAlert.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetThrottleTimeMillis() int64 {
	return v.AlertDetails.ThrottleTimeMillis
}

// GetEnabled returns UpdateAlertUpdateAlert.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetEnabled() bool { return v.AlertDetails.Enabled }

// GetLabels returns UpdateAlertUpdateAlert.Labels, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetLabels() []string { return v.AlertDetails.Labels }

// GetActionsV2 returns UpdateAlertUpdateAlert.ActionsV2, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetActionsV2() []SharedActionNameType {
	return v.AlertDetails.ActionsV2
}

// GetQueryOwnership returns UpdateAlertUpdateAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *UpdateAlertUpdateAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.AlertDetails.QueryOwnership
}

func (v *UpdateAlertUpdateAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAlertUpdateAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAlertUpdateAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAlertUpdateAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	QueryString string `json:"queryString"`

	QueryStart string `json:"queryStart"`

	ThrottleField *string `json:"throttleField"`

	Description *string `json:"description"`

	ThrottleTimeMillis int64 `json:"throttleTimeMillis"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *UpdateAlertUpdateAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAlertUpdateAlert) __premarshalJSON() (*__premarshalUpdateAlertUpdateAlert, error) {
	var retval __premarshalUpdateAlertUpdateAlert

	retval.Id = v.AlertDetails.Id
	retval.Name = v.AlertDetails.Name
	retval.QueryString = v.AlertDetails.QueryString
	retval.QueryStart = v.AlertDetails.QueryStart
	retval.ThrottleField = v.AlertDetails.ThrottleField
	retval.Description = v.AlertDetails.Description
	retval.ThrottleTimeMillis = v.AlertDetails.ThrottleTimeMillis
	retval.Enabled = v.AlertDetails.Enabled
	retval.Labels = v.AlertDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.AlertDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateAlertUpdateAlert.AlertDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.AlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateAlertUpdateAlert.AlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// UpdateDescriptionForSearchDomainResponse is returned by UpdateDescriptionForSearchDomain on success.
type UpdateDescriptionForSearchDomainResponse struct {
	// Stability: Long-term
	UpdateDescriptionForSearchDomain UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation `json:"updateDescriptionForSearchDomain"`
}

// GetUpdateDescriptionForSearchDomain returns UpdateDescriptionForSearchDomainResponse.UpdateDescriptionForSearchDomain, and is useful for accessing the field via an interface.
func (v *UpdateDescriptionForSearchDomainResponse) GetUpdateDescriptionForSearchDomain() UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation {
	return v.UpdateDescriptionForSearchDomain
}

// UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation includes the requested fields of the GraphQL type UpdateDescriptionMutation.
type UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDescriptionForSearchDomainUpdateDescriptionForSearchDomainUpdateDescriptionMutation) GetTypename() *string {
	return v.Typename
}

// UpdateEmailActionResponse is returned by UpdateEmailAction on success.
type UpdateEmailActionResponse struct {
	// Update an email action.
	// Stability: Long-term
	UpdateEmailAction UpdateEmailActionUpdateEmailAction `json:"updateEmailAction"`
}

// GetUpdateEmailAction returns UpdateEmailActionResponse.UpdateEmailAction, and is useful for accessing the field via an interface.
func (v *UpdateEmailActionResponse) GetUpdateEmailAction() UpdateEmailActionUpdateEmailAction {
	return v.UpdateEmailAction
}

// UpdateEmailActionUpdateEmailAction includes the requested fields of the GraphQL type EmailAction.
// The GraphQL type's documentation follows.
//
// An email action.
type UpdateEmailActionUpdateEmailAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateEmailActionUpdateEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateEmailActionUpdateEmailAction) GetTypename() *string { return v.Typename }

// UpdateFilterAlertResponse is returned by UpdateFilterAlert on success.
type UpdateFilterAlertResponse struct {
	// Update a filter alert.
	// Stability: Long-term
	UpdateFilterAlert UpdateFilterAlertUpdateFilterAlert `json:"updateFilterAlert"`
}

// GetUpdateFilterAlert returns UpdateFilterAlertResponse.UpdateFilterAlert, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertResponse) GetUpdateFilterAlert() UpdateFilterAlertUpdateFilterAlert {
	return v.UpdateFilterAlert
}

// UpdateFilterAlertUpdateFilterAlert includes the requested fields of the GraphQL type FilterAlert.
// The GraphQL type's documentation follows.
//
// A filter alert.
type UpdateFilterAlertUpdateFilterAlert struct {
	FilterAlertDetails `json:"-"`
}

// GetId returns UpdateFilterAlertUpdateFilterAlert.Id, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetId() string { return v.FilterAlertDetails.Id }

// GetName returns UpdateFilterAlertUpdateFilterAlert.Name, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetName() string { return v.FilterAlertDetails.Name }

// GetDescription returns UpdateFilterAlertUpdateFilterAlert.Description, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetDescription() *string {
	return v.FilterAlertDetails.Description
}

// GetQueryString returns UpdateFilterAlertUpdateFilterAlert.QueryString, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetQueryString() string {
	return v.FilterAlertDetails.QueryString
}

// GetThrottleTimeSeconds returns UpdateFilterAlertUpdateFilterAlert.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetThrottleTimeSeconds() *int64 {
	return v.FilterAlertDetails.ThrottleTimeSeconds
}

// GetThrottleField returns UpdateFilterAlertUpdateFilterAlert.ThrottleField, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetThrottleField() *string {
	return v.FilterAlertDetails.ThrottleField
}

// GetLabels returns UpdateFilterAlertUpdateFilterAlert.Labels, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetLabels() []string { return v.FilterAlertDetails.Labels }

// GetEnabled returns UpdateFilterAlertUpdateFilterAlert.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetEnabled() bool { return v.FilterAlertDetails.Enabled }

// GetActions returns UpdateFilterAlertUpdateFilterAlert.Actions, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetActions() []SharedActionNameType {
	return v.FilterAlertDetails.Actions
}

// GetQueryOwnership returns UpdateFilterAlertUpdateFilterAlert.QueryOwnership, and is useful for accessing the field via an interface.
func (v *UpdateFilterAlertUpdateFilterAlert) GetQueryOwnership() SharedQueryOwnershipType {
	return v.FilterAlertDetails.QueryOwnership
}

func (v *UpdateFilterAlertUpdateFilterAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFilterAlertUpdateFilterAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFilterAlertUpdateFilterAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterAlertDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateFilterAlertUpdateFilterAlert struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	ThrottleTimeSeconds *int64 `json:"throttleTimeSeconds"`

	ThrottleField *string `json:"throttleField"`

	Labels []string `json:"labels"`

	Enabled bool `json:"enabled"`

	Actions []json.RawMessage `json:"actions"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *UpdateFilterAlertUpdateFilterAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFilterAlertUpdateFilterAlert) __premarshalJSON() (*__premarshalUpdateFilterAlertUpdateFilterAlert, error) {
	var retval __premarshalUpdateFilterAlertUpdateFilterAlert

	retval.Id = v.FilterAlertDetails.Id
	retval.Name = v.FilterAlertDetails.Name
	retval.Description = v.FilterAlertDetails.Description
	retval.QueryString = v.FilterAlertDetails.QueryString
	retval.ThrottleTimeSeconds = v.FilterAlertDetails.ThrottleTimeSeconds
	retval.ThrottleField = v.FilterAlertDetails.ThrottleField
	retval.Labels = v.FilterAlertDetails.Labels
	retval.Enabled = v.FilterAlertDetails.Enabled
	{

		dst := &retval.Actions
		src := v.FilterAlertDetails.Actions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateFilterAlertUpdateFilterAlert.FilterAlertDetails.Actions: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.FilterAlertDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateFilterAlertUpdateFilterAlert.FilterAlertDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// UpdateHumioRepoActionResponse is returned by UpdateHumioRepoAction on success.
type UpdateHumioRepoActionResponse struct {
	// Update a LogScale repository action.
	// Stability: Long-term
	UpdateHumioRepoAction UpdateHumioRepoActionUpdateHumioRepoAction `json:"updateHumioRepoAction"`
}

// GetUpdateHumioRepoAction returns UpdateHumioRepoActionResponse.UpdateHumioRepoAction, and is useful for accessing the field via an interface.
func (v *UpdateHumioRepoActionResponse) GetUpdateHumioRepoAction() UpdateHumioRepoActionUpdateHumioRepoAction {
	return v.UpdateHumioRepoAction
}

// UpdateHumioRepoActionUpdateHumioRepoAction includes the requested fields of the GraphQL type HumioRepoAction.
// The GraphQL type's documentation follows.
//
// A LogScale repository action.
type UpdateHumioRepoActionUpdateHumioRepoAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateHumioRepoActionUpdateHumioRepoAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateHumioRepoActionUpdateHumioRepoAction) GetTypename() *string { return v.Typename }

// UpdateIngestBasedRetentionResponse is returned by UpdateIngestBasedRetention on success.
type UpdateIngestBasedRetentionResponse struct {
	// Update the retention policy of a repository.
	// Stability: Long-term
	UpdateRetention UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation `json:"updateRetention"`
}

// GetUpdateRetention returns UpdateIngestBasedRetentionResponse.UpdateRetention, and is useful for accessing the field via an interface.
func (v *UpdateIngestBasedRetentionResponse) GetUpdateRetention() UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation {
	return v.UpdateRetention
}

// UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation includes the requested fields of the GraphQL type UpdateRetentionMutation.
type UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIngestBasedRetentionUpdateRetentionUpdateRetentionMutation) GetTypename() *string {
	return v.Typename
}

// UpdateLicenseKeyResponse is returned by UpdateLicenseKey on success.
type UpdateLicenseKeyResponse struct {
	// Update the license key for the LogScale cluster. If there is an existing license on this cluster this operation requires permission to manage cluster.
	// Stability: Long-term
	UpdateLicenseKey UpdateLicenseKeyUpdateLicenseKeyLicense `json:"-"`
}

// GetUpdateLicenseKey returns UpdateLicenseKeyResponse.UpdateLicenseKey, and is useful for accessing the field via an interface.
func (v *UpdateLicenseKeyResponse) GetUpdateLicenseKey() UpdateLicenseKeyUpdateLicenseKeyLicense {
	return v.UpdateLicenseKey
}

func (v *UpdateLicenseKeyResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateLicenseKeyResponse
		UpdateLicenseKey json.RawMessage `json:"updateLicenseKey"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateLicenseKeyResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateLicenseKey
		src := firstPass.UpdateLicenseKey
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateLicenseKeyUpdateLicenseKeyLicense(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateLicenseKeyResponse.UpdateLicenseKey: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateLicenseKeyResponse struct {
	UpdateLicenseKey json.RawMessage `json:"updateLicenseKey"`
}

func (v *UpdateLicenseKeyResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateLicenseKeyResponse) __premarshalJSON() (*__premarshalUpdateLicenseKeyResponse, error) {
	var retval __premarshalUpdateLicenseKeyResponse

	{

		dst := &retval.UpdateLicenseKey
		src := v.UpdateLicenseKey
		var err error
		*dst, err = __marshalUpdateLicenseKeyUpdateLicenseKeyLicense(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateLicenseKeyResponse.UpdateLicenseKey: %w", err)
		}
	}
	return &retval, nil
}

// UpdateLicenseKeyUpdateLicenseKeyLicense includes the requested fields of the GraphQL interface License.
//
// UpdateLicenseKeyUpdateLicenseKeyLicense is implemented by the following types:
// UpdateLicenseKeyUpdateLicenseKeyOnPremLicense
// UpdateLicenseKeyUpdateLicenseKeyTrialLicense
// The GraphQL type's documentation follows.
//
// Represents information about the LogScale instance.
type UpdateLicenseKeyUpdateLicenseKeyLicense interface {
	implementsGraphQLInterfaceUpdateLicenseKeyUpdateLicenseKeyLicense()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateLicenseKeyUpdateLicenseKeyOnPremLicense) implementsGraphQLInterfaceUpdateLicenseKeyUpdateLicenseKeyLicense() {
}
func (v *UpdateLicenseKeyUpdateLicenseKeyTrialLicense) implementsGraphQLInterfaceUpdateLicenseKeyUpdateLicenseKeyLicense() {
}

func __unmarshalUpdateLicenseKeyUpdateLicenseKeyLicense(b []byte, v *UpdateLicenseKeyUpdateLicenseKeyLicense) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OnPremLicense":
		*v = new(UpdateLicenseKeyUpdateLicenseKeyOnPremLicense)
		return json.Unmarshal(b, *v)
	case "TrialLicense":
		*v = new(UpdateLicenseKeyUpdateLicenseKeyTrialLicense)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing License.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateLicenseKeyUpdateLicenseKeyLicense: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateLicenseKeyUpdateLicenseKeyLicense(v *UpdateLicenseKeyUpdateLicenseKeyLicense) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateLicenseKeyUpdateLicenseKeyOnPremLicense:
		typename = "OnPremLicense"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLicenseKeyUpdateLicenseKeyOnPremLicense
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLicenseKeyUpdateLicenseKeyTrialLicense:
		typename = "TrialLicense"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLicenseKeyUpdateLicenseKeyTrialLicense
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateLicenseKeyUpdateLicenseKeyLicense: "%T"`, v)
	}
}

// UpdateLicenseKeyUpdateLicenseKeyOnPremLicense includes the requested fields of the GraphQL type OnPremLicense.
// The GraphQL type's documentation follows.
//
// Represents information about a LogScale License.
type UpdateLicenseKeyUpdateLicenseKeyOnPremLicense struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLicenseKeyUpdateLicenseKeyOnPremLicense.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLicenseKeyUpdateLicenseKeyOnPremLicense) GetTypename() *string { return v.Typename }

// UpdateLicenseKeyUpdateLicenseKeyTrialLicense includes the requested fields of the GraphQL type TrialLicense.
// The GraphQL type's documentation follows.
//
// Represents information about an on-going trial of LogScale.
type UpdateLicenseKeyUpdateLicenseKeyTrialLicense struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLicenseKeyUpdateLicenseKeyTrialLicense.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLicenseKeyUpdateLicenseKeyTrialLicense) GetTypename() *string { return v.Typename }

// UpdateOpsGenieActionResponse is returned by UpdateOpsGenieAction on success.
type UpdateOpsGenieActionResponse struct {
	// Update an OpsGenie action.
	// Stability: Long-term
	UpdateOpsGenieAction UpdateOpsGenieActionUpdateOpsGenieAction `json:"updateOpsGenieAction"`
}

// GetUpdateOpsGenieAction returns UpdateOpsGenieActionResponse.UpdateOpsGenieAction, and is useful for accessing the field via an interface.
func (v *UpdateOpsGenieActionResponse) GetUpdateOpsGenieAction() UpdateOpsGenieActionUpdateOpsGenieAction {
	return v.UpdateOpsGenieAction
}

// UpdateOpsGenieActionUpdateOpsGenieAction includes the requested fields of the GraphQL type OpsGenieAction.
// The GraphQL type's documentation follows.
//
// An OpsGenie action
type UpdateOpsGenieActionUpdateOpsGenieAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateOpsGenieActionUpdateOpsGenieAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateOpsGenieActionUpdateOpsGenieAction) GetTypename() *string { return v.Typename }

// UpdatePagerDutyActionResponse is returned by UpdatePagerDutyAction on success.
type UpdatePagerDutyActionResponse struct {
	// Update a PagerDuty action.
	// Stability: Long-term
	UpdatePagerDutyAction UpdatePagerDutyActionUpdatePagerDutyAction `json:"updatePagerDutyAction"`
}

// GetUpdatePagerDutyAction returns UpdatePagerDutyActionResponse.UpdatePagerDutyAction, and is useful for accessing the field via an interface.
func (v *UpdatePagerDutyActionResponse) GetUpdatePagerDutyAction() UpdatePagerDutyActionUpdatePagerDutyAction {
	return v.UpdatePagerDutyAction
}

// UpdatePagerDutyActionUpdatePagerDutyAction includes the requested fields of the GraphQL type PagerDutyAction.
// The GraphQL type's documentation follows.
//
// A PagerDuty action.
type UpdatePagerDutyActionUpdatePagerDutyAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdatePagerDutyActionUpdatePagerDutyAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdatePagerDutyActionUpdatePagerDutyAction) GetTypename() *string { return v.Typename }

// UpdateS3ArchivingConfigurationResponse is returned by UpdateS3ArchivingConfiguration on success.
type UpdateS3ArchivingConfigurationResponse struct {
	// Configures S3 archiving for a repository. E.g. bucket and region.
	// Stability: Short-term
	S3ConfigureArchiving UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType `json:"s3ConfigureArchiving"`
}

// GetS3ConfigureArchiving returns UpdateS3ArchivingConfigurationResponse.S3ConfigureArchiving, and is useful for accessing the field via an interface.
func (v *UpdateS3ArchivingConfigurationResponse) GetS3ConfigureArchiving() UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType {
	return v.S3ConfigureArchiving
}

// UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType includes the requested fields of the GraphQL type BooleanResultType.
type UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType.Typename, and is useful for accessing the field via an interface.
func (v *UpdateS3ArchivingConfigurationS3ConfigureArchivingBooleanResultType) GetTypename() *string {
	return v.Typename
}

// UpdateScheduledSearchResponse is returned by UpdateScheduledSearch on success.
type UpdateScheduledSearchResponse struct {
	// Update a scheduled search.
	// Stability: Long-term
	UpdateScheduledSearch UpdateScheduledSearchUpdateScheduledSearch `json:"updateScheduledSearch"`
}

// GetUpdateScheduledSearch returns UpdateScheduledSearchResponse.UpdateScheduledSearch, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchResponse) GetUpdateScheduledSearch() UpdateScheduledSearchUpdateScheduledSearch {
	return v.UpdateScheduledSearch
}

// UpdateScheduledSearchUpdateScheduledSearch includes the requested fields of the GraphQL type ScheduledSearch.
// The GraphQL type's documentation follows.
//
// Information about a scheduled search
type UpdateScheduledSearchUpdateScheduledSearch struct {
	ScheduledSearchDetails `json:"-"`
}

// GetId returns UpdateScheduledSearchUpdateScheduledSearch.Id, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetId() string {
	return v.ScheduledSearchDetails.Id
}

// GetName returns UpdateScheduledSearchUpdateScheduledSearch.Name, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetName() string {
	return v.ScheduledSearchDetails.Name
}

// GetDescription returns UpdateScheduledSearchUpdateScheduledSearch.Description, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetDescription() *string {
	return v.ScheduledSearchDetails.Description
}

// GetQueryString returns UpdateScheduledSearchUpdateScheduledSearch.QueryString, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetQueryString() string {
	return v.ScheduledSearchDetails.QueryString
}

// GetStart returns UpdateScheduledSearchUpdateScheduledSearch.Start, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetStart() string {
	return v.ScheduledSearchDetails.Start
}

// GetEnd returns UpdateScheduledSearchUpdateScheduledSearch.End, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetEnd() string {
	return v.ScheduledSearchDetails.End
}

// GetTimeZone returns UpdateScheduledSearchUpdateScheduledSearch.TimeZone, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetTimeZone() string {
	return v.ScheduledSearchDetails.TimeZone
}

// GetSchedule returns UpdateScheduledSearchUpdateScheduledSearch.Schedule, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetSchedule() string {
	return v.ScheduledSearchDetails.Schedule
}

// GetBackfillLimit returns UpdateScheduledSearchUpdateScheduledSearch.BackfillLimit, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetBackfillLimit() int {
	return v.ScheduledSearchDetails.BackfillLimit
}

// GetEnabled returns UpdateScheduledSearchUpdateScheduledSearch.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetEnabled() bool {
	return v.ScheduledSearchDetails.Enabled
}

// GetLabels returns UpdateScheduledSearchUpdateScheduledSearch.Labels, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetLabels() []string {
	return v.ScheduledSearchDetails.Labels
}

// GetActionsV2 returns UpdateScheduledSearchUpdateScheduledSearch.ActionsV2, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetActionsV2() []SharedActionNameType {
	return v.ScheduledSearchDetails.ActionsV2
}

// GetQueryOwnership returns UpdateScheduledSearchUpdateScheduledSearch.QueryOwnership, and is useful for accessing the field via an interface.
func (v *UpdateScheduledSearchUpdateScheduledSearch) GetQueryOwnership() SharedQueryOwnershipType {
	return v.ScheduledSearchDetails.QueryOwnership
}

func (v *UpdateScheduledSearchUpdateScheduledSearch) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateScheduledSearchUpdateScheduledSearch
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateScheduledSearchUpdateScheduledSearch = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ScheduledSearchDetails)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateScheduledSearchUpdateScheduledSearch struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	QueryString string `json:"queryString"`

	Start string `json:"start"`

	End string `json:"end"`

	TimeZone string `json:"timeZone"`

	Schedule string `json:"schedule"`

	BackfillLimit int `json:"backfillLimit"`

	Enabled bool `json:"enabled"`

	Labels []string `json:"labels"`

	ActionsV2 []json.RawMessage `json:"actionsV2"`

	QueryOwnership json.RawMessage `json:"queryOwnership"`
}

func (v *UpdateScheduledSearchUpdateScheduledSearch) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateScheduledSearchUpdateScheduledSearch) __premarshalJSON() (*__premarshalUpdateScheduledSearchUpdateScheduledSearch, error) {
	var retval __premarshalUpdateScheduledSearchUpdateScheduledSearch

	retval.Id = v.ScheduledSearchDetails.Id
	retval.Name = v.ScheduledSearchDetails.Name
	retval.Description = v.ScheduledSearchDetails.Description
	retval.QueryString = v.ScheduledSearchDetails.QueryString
	retval.Start = v.ScheduledSearchDetails.Start
	retval.End = v.ScheduledSearchDetails.End
	retval.TimeZone = v.ScheduledSearchDetails.TimeZone
	retval.Schedule = v.ScheduledSearchDetails.Schedule
	retval.BackfillLimit = v.ScheduledSearchDetails.BackfillLimit
	retval.Enabled = v.ScheduledSearchDetails.Enabled
	retval.Labels = v.ScheduledSearchDetails.Labels
	{

		dst := &retval.ActionsV2
		src := v.ScheduledSearchDetails.ActionsV2
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSharedActionNameType(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateScheduledSearchUpdateScheduledSearch.ScheduledSearchDetails.ActionsV2: %w", err)
			}
		}
	}
	{

		dst := &retval.QueryOwnership
		src := v.ScheduledSearchDetails.QueryOwnership
		var err error
		*dst, err = __marshalSharedQueryOwnershipType(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateScheduledSearchUpdateScheduledSearch.ScheduledSearchDetails.QueryOwnership: %w", err)
		}
	}
	return &retval, nil
}

// UpdateSlackActionResponse is returned by UpdateSlackAction on success.
type UpdateSlackActionResponse struct {
	// Update a Slack action.
	// Stability: Long-term
	UpdateSlackAction UpdateSlackActionUpdateSlackAction `json:"updateSlackAction"`
}

// GetUpdateSlackAction returns UpdateSlackActionResponse.UpdateSlackAction, and is useful for accessing the field via an interface.
func (v *UpdateSlackActionResponse) GetUpdateSlackAction() UpdateSlackActionUpdateSlackAction {
	return v.UpdateSlackAction
}

// UpdateSlackActionUpdateSlackAction includes the requested fields of the GraphQL type SlackAction.
// The GraphQL type's documentation follows.
//
// A Slack action
type UpdateSlackActionUpdateSlackAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateSlackActionUpdateSlackAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateSlackActionUpdateSlackAction) GetTypename() *string { return v.Typename }

// UpdateSlackPostMessageActionResponse is returned by UpdateSlackPostMessageAction on success.
type UpdateSlackPostMessageActionResponse struct {
	// Update a post-message Slack action.
	// Stability: Long-term
	UpdateSlackPostMessageAction UpdateSlackPostMessageActionUpdateSlackPostMessageAction `json:"updateSlackPostMessageAction"`
}

// GetUpdateSlackPostMessageAction returns UpdateSlackPostMessageActionResponse.UpdateSlackPostMessageAction, and is useful for accessing the field via an interface.
func (v *UpdateSlackPostMessageActionResponse) GetUpdateSlackPostMessageAction() UpdateSlackPostMessageActionUpdateSlackPostMessageAction {
	return v.UpdateSlackPostMessageAction
}

// UpdateSlackPostMessageActionUpdateSlackPostMessageAction includes the requested fields of the GraphQL type SlackPostMessageAction.
// The GraphQL type's documentation follows.
//
// A slack post-message action.
type UpdateSlackPostMessageActionUpdateSlackPostMessageAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateSlackPostMessageActionUpdateSlackPostMessageAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateSlackPostMessageActionUpdateSlackPostMessageAction) GetTypename() *string {
	return v.Typename
}

// UpdateStorageBasedRetentionResponse is returned by UpdateStorageBasedRetention on success.
type UpdateStorageBasedRetentionResponse struct {
	// Update the retention policy of a repository.
	// Stability: Long-term
	UpdateRetention UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation `json:"updateRetention"`
}

// GetUpdateRetention returns UpdateStorageBasedRetentionResponse.UpdateRetention, and is useful for accessing the field via an interface.
func (v *UpdateStorageBasedRetentionResponse) GetUpdateRetention() UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation {
	return v.UpdateRetention
}

// UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation includes the requested fields of the GraphQL type UpdateRetentionMutation.
type UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation.Typename, and is useful for accessing the field via an interface.
func (v *UpdateStorageBasedRetentionUpdateRetentionUpdateRetentionMutation) GetTypename() *string {
	return v.Typename
}

// UpdateTimeBasedRetentionResponse is returned by UpdateTimeBasedRetention on success.
type UpdateTimeBasedRetentionResponse struct {
	// Update the retention policy of a repository.
	// Stability: Long-term
	UpdateRetention UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation `json:"updateRetention"`
}

// GetUpdateRetention returns UpdateTimeBasedRetentionResponse.UpdateRetention, and is useful for accessing the field via an interface.
func (v *UpdateTimeBasedRetentionResponse) GetUpdateRetention() UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation {
	return v.UpdateRetention
}

// UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation includes the requested fields of the GraphQL type UpdateRetentionMutation.
type UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimeBasedRetentionUpdateRetentionUpdateRetentionMutation) GetTypename() *string {
	return v.Typename
}

// UpdateVictorOpsActionResponse is returned by UpdateVictorOpsAction on success.
type UpdateVictorOpsActionResponse struct {
	// Update a VictorOps action.
	// Stability: Long-term
	UpdateVictorOpsAction UpdateVictorOpsActionUpdateVictorOpsAction `json:"updateVictorOpsAction"`
}

// GetUpdateVictorOpsAction returns UpdateVictorOpsActionResponse.UpdateVictorOpsAction, and is useful for accessing the field via an interface.
func (v *UpdateVictorOpsActionResponse) GetUpdateVictorOpsAction() UpdateVictorOpsActionUpdateVictorOpsAction {
	return v.UpdateVictorOpsAction
}

// UpdateVictorOpsActionUpdateVictorOpsAction includes the requested fields of the GraphQL type VictorOpsAction.
// The GraphQL type's documentation follows.
//
// A VictorOps action.
type UpdateVictorOpsActionUpdateVictorOpsAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateVictorOpsActionUpdateVictorOpsAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateVictorOpsActionUpdateVictorOpsAction) GetTypename() *string { return v.Typename }

// UpdateViewConnectionsResponse is returned by UpdateViewConnections on success.
type UpdateViewConnectionsResponse struct {
	// Update a view.
	// Stability: Long-term
	UpdateView UpdateViewConnectionsUpdateView `json:"updateView"`
}

// GetUpdateView returns UpdateViewConnectionsResponse.UpdateView, and is useful for accessing the field via an interface.
func (v *UpdateViewConnectionsResponse) GetUpdateView() UpdateViewConnectionsUpdateView {
	return v.UpdateView
}

// UpdateViewConnectionsUpdateView includes the requested fields of the GraphQL type View.
// The GraphQL type's documentation follows.
//
// Represents information about a view, pulling data from one or several repositories.
type UpdateViewConnectionsUpdateView struct {
	// Stability: Long-term
	Name string `json:"name"`
}

// GetName returns UpdateViewConnectionsUpdateView.Name, and is useful for accessing the field via an interface.
func (v *UpdateViewConnectionsUpdateView) GetName() string { return v.Name }

// UpdateWebhookActionResponse is returned by UpdateWebhookAction on success.
type UpdateWebhookActionResponse struct {
	// Update a webhook action.
	// Stability: Long-term
	UpdateWebhookAction UpdateWebhookActionUpdateWebhookAction `json:"updateWebhookAction"`
}

// GetUpdateWebhookAction returns UpdateWebhookActionResponse.UpdateWebhookAction, and is useful for accessing the field via an interface.
func (v *UpdateWebhookActionResponse) GetUpdateWebhookAction() UpdateWebhookActionUpdateWebhookAction {
	return v.UpdateWebhookAction
}

// UpdateWebhookActionUpdateWebhookAction includes the requested fields of the GraphQL type WebhookAction.
// The GraphQL type's documentation follows.
//
// A webhook action
type UpdateWebhookActionUpdateWebhookAction struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookActionUpdateWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookActionUpdateWebhookAction) GetTypename() *string { return v.Typename }

// UserDetails includes the GraphQL fields of User requested by the fragment UserDetails.
// The GraphQL type's documentation follows.
//
// A user profile.
type UserDetails struct {
	// Stability: Long-term
	Id string `json:"id"`
	// Stability: Long-term
	Username string `json:"username"`
	// Stability: Long-term
	IsRoot bool `json:"isRoot"`
}

// GetId returns UserDetails.Id, and is useful for accessing the field via an interface.
func (v *UserDetails) GetId() string { return v.Id }

// GetUsername returns UserDetails.Username, and is useful for accessing the field via an interface.
func (v *UserDetails) GetUsername() string { return v.Username }

// GetIsRoot returns UserDetails.IsRoot, and is useful for accessing the field via an interface.
func (v *UserDetails) GetIsRoot() bool { return v.IsRoot }

// The repositories this view will read from.
type ViewConnectionInput struct {
	// The repositories this view will read from.
	RepositoryName string `json:"repositoryName"`
	// The repositories this view will read from.
	Filter string `json:"filter"`
	// The repositories this view will read from.
	LanguageVersion *LanguageVersionEnum `json:"languageVersion"`
}

// GetRepositoryName returns ViewConnectionInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *ViewConnectionInput) GetRepositoryName() string { return v.RepositoryName }

// GetFilter returns ViewConnectionInput.Filter, and is useful for accessing the field via an interface.
func (v *ViewConnectionInput) GetFilter() string { return v.Filter }

// GetLanguageVersion returns ViewConnectionInput.LanguageVersion, and is useful for accessing the field via an interface.
func (v *ViewConnectionInput) GetLanguageVersion() *LanguageVersionEnum { return v.LanguageVersion }

// __AddIngestTokenInput is used internally by genqlient
type __AddIngestTokenInput struct {
	RepositoryName string  `json:"RepositoryName"`
	Name           string  `json:"Name"`
	ParserName     *string `json:"ParserName"`
}

// GetRepositoryName returns __AddIngestTokenInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__AddIngestTokenInput) GetRepositoryName() string { return v.RepositoryName }

// GetName returns __AddIngestTokenInput.Name, and is useful for accessing the field via an interface.
func (v *__AddIngestTokenInput) GetName() string { return v.Name }

// GetParserName returns __AddIngestTokenInput.ParserName, and is useful for accessing the field via an interface.
func (v *__AddIngestTokenInput) GetParserName() *string { return v.ParserName }

// __AddUserInput is used internally by genqlient
type __AddUserInput struct {
	Username string `json:"Username"`
	IsRoot   *bool  `json:"IsRoot"`
}

// GetUsername returns __AddUserInput.Username, and is useful for accessing the field via an interface.
func (v *__AddUserInput) GetUsername() string { return v.Username }

// GetIsRoot returns __AddUserInput.IsRoot, and is useful for accessing the field via an interface.
func (v *__AddUserInput) GetIsRoot() *bool { return v.IsRoot }

// __AssignParserToIngestTokenInput is used internally by genqlient
type __AssignParserToIngestTokenInput struct {
	RepositoryName  string `json:"RepositoryName"`
	IngestTokenName string `json:"IngestTokenName"`
	ParserName      string `json:"ParserName"`
}

// GetRepositoryName returns __AssignParserToIngestTokenInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__AssignParserToIngestTokenInput) GetRepositoryName() string { return v.RepositoryName }

// GetIngestTokenName returns __AssignParserToIngestTokenInput.IngestTokenName, and is useful for accessing the field via an interface.
func (v *__AssignParserToIngestTokenInput) GetIngestTokenName() string { return v.IngestTokenName }

// GetParserName returns __AssignParserToIngestTokenInput.ParserName, and is useful for accessing the field via an interface.
func (v *__AssignParserToIngestTokenInput) GetParserName() string { return v.ParserName }

// __CreateAggregateAlertInput is used internally by genqlient
type __CreateAggregateAlertInput struct {
	SearchDomainName      string             `json:"SearchDomainName"`
	Name                  string             `json:"Name"`
	Description           *string            `json:"Description"`
	QueryString           string             `json:"QueryString"`
	SearchIntervalSeconds int64              `json:"SearchIntervalSeconds"`
	ActionIdsOrNames      []string           `json:"ActionIdsOrNames"`
	Labels                []string           `json:"Labels"`
	Enabled               bool               `json:"Enabled"`
	ThrottleField         *string            `json:"ThrottleField"`
	ThrottleTimeSeconds   int64              `json:"ThrottleTimeSeconds"`
	TriggerMode           TriggerMode        `json:"TriggerMode"`
	QueryTimestampMode    QueryTimestampType `json:"QueryTimestampMode"`
	QueryOwnershipType    QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __CreateAggregateAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetName returns __CreateAggregateAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetName() string { return v.Name }

// GetDescription returns __CreateAggregateAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __CreateAggregateAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetQueryString() string { return v.QueryString }

// GetSearchIntervalSeconds returns __CreateAggregateAlertInput.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetSearchIntervalSeconds() int64 {
	return v.SearchIntervalSeconds
}

// GetActionIdsOrNames returns __CreateAggregateAlertInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __CreateAggregateAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetLabels() []string { return v.Labels }

// GetEnabled returns __CreateAggregateAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetEnabled() bool { return v.Enabled }

// GetThrottleField returns __CreateAggregateAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetThrottleField() *string { return v.ThrottleField }

// GetThrottleTimeSeconds returns __CreateAggregateAlertInput.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetThrottleTimeSeconds() int64 { return v.ThrottleTimeSeconds }

// GetTriggerMode returns __CreateAggregateAlertInput.TriggerMode, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetTriggerMode() TriggerMode { return v.TriggerMode }

// GetQueryTimestampMode returns __CreateAggregateAlertInput.QueryTimestampMode, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetQueryTimestampMode() QueryTimestampType {
	return v.QueryTimestampMode
}

// GetQueryOwnershipType returns __CreateAggregateAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__CreateAggregateAlertInput) GetQueryOwnershipType() QueryOwnershipType {
	return v.QueryOwnershipType
}

// __CreateAlertInput is used internally by genqlient
type __CreateAlertInput struct {
	SearchDomainName   string              `json:"SearchDomainName"`
	Name               string              `json:"Name"`
	Description        *string             `json:"Description"`
	QueryString        string              `json:"QueryString"`
	QueryStart         string              `json:"QueryStart"`
	ThrottleTimeMillis int64               `json:"ThrottleTimeMillis"`
	Enabled            *bool               `json:"Enabled"`
	Actions            []string            `json:"Actions"`
	Labels             []string            `json:"Labels"`
	QueryOwnershipType *QueryOwnershipType `json:"QueryOwnershipType"`
	ThrottleField      *string             `json:"ThrottleField"`
}

// GetSearchDomainName returns __CreateAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetName returns __CreateAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetName() string { return v.Name }

// GetDescription returns __CreateAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __CreateAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetQueryString() string { return v.QueryString }

// GetQueryStart returns __CreateAlertInput.QueryStart, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetQueryStart() string { return v.QueryStart }

// GetThrottleTimeMillis returns __CreateAlertInput.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetThrottleTimeMillis() int64 { return v.ThrottleTimeMillis }

// GetEnabled returns __CreateAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetEnabled() *bool { return v.Enabled }

// GetActions returns __CreateAlertInput.Actions, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetActions() []string { return v.Actions }

// GetLabels returns __CreateAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetLabels() []string { return v.Labels }

// GetQueryOwnershipType returns __CreateAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetQueryOwnershipType() *QueryOwnershipType { return v.QueryOwnershipType }

// GetThrottleField returns __CreateAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__CreateAlertInput) GetThrottleField() *string { return v.ThrottleField }

// __CreateEmailActionInput is used internally by genqlient
type __CreateEmailActionInput struct {
	SearchDomainName string   `json:"SearchDomainName"`
	ActionName       string   `json:"ActionName"`
	Recipients       []string `json:"Recipients"`
	SubjectTemplate  *string  `json:"SubjectTemplate"`
	BodyTemplate     *string  `json:"BodyTemplate"`
	UseProxy         bool     `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateEmailActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateEmailActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetActionName() string { return v.ActionName }

// GetRecipients returns __CreateEmailActionInput.Recipients, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetRecipients() []string { return v.Recipients }

// GetSubjectTemplate returns __CreateEmailActionInput.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetSubjectTemplate() *string { return v.SubjectTemplate }

// GetBodyTemplate returns __CreateEmailActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

// GetUseProxy returns __CreateEmailActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateEmailActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreateFilterAlertInput is used internally by genqlient
type __CreateFilterAlertInput struct {
	SearchDomainName    string             `json:"SearchDomainName"`
	Name                string             `json:"Name"`
	Description         *string            `json:"Description"`
	QueryString         string             `json:"QueryString"`
	ActionIdsOrNames    []string           `json:"ActionIdsOrNames"`
	Labels              []string           `json:"Labels"`
	Enabled             bool               `json:"Enabled"`
	ThrottleField       *string            `json:"ThrottleField"`
	ThrottleTimeSeconds int64              `json:"ThrottleTimeSeconds"`
	QueryOwnershipType  QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __CreateFilterAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetName returns __CreateFilterAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetName() string { return v.Name }

// GetDescription returns __CreateFilterAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __CreateFilterAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetQueryString() string { return v.QueryString }

// GetActionIdsOrNames returns __CreateFilterAlertInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __CreateFilterAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetLabels() []string { return v.Labels }

// GetEnabled returns __CreateFilterAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetEnabled() bool { return v.Enabled }

// GetThrottleField returns __CreateFilterAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetThrottleField() *string { return v.ThrottleField }

// GetThrottleTimeSeconds returns __CreateFilterAlertInput.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetThrottleTimeSeconds() int64 { return v.ThrottleTimeSeconds }

// GetQueryOwnershipType returns __CreateFilterAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__CreateFilterAlertInput) GetQueryOwnershipType() QueryOwnershipType {
	return v.QueryOwnershipType
}

// __CreateHumioRepoActionInput is used internally by genqlient
type __CreateHumioRepoActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionName       string `json:"ActionName"`
	IngestToken      string `json:"IngestToken"`
}

// GetSearchDomainName returns __CreateHumioRepoActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateHumioRepoActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateHumioRepoActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateHumioRepoActionInput) GetActionName() string { return v.ActionName }

// GetIngestToken returns __CreateHumioRepoActionInput.IngestToken, and is useful for accessing the field via an interface.
func (v *__CreateHumioRepoActionInput) GetIngestToken() string { return v.IngestToken }

// __CreateOpsGenieActionInput is used internally by genqlient
type __CreateOpsGenieActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionName       string `json:"ActionName"`
	ApiUrl           string `json:"ApiUrl"`
	GenieKey         string `json:"GenieKey"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateOpsGenieActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateOpsGenieActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateOpsGenieActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateOpsGenieActionInput) GetActionName() string { return v.ActionName }

// GetApiUrl returns __CreateOpsGenieActionInput.ApiUrl, and is useful for accessing the field via an interface.
func (v *__CreateOpsGenieActionInput) GetApiUrl() string { return v.ApiUrl }

// GetGenieKey returns __CreateOpsGenieActionInput.GenieKey, and is useful for accessing the field via an interface.
func (v *__CreateOpsGenieActionInput) GetGenieKey() string { return v.GenieKey }

// GetUseProxy returns __CreateOpsGenieActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateOpsGenieActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreatePagerDutyActionInput is used internally by genqlient
type __CreatePagerDutyActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionName       string `json:"ActionName"`
	Severity         string `json:"Severity"`
	RoutingKey       string `json:"RoutingKey"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreatePagerDutyActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreatePagerDutyActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreatePagerDutyActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreatePagerDutyActionInput) GetActionName() string { return v.ActionName }

// GetSeverity returns __CreatePagerDutyActionInput.Severity, and is useful for accessing the field via an interface.
func (v *__CreatePagerDutyActionInput) GetSeverity() string { return v.Severity }

// GetRoutingKey returns __CreatePagerDutyActionInput.RoutingKey, and is useful for accessing the field via an interface.
func (v *__CreatePagerDutyActionInput) GetRoutingKey() string { return v.RoutingKey }

// GetUseProxy returns __CreatePagerDutyActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreatePagerDutyActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreateParserOrUpdateInput is used internally by genqlient
type __CreateParserOrUpdateInput struct {
	RepositoryName                 string                `json:"RepositoryName"`
	Name                           string                `json:"Name"`
	Script                         string                `json:"Script"`
	TestCases                      []ParserTestCaseInput `json:"TestCases"`
	FieldsToTag                    []string              `json:"FieldsToTag"`
	FieldsToBeRemovedBeforeParsing []string              `json:"FieldsToBeRemovedBeforeParsing"`
	AllowOverridingExistingParser  bool                  `json:"AllowOverridingExistingParser"`
}

// GetRepositoryName returns __CreateParserOrUpdateInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetRepositoryName() string { return v.RepositoryName }

// GetName returns __CreateParserOrUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetName() string { return v.Name }

// GetScript returns __CreateParserOrUpdateInput.Script, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetScript() string { return v.Script }

// GetTestCases returns __CreateParserOrUpdateInput.TestCases, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetTestCases() []ParserTestCaseInput { return v.TestCases }

// GetFieldsToTag returns __CreateParserOrUpdateInput.FieldsToTag, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetFieldsToTag() []string { return v.FieldsToTag }

// GetFieldsToBeRemovedBeforeParsing returns __CreateParserOrUpdateInput.FieldsToBeRemovedBeforeParsing, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetFieldsToBeRemovedBeforeParsing() []string {
	return v.FieldsToBeRemovedBeforeParsing
}

// GetAllowOverridingExistingParser returns __CreateParserOrUpdateInput.AllowOverridingExistingParser, and is useful for accessing the field via an interface.
func (v *__CreateParserOrUpdateInput) GetAllowOverridingExistingParser() bool {
	return v.AllowOverridingExistingParser
}

// __CreateRepositoryInput is used internally by genqlient
type __CreateRepositoryInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __CreateRepositoryInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__CreateRepositoryInput) GetRepositoryName() string { return v.RepositoryName }

// __CreateScheduledSearchInput is used internally by genqlient
type __CreateScheduledSearchInput struct {
	SearchDomainName   string              `json:"SearchDomainName"`
	Name               string              `json:"Name"`
	Description        *string             `json:"Description"`
	QueryString        string              `json:"QueryString"`
	QueryStart         string              `json:"QueryStart"`
	QueryEnd           string              `json:"QueryEnd"`
	Schedule           string              `json:"Schedule"`
	TimeZone           string              `json:"TimeZone"`
	BackfillLimit      int                 `json:"BackfillLimit"`
	Enabled            bool                `json:"Enabled"`
	ActionIdsOrNames   []string            `json:"ActionIdsOrNames"`
	Labels             []string            `json:"Labels"`
	QueryOwnershipType *QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __CreateScheduledSearchInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetName returns __CreateScheduledSearchInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetName() string { return v.Name }

// GetDescription returns __CreateScheduledSearchInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetDescription() *string { return v.Description }

// GetQueryString returns __CreateScheduledSearchInput.QueryString, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetQueryString() string { return v.QueryString }

// GetQueryStart returns __CreateScheduledSearchInput.QueryStart, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetQueryStart() string { return v.QueryStart }

// GetQueryEnd returns __CreateScheduledSearchInput.QueryEnd, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetQueryEnd() string { return v.QueryEnd }

// GetSchedule returns __CreateScheduledSearchInput.Schedule, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetSchedule() string { return v.Schedule }

// GetTimeZone returns __CreateScheduledSearchInput.TimeZone, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetTimeZone() string { return v.TimeZone }

// GetBackfillLimit returns __CreateScheduledSearchInput.BackfillLimit, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetBackfillLimit() int { return v.BackfillLimit }

// GetEnabled returns __CreateScheduledSearchInput.Enabled, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetEnabled() bool { return v.Enabled }

// GetActionIdsOrNames returns __CreateScheduledSearchInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __CreateScheduledSearchInput.Labels, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetLabels() []string { return v.Labels }

// GetQueryOwnershipType returns __CreateScheduledSearchInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__CreateScheduledSearchInput) GetQueryOwnershipType() *QueryOwnershipType {
	return v.QueryOwnershipType
}

// __CreateSlackActionInput is used internally by genqlient
type __CreateSlackActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionName       string                 `json:"ActionName"`
	Fields           []SlackFieldEntryInput `json:"Fields"`
	Url              string                 `json:"Url"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateSlackActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateSlackActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateSlackActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateSlackActionInput) GetActionName() string { return v.ActionName }

// GetFields returns __CreateSlackActionInput.Fields, and is useful for accessing the field via an interface.
func (v *__CreateSlackActionInput) GetFields() []SlackFieldEntryInput { return v.Fields }

// GetUrl returns __CreateSlackActionInput.Url, and is useful for accessing the field via an interface.
func (v *__CreateSlackActionInput) GetUrl() string { return v.Url }

// GetUseProxy returns __CreateSlackActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateSlackActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreateSlackPostMessageActionInput is used internally by genqlient
type __CreateSlackPostMessageActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionName       string                 `json:"ActionName"`
	ApiToken         string                 `json:"ApiToken"`
	Channels         []string               `json:"Channels"`
	Fields           []SlackFieldEntryInput `json:"Fields"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateSlackPostMessageActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateSlackPostMessageActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetActionName() string { return v.ActionName }

// GetApiToken returns __CreateSlackPostMessageActionInput.ApiToken, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetApiToken() string { return v.ApiToken }

// GetChannels returns __CreateSlackPostMessageActionInput.Channels, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetChannels() []string { return v.Channels }

// GetFields returns __CreateSlackPostMessageActionInput.Fields, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetFields() []SlackFieldEntryInput { return v.Fields }

// GetUseProxy returns __CreateSlackPostMessageActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateSlackPostMessageActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreateVictorOpsActionInput is used internally by genqlient
type __CreateVictorOpsActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionName       string `json:"ActionName"`
	MessageType      string `json:"MessageType"`
	NotifyUrl        string `json:"NotifyUrl"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateVictorOpsActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateVictorOpsActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateVictorOpsActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateVictorOpsActionInput) GetActionName() string { return v.ActionName }

// GetMessageType returns __CreateVictorOpsActionInput.MessageType, and is useful for accessing the field via an interface.
func (v *__CreateVictorOpsActionInput) GetMessageType() string { return v.MessageType }

// GetNotifyUrl returns __CreateVictorOpsActionInput.NotifyUrl, and is useful for accessing the field via an interface.
func (v *__CreateVictorOpsActionInput) GetNotifyUrl() string { return v.NotifyUrl }

// GetUseProxy returns __CreateVictorOpsActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateVictorOpsActionInput) GetUseProxy() bool { return v.UseProxy }

// __CreateViewInput is used internally by genqlient
type __CreateViewInput struct {
	ViewName    string                `json:"ViewName"`
	Description *string               `json:"Description"`
	Connections []ViewConnectionInput `json:"Connections"`
}

// GetViewName returns __CreateViewInput.ViewName, and is useful for accessing the field via an interface.
func (v *__CreateViewInput) GetViewName() string { return v.ViewName }

// GetDescription returns __CreateViewInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateViewInput) GetDescription() *string { return v.Description }

// GetConnections returns __CreateViewInput.Connections, and is useful for accessing the field via an interface.
func (v *__CreateViewInput) GetConnections() []ViewConnectionInput { return v.Connections }

// __CreateWebhookActionInput is used internally by genqlient
type __CreateWebhookActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionName       string                 `json:"ActionName"`
	Url              string                 `json:"Url"`
	Method           string                 `json:"Method"`
	Headers          []HttpHeaderEntryInput `json:"Headers"`
	BodyTemplate     string                 `json:"BodyTemplate"`
	IgnoreSSL        bool                   `json:"IgnoreSSL"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __CreateWebhookActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionName returns __CreateWebhookActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetActionName() string { return v.ActionName }

// GetUrl returns __CreateWebhookActionInput.Url, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetUrl() string { return v.Url }

// GetMethod returns __CreateWebhookActionInput.Method, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetMethod() string { return v.Method }

// GetHeaders returns __CreateWebhookActionInput.Headers, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetHeaders() []HttpHeaderEntryInput { return v.Headers }

// GetBodyTemplate returns __CreateWebhookActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetBodyTemplate() string { return v.BodyTemplate }

// GetIgnoreSSL returns __CreateWebhookActionInput.IgnoreSSL, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetIgnoreSSL() bool { return v.IgnoreSSL }

// GetUseProxy returns __CreateWebhookActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__CreateWebhookActionInput) GetUseProxy() bool { return v.UseProxy }

// __DeleteActionByIDInput is used internally by genqlient
type __DeleteActionByIDInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
}

// GetSearchDomainName returns __DeleteActionByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteActionByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __DeleteActionByIDInput.ActionID, and is useful for accessing the field via an interface.
func (v *__DeleteActionByIDInput) GetActionID() string { return v.ActionID }

// __DeleteAggregateAlertInput is used internally by genqlient
type __DeleteAggregateAlertInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	AggregateAlertID string `json:"AggregateAlertID"`
}

// GetSearchDomainName returns __DeleteAggregateAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteAggregateAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetAggregateAlertID returns __DeleteAggregateAlertInput.AggregateAlertID, and is useful for accessing the field via an interface.
func (v *__DeleteAggregateAlertInput) GetAggregateAlertID() string { return v.AggregateAlertID }

// __DeleteAlertByIDInput is used internally by genqlient
type __DeleteAlertByIDInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	AlertID          string `json:"AlertID"`
}

// GetSearchDomainName returns __DeleteAlertByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteAlertByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetAlertID returns __DeleteAlertByIDInput.AlertID, and is useful for accessing the field via an interface.
func (v *__DeleteAlertByIDInput) GetAlertID() string { return v.AlertID }

// __DeleteFilterAlertInput is used internally by genqlient
type __DeleteFilterAlertInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	FilterAlertID    string `json:"FilterAlertID"`
}

// GetSearchDomainName returns __DeleteFilterAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteFilterAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetFilterAlertID returns __DeleteFilterAlertInput.FilterAlertID, and is useful for accessing the field via an interface.
func (v *__DeleteFilterAlertInput) GetFilterAlertID() string { return v.FilterAlertID }

// __DeleteParserByIDInput is used internally by genqlient
type __DeleteParserByIDInput struct {
	RepositoryName string `json:"RepositoryName"`
	ParserID       string `json:"ParserID"`
}

// GetRepositoryName returns __DeleteParserByIDInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__DeleteParserByIDInput) GetRepositoryName() string { return v.RepositoryName }

// GetParserID returns __DeleteParserByIDInput.ParserID, and is useful for accessing the field via an interface.
func (v *__DeleteParserByIDInput) GetParserID() string { return v.ParserID }

// __DeleteScheduledSearchByIDInput is used internally by genqlient
type __DeleteScheduledSearchByIDInput struct {
	SearchDomainName  string `json:"SearchDomainName"`
	ScheduledSearchID string `json:"ScheduledSearchID"`
}

// GetSearchDomainName returns __DeleteScheduledSearchByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteScheduledSearchByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetScheduledSearchID returns __DeleteScheduledSearchByIDInput.ScheduledSearchID, and is useful for accessing the field via an interface.
func (v *__DeleteScheduledSearchByIDInput) GetScheduledSearchID() string { return v.ScheduledSearchID }

// __DeleteSearchDomainInput is used internally by genqlient
type __DeleteSearchDomainInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	DeleteMessage    string `json:"DeleteMessage"`
}

// GetSearchDomainName returns __DeleteSearchDomainInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__DeleteSearchDomainInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetDeleteMessage returns __DeleteSearchDomainInput.DeleteMessage, and is useful for accessing the field via an interface.
func (v *__DeleteSearchDomainInput) GetDeleteMessage() string { return v.DeleteMessage }

// __DisableS3ArchivingInput is used internally by genqlient
type __DisableS3ArchivingInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __DisableS3ArchivingInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__DisableS3ArchivingInput) GetRepositoryName() string { return v.RepositoryName }

// __EnableS3ArchivingInput is used internally by genqlient
type __EnableS3ArchivingInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __EnableS3ArchivingInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__EnableS3ArchivingInput) GetRepositoryName() string { return v.RepositoryName }

// __GetActionByIDInput is used internally by genqlient
type __GetActionByIDInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
}

// GetSearchDomainName returns __GetActionByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__GetActionByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __GetActionByIDInput.ActionID, and is useful for accessing the field via an interface.
func (v *__GetActionByIDInput) GetActionID() string { return v.ActionID }

// __GetAggregateAlertByIDInput is used internally by genqlient
type __GetAggregateAlertByIDInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	AggregateAlertID string `json:"AggregateAlertID"`
}

// GetSearchDomainName returns __GetAggregateAlertByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__GetAggregateAlertByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetAggregateAlertID returns __GetAggregateAlertByIDInput.AggregateAlertID, and is useful for accessing the field via an interface.
func (v *__GetAggregateAlertByIDInput) GetAggregateAlertID() string { return v.AggregateAlertID }

// __GetFilterAlertByIDInput is used internally by genqlient
type __GetFilterAlertByIDInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	FilterAlertID    string `json:"FilterAlertID"`
}

// GetSearchDomainName returns __GetFilterAlertByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__GetFilterAlertByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetFilterAlertID returns __GetFilterAlertByIDInput.FilterAlertID, and is useful for accessing the field via an interface.
func (v *__GetFilterAlertByIDInput) GetFilterAlertID() string { return v.FilterAlertID }

// __GetParserByIDInput is used internally by genqlient
type __GetParserByIDInput struct {
	RepositoryName string `json:"RepositoryName"`
	ParserID       string `json:"ParserID"`
}

// GetRepositoryName returns __GetParserByIDInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__GetParserByIDInput) GetRepositoryName() string { return v.RepositoryName }

// GetParserID returns __GetParserByIDInput.ParserID, and is useful for accessing the field via an interface.
func (v *__GetParserByIDInput) GetParserID() string { return v.ParserID }

// __GetRepositoryInput is used internally by genqlient
type __GetRepositoryInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __GetRepositoryInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__GetRepositoryInput) GetRepositoryName() string { return v.RepositoryName }

// __GetScheduledSearchByIDInput is used internally by genqlient
type __GetScheduledSearchByIDInput struct {
	SearchDomainName  string `json:"SearchDomainName"`
	ScheduledSearchID string `json:"ScheduledSearchID"`
}

// GetSearchDomainName returns __GetScheduledSearchByIDInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__GetScheduledSearchByIDInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetScheduledSearchID returns __GetScheduledSearchByIDInput.ScheduledSearchID, and is useful for accessing the field via an interface.
func (v *__GetScheduledSearchByIDInput) GetScheduledSearchID() string { return v.ScheduledSearchID }

// __GetSearchDomainInput is used internally by genqlient
type __GetSearchDomainInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __GetSearchDomainInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__GetSearchDomainInput) GetSearchDomainName() string { return v.SearchDomainName }

// __GetUsersByUsernameInput is used internally by genqlient
type __GetUsersByUsernameInput struct {
	Username string `json:"Username"`
}

// GetUsername returns __GetUsersByUsernameInput.Username, and is useful for accessing the field via an interface.
func (v *__GetUsersByUsernameInput) GetUsername() string { return v.Username }

// __ListActionsInput is used internally by genqlient
type __ListActionsInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __ListActionsInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__ListActionsInput) GetSearchDomainName() string { return v.SearchDomainName }

// __ListAggregateAlertsInput is used internally by genqlient
type __ListAggregateAlertsInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __ListAggregateAlertsInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__ListAggregateAlertsInput) GetSearchDomainName() string { return v.SearchDomainName }

// __ListAlertsInput is used internally by genqlient
type __ListAlertsInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __ListAlertsInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__ListAlertsInput) GetSearchDomainName() string { return v.SearchDomainName }

// __ListFilterAlertsInput is used internally by genqlient
type __ListFilterAlertsInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __ListFilterAlertsInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__ListFilterAlertsInput) GetSearchDomainName() string { return v.SearchDomainName }

// __ListIngestTokensInput is used internally by genqlient
type __ListIngestTokensInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __ListIngestTokensInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__ListIngestTokensInput) GetRepositoryName() string { return v.RepositoryName }

// __ListParsersInput is used internally by genqlient
type __ListParsersInput struct {
	RepositoryName string `json:"RepositoryName"`
}

// GetRepositoryName returns __ListParsersInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__ListParsersInput) GetRepositoryName() string { return v.RepositoryName }

// __ListScheduledSearchesInput is used internally by genqlient
type __ListScheduledSearchesInput struct {
	SearchDomainName string `json:"SearchDomainName"`
}

// GetSearchDomainName returns __ListScheduledSearchesInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__ListScheduledSearchesInput) GetSearchDomainName() string { return v.SearchDomainName }

// __RefreshClusterManagementStatsInput is used internally by genqlient
type __RefreshClusterManagementStatsInput struct {
	Vhost int `json:"Vhost"`
}

// GetVhost returns __RefreshClusterManagementStatsInput.Vhost, and is useful for accessing the field via an interface.
func (v *__RefreshClusterManagementStatsInput) GetVhost() int { return v.Vhost }

// __RemoveIngestTokenInput is used internally by genqlient
type __RemoveIngestTokenInput struct {
	RepositoryName string `json:"RepositoryName"`
	Name           string `json:"Name"`
}

// GetRepositoryName returns __RemoveIngestTokenInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__RemoveIngestTokenInput) GetRepositoryName() string { return v.RepositoryName }

// GetName returns __RemoveIngestTokenInput.Name, and is useful for accessing the field via an interface.
func (v *__RemoveIngestTokenInput) GetName() string { return v.Name }

// __RotateTokenByIDInput is used internally by genqlient
type __RotateTokenByIDInput struct {
	TokenID string `json:"TokenID"`
}

// GetTokenID returns __RotateTokenByIDInput.TokenID, and is useful for accessing the field via an interface.
func (v *__RotateTokenByIDInput) GetTokenID() string { return v.TokenID }

// __SetAutomaticSearchingInput is used internally by genqlient
type __SetAutomaticSearchingInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	AutomaticSearch  bool   `json:"AutomaticSearch"`
}

// GetSearchDomainName returns __SetAutomaticSearchingInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__SetAutomaticSearchingInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetAutomaticSearch returns __SetAutomaticSearchingInput.AutomaticSearch, and is useful for accessing the field via an interface.
func (v *__SetAutomaticSearchingInput) GetAutomaticSearch() bool { return v.AutomaticSearch }

// __SetIsBeingEvictedInput is used internally by genqlient
type __SetIsBeingEvictedInput struct {
	Vhost          int  `json:"Vhost"`
	IsBeingEvicted bool `json:"IsBeingEvicted"`
}

// GetVhost returns __SetIsBeingEvictedInput.Vhost, and is useful for accessing the field via an interface.
func (v *__SetIsBeingEvictedInput) GetVhost() int { return v.Vhost }

// GetIsBeingEvicted returns __SetIsBeingEvictedInput.IsBeingEvicted, and is useful for accessing the field via an interface.
func (v *__SetIsBeingEvictedInput) GetIsBeingEvicted() bool { return v.IsBeingEvicted }

// __UnassignParserToIngestTokenInput is used internally by genqlient
type __UnassignParserToIngestTokenInput struct {
	RepositoryName  string `json:"RepositoryName"`
	IngestTokenName string `json:"IngestTokenName"`
}

// GetRepositoryName returns __UnassignParserToIngestTokenInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__UnassignParserToIngestTokenInput) GetRepositoryName() string { return v.RepositoryName }

// GetIngestTokenName returns __UnassignParserToIngestTokenInput.IngestTokenName, and is useful for accessing the field via an interface.
func (v *__UnassignParserToIngestTokenInput) GetIngestTokenName() string { return v.IngestTokenName }

// __UnregisterClusterNodeInput is used internally by genqlient
type __UnregisterClusterNodeInput struct {
	NodeId int  `json:"NodeId"`
	Force  bool `json:"Force"`
}

// GetNodeId returns __UnregisterClusterNodeInput.NodeId, and is useful for accessing the field via an interface.
func (v *__UnregisterClusterNodeInput) GetNodeId() int { return v.NodeId }

// GetForce returns __UnregisterClusterNodeInput.Force, and is useful for accessing the field via an interface.
func (v *__UnregisterClusterNodeInput) GetForce() bool { return v.Force }

// __UpdateAggregateAlertInput is used internally by genqlient
type __UpdateAggregateAlertInput struct {
	SearchDomainName      string             `json:"SearchDomainName"`
	ID                    string             `json:"ID"`
	Name                  string             `json:"Name"`
	Description           *string            `json:"Description"`
	QueryString           string             `json:"QueryString"`
	SearchIntervalSeconds int64              `json:"SearchIntervalSeconds"`
	ActionIdsOrNames      []string           `json:"ActionIdsOrNames"`
	Labels                []string           `json:"Labels"`
	Enabled               bool               `json:"Enabled"`
	ThrottleField         *string            `json:"ThrottleField"`
	ThrottleTimeSeconds   int64              `json:"ThrottleTimeSeconds"`
	TriggerMode           TriggerMode        `json:"TriggerMode"`
	QueryTimestampMode    QueryTimestampType `json:"QueryTimestampMode"`
	QueryOwnershipType    QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __UpdateAggregateAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetID returns __UpdateAggregateAlertInput.ID, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetID() string { return v.ID }

// GetName returns __UpdateAggregateAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetName() string { return v.Name }

// GetDescription returns __UpdateAggregateAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __UpdateAggregateAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetQueryString() string { return v.QueryString }

// GetSearchIntervalSeconds returns __UpdateAggregateAlertInput.SearchIntervalSeconds, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetSearchIntervalSeconds() int64 {
	return v.SearchIntervalSeconds
}

// GetActionIdsOrNames returns __UpdateAggregateAlertInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __UpdateAggregateAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetLabels() []string { return v.Labels }

// GetEnabled returns __UpdateAggregateAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetEnabled() bool { return v.Enabled }

// GetThrottleField returns __UpdateAggregateAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetThrottleField() *string { return v.ThrottleField }

// GetThrottleTimeSeconds returns __UpdateAggregateAlertInput.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetThrottleTimeSeconds() int64 { return v.ThrottleTimeSeconds }

// GetTriggerMode returns __UpdateAggregateAlertInput.TriggerMode, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetTriggerMode() TriggerMode { return v.TriggerMode }

// GetQueryTimestampMode returns __UpdateAggregateAlertInput.QueryTimestampMode, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetQueryTimestampMode() QueryTimestampType {
	return v.QueryTimestampMode
}

// GetQueryOwnershipType returns __UpdateAggregateAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__UpdateAggregateAlertInput) GetQueryOwnershipType() QueryOwnershipType {
	return v.QueryOwnershipType
}

// __UpdateAlertInput is used internally by genqlient
type __UpdateAlertInput struct {
	SearchDomainName   string              `json:"SearchDomainName"`
	AlertID            string              `json:"AlertID"`
	Name               string              `json:"Name"`
	Description        *string             `json:"Description"`
	QueryString        string              `json:"QueryString"`
	QueryStart         string              `json:"QueryStart"`
	ThrottleTimeMillis int64               `json:"ThrottleTimeMillis"`
	Enabled            bool                `json:"Enabled"`
	Actions            []string            `json:"Actions"`
	Labels             []string            `json:"Labels"`
	QueryOwnershipType *QueryOwnershipType `json:"QueryOwnershipType"`
	ThrottleField      *string             `json:"ThrottleField"`
}

// GetSearchDomainName returns __UpdateAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetAlertID returns __UpdateAlertInput.AlertID, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetAlertID() string { return v.AlertID }

// GetName returns __UpdateAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetName() string { return v.Name }

// GetDescription returns __UpdateAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __UpdateAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetQueryString() string { return v.QueryString }

// GetQueryStart returns __UpdateAlertInput.QueryStart, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetQueryStart() string { return v.QueryStart }

// GetThrottleTimeMillis returns __UpdateAlertInput.ThrottleTimeMillis, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetThrottleTimeMillis() int64 { return v.ThrottleTimeMillis }

// GetEnabled returns __UpdateAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetEnabled() bool { return v.Enabled }

// GetActions returns __UpdateAlertInput.Actions, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetActions() []string { return v.Actions }

// GetLabels returns __UpdateAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetLabels() []string { return v.Labels }

// GetQueryOwnershipType returns __UpdateAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetQueryOwnershipType() *QueryOwnershipType { return v.QueryOwnershipType }

// GetThrottleField returns __UpdateAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__UpdateAlertInput) GetThrottleField() *string { return v.ThrottleField }

// __UpdateDescriptionForSearchDomainInput is used internally by genqlient
type __UpdateDescriptionForSearchDomainInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	NewDescription   string `json:"NewDescription"`
}

// GetSearchDomainName returns __UpdateDescriptionForSearchDomainInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateDescriptionForSearchDomainInput) GetSearchDomainName() string {
	return v.SearchDomainName
}

// GetNewDescription returns __UpdateDescriptionForSearchDomainInput.NewDescription, and is useful for accessing the field via an interface.
func (v *__UpdateDescriptionForSearchDomainInput) GetNewDescription() string { return v.NewDescription }

// __UpdateEmailActionInput is used internally by genqlient
type __UpdateEmailActionInput struct {
	SearchDomainName string   `json:"SearchDomainName"`
	ActionID         string   `json:"ActionID"`
	ActionName       string   `json:"ActionName"`
	Recipients       []string `json:"Recipients"`
	SubjectTemplate  *string  `json:"SubjectTemplate"`
	BodyTemplate     *string  `json:"BodyTemplate"`
	UseProxy         bool     `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateEmailActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateEmailActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateEmailActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetActionName() string { return v.ActionName }

// GetRecipients returns __UpdateEmailActionInput.Recipients, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetRecipients() []string { return v.Recipients }

// GetSubjectTemplate returns __UpdateEmailActionInput.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetSubjectTemplate() *string { return v.SubjectTemplate }

// GetBodyTemplate returns __UpdateEmailActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

// GetUseProxy returns __UpdateEmailActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateEmailActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdateFilterAlertInput is used internally by genqlient
type __UpdateFilterAlertInput struct {
	SearchDomainName    string             `json:"SearchDomainName"`
	ID                  string             `json:"ID"`
	Name                string             `json:"Name"`
	Description         *string            `json:"Description"`
	QueryString         string             `json:"QueryString"`
	ActionIdsOrNames    []string           `json:"ActionIdsOrNames"`
	Labels              []string           `json:"Labels"`
	Enabled             bool               `json:"Enabled"`
	ThrottleField       *string            `json:"ThrottleField"`
	ThrottleTimeSeconds int64              `json:"ThrottleTimeSeconds"`
	QueryOwnershipType  QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __UpdateFilterAlertInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetID returns __UpdateFilterAlertInput.ID, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetID() string { return v.ID }

// GetName returns __UpdateFilterAlertInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetName() string { return v.Name }

// GetDescription returns __UpdateFilterAlertInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetDescription() *string { return v.Description }

// GetQueryString returns __UpdateFilterAlertInput.QueryString, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetQueryString() string { return v.QueryString }

// GetActionIdsOrNames returns __UpdateFilterAlertInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __UpdateFilterAlertInput.Labels, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetLabels() []string { return v.Labels }

// GetEnabled returns __UpdateFilterAlertInput.Enabled, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetEnabled() bool { return v.Enabled }

// GetThrottleField returns __UpdateFilterAlertInput.ThrottleField, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetThrottleField() *string { return v.ThrottleField }

// GetThrottleTimeSeconds returns __UpdateFilterAlertInput.ThrottleTimeSeconds, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetThrottleTimeSeconds() int64 { return v.ThrottleTimeSeconds }

// GetQueryOwnershipType returns __UpdateFilterAlertInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__UpdateFilterAlertInput) GetQueryOwnershipType() QueryOwnershipType {
	return v.QueryOwnershipType
}

// __UpdateHumioRepoActionInput is used internally by genqlient
type __UpdateHumioRepoActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
	ActionName       string `json:"ActionName"`
	IngestToken      string `json:"IngestToken"`
}

// GetSearchDomainName returns __UpdateHumioRepoActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateHumioRepoActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateHumioRepoActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateHumioRepoActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateHumioRepoActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateHumioRepoActionInput) GetActionName() string { return v.ActionName }

// GetIngestToken returns __UpdateHumioRepoActionInput.IngestToken, and is useful for accessing the field via an interface.
func (v *__UpdateHumioRepoActionInput) GetIngestToken() string { return v.IngestToken }

// __UpdateIngestBasedRetentionInput is used internally by genqlient
type __UpdateIngestBasedRetentionInput struct {
	RepositoryName string   `json:"RepositoryName"`
	IngestInGB     *float64 `json:"IngestInGB"`
}

// GetRepositoryName returns __UpdateIngestBasedRetentionInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__UpdateIngestBasedRetentionInput) GetRepositoryName() string { return v.RepositoryName }

// GetIngestInGB returns __UpdateIngestBasedRetentionInput.IngestInGB, and is useful for accessing the field via an interface.
func (v *__UpdateIngestBasedRetentionInput) GetIngestInGB() *float64 { return v.IngestInGB }

// __UpdateLicenseKeyInput is used internally by genqlient
type __UpdateLicenseKeyInput struct {
	LicenseKey string `json:"LicenseKey"`
}

// GetLicenseKey returns __UpdateLicenseKeyInput.LicenseKey, and is useful for accessing the field via an interface.
func (v *__UpdateLicenseKeyInput) GetLicenseKey() string { return v.LicenseKey }

// __UpdateOpsGenieActionInput is used internally by genqlient
type __UpdateOpsGenieActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
	ActionName       string `json:"ActionName"`
	ApiUrl           string `json:"ApiUrl"`
	GenieKey         string `json:"GenieKey"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateOpsGenieActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateOpsGenieActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateOpsGenieActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetActionName() string { return v.ActionName }

// GetApiUrl returns __UpdateOpsGenieActionInput.ApiUrl, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetApiUrl() string { return v.ApiUrl }

// GetGenieKey returns __UpdateOpsGenieActionInput.GenieKey, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetGenieKey() string { return v.GenieKey }

// GetUseProxy returns __UpdateOpsGenieActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateOpsGenieActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdatePagerDutyActionInput is used internally by genqlient
type __UpdatePagerDutyActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
	ActionName       string `json:"ActionName"`
	Severity         string `json:"Severity"`
	RoutingKey       string `json:"RoutingKey"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdatePagerDutyActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdatePagerDutyActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdatePagerDutyActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetActionName() string { return v.ActionName }

// GetSeverity returns __UpdatePagerDutyActionInput.Severity, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetSeverity() string { return v.Severity }

// GetRoutingKey returns __UpdatePagerDutyActionInput.RoutingKey, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetRoutingKey() string { return v.RoutingKey }

// GetUseProxy returns __UpdatePagerDutyActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdatePagerDutyActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdateS3ArchivingConfigurationInput is used internally by genqlient
type __UpdateS3ArchivingConfigurationInput struct {
	RepositoryName string            `json:"RepositoryName"`
	BucketName     string            `json:"BucketName"`
	BucketRegion   string            `json:"BucketRegion"`
	Format         S3ArchivingFormat `json:"Format"`
}

// GetRepositoryName returns __UpdateS3ArchivingConfigurationInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__UpdateS3ArchivingConfigurationInput) GetRepositoryName() string { return v.RepositoryName }

// GetBucketName returns __UpdateS3ArchivingConfigurationInput.BucketName, and is useful for accessing the field via an interface.
func (v *__UpdateS3ArchivingConfigurationInput) GetBucketName() string { return v.BucketName }

// GetBucketRegion returns __UpdateS3ArchivingConfigurationInput.BucketRegion, and is useful for accessing the field via an interface.
func (v *__UpdateS3ArchivingConfigurationInput) GetBucketRegion() string { return v.BucketRegion }

// GetFormat returns __UpdateS3ArchivingConfigurationInput.Format, and is useful for accessing the field via an interface.
func (v *__UpdateS3ArchivingConfigurationInput) GetFormat() S3ArchivingFormat { return v.Format }

// __UpdateScheduledSearchInput is used internally by genqlient
type __UpdateScheduledSearchInput struct {
	SearchDomainName   string              `json:"SearchDomainName"`
	ID                 string              `json:"ID"`
	Name               string              `json:"Name"`
	Description        *string             `json:"Description"`
	QueryString        string              `json:"QueryString"`
	QueryStart         string              `json:"QueryStart"`
	QueryEnd           string              `json:"QueryEnd"`
	Schedule           string              `json:"Schedule"`
	TimeZone           string              `json:"TimeZone"`
	BackfillLimit      int                 `json:"BackfillLimit"`
	Enabled            bool                `json:"Enabled"`
	ActionIdsOrNames   []string            `json:"ActionIdsOrNames"`
	Labels             []string            `json:"Labels"`
	QueryOwnershipType *QueryOwnershipType `json:"QueryOwnershipType"`
}

// GetSearchDomainName returns __UpdateScheduledSearchInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetID returns __UpdateScheduledSearchInput.ID, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetID() string { return v.ID }

// GetName returns __UpdateScheduledSearchInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetName() string { return v.Name }

// GetDescription returns __UpdateScheduledSearchInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetDescription() *string { return v.Description }

// GetQueryString returns __UpdateScheduledSearchInput.QueryString, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetQueryString() string { return v.QueryString }

// GetQueryStart returns __UpdateScheduledSearchInput.QueryStart, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetQueryStart() string { return v.QueryStart }

// GetQueryEnd returns __UpdateScheduledSearchInput.QueryEnd, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetQueryEnd() string { return v.QueryEnd }

// GetSchedule returns __UpdateScheduledSearchInput.Schedule, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetSchedule() string { return v.Schedule }

// GetTimeZone returns __UpdateScheduledSearchInput.TimeZone, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetTimeZone() string { return v.TimeZone }

// GetBackfillLimit returns __UpdateScheduledSearchInput.BackfillLimit, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetBackfillLimit() int { return v.BackfillLimit }

// GetEnabled returns __UpdateScheduledSearchInput.Enabled, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetEnabled() bool { return v.Enabled }

// GetActionIdsOrNames returns __UpdateScheduledSearchInput.ActionIdsOrNames, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetActionIdsOrNames() []string { return v.ActionIdsOrNames }

// GetLabels returns __UpdateScheduledSearchInput.Labels, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetLabels() []string { return v.Labels }

// GetQueryOwnershipType returns __UpdateScheduledSearchInput.QueryOwnershipType, and is useful for accessing the field via an interface.
func (v *__UpdateScheduledSearchInput) GetQueryOwnershipType() *QueryOwnershipType {
	return v.QueryOwnershipType
}

// __UpdateSlackActionInput is used internally by genqlient
type __UpdateSlackActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionID         string                 `json:"ActionID"`
	ActionName       string                 `json:"ActionName"`
	Fields           []SlackFieldEntryInput `json:"Fields"`
	Url              string                 `json:"Url"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateSlackActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateSlackActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateSlackActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetActionName() string { return v.ActionName }

// GetFields returns __UpdateSlackActionInput.Fields, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetFields() []SlackFieldEntryInput { return v.Fields }

// GetUrl returns __UpdateSlackActionInput.Url, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetUrl() string { return v.Url }

// GetUseProxy returns __UpdateSlackActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateSlackActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdateSlackPostMessageActionInput is used internally by genqlient
type __UpdateSlackPostMessageActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionID         string                 `json:"ActionID"`
	ActionName       string                 `json:"ActionName"`
	ApiToken         string                 `json:"ApiToken"`
	Channels         []string               `json:"Channels"`
	Fields           []SlackFieldEntryInput `json:"Fields"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateSlackPostMessageActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateSlackPostMessageActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateSlackPostMessageActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetActionName() string { return v.ActionName }

// GetApiToken returns __UpdateSlackPostMessageActionInput.ApiToken, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetApiToken() string { return v.ApiToken }

// GetChannels returns __UpdateSlackPostMessageActionInput.Channels, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetChannels() []string { return v.Channels }

// GetFields returns __UpdateSlackPostMessageActionInput.Fields, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetFields() []SlackFieldEntryInput { return v.Fields }

// GetUseProxy returns __UpdateSlackPostMessageActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateSlackPostMessageActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdateStorageBasedRetentionInput is used internally by genqlient
type __UpdateStorageBasedRetentionInput struct {
	RepositoryName string   `json:"RepositoryName"`
	StorageInGB    *float64 `json:"StorageInGB"`
}

// GetRepositoryName returns __UpdateStorageBasedRetentionInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__UpdateStorageBasedRetentionInput) GetRepositoryName() string { return v.RepositoryName }

// GetStorageInGB returns __UpdateStorageBasedRetentionInput.StorageInGB, and is useful for accessing the field via an interface.
func (v *__UpdateStorageBasedRetentionInput) GetStorageInGB() *float64 { return v.StorageInGB }

// __UpdateTimeBasedRetentionInput is used internally by genqlient
type __UpdateTimeBasedRetentionInput struct {
	RepositoryName  string   `json:"RepositoryName"`
	RetentionInDays *float64 `json:"RetentionInDays"`
}

// GetRepositoryName returns __UpdateTimeBasedRetentionInput.RepositoryName, and is useful for accessing the field via an interface.
func (v *__UpdateTimeBasedRetentionInput) GetRepositoryName() string { return v.RepositoryName }

// GetRetentionInDays returns __UpdateTimeBasedRetentionInput.RetentionInDays, and is useful for accessing the field via an interface.
func (v *__UpdateTimeBasedRetentionInput) GetRetentionInDays() *float64 { return v.RetentionInDays }

// __UpdateVictorOpsActionInput is used internally by genqlient
type __UpdateVictorOpsActionInput struct {
	SearchDomainName string `json:"SearchDomainName"`
	ActionID         string `json:"ActionID"`
	ActionName       string `json:"ActionName"`
	MessageType      string `json:"MessageType"`
	NotifyUrl        string `json:"NotifyUrl"`
	UseProxy         bool   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateVictorOpsActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateVictorOpsActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateVictorOpsActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetActionName() string { return v.ActionName }

// GetMessageType returns __UpdateVictorOpsActionInput.MessageType, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetMessageType() string { return v.MessageType }

// GetNotifyUrl returns __UpdateVictorOpsActionInput.NotifyUrl, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetNotifyUrl() string { return v.NotifyUrl }

// GetUseProxy returns __UpdateVictorOpsActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateVictorOpsActionInput) GetUseProxy() bool { return v.UseProxy }

// __UpdateViewConnectionsInput is used internally by genqlient
type __UpdateViewConnectionsInput struct {
	ViewName    string                `json:"ViewName"`
	Connections []ViewConnectionInput `json:"Connections"`
}

// GetViewName returns __UpdateViewConnectionsInput.ViewName, and is useful for accessing the field via an interface.
func (v *__UpdateViewConnectionsInput) GetViewName() string { return v.ViewName }

// GetConnections returns __UpdateViewConnectionsInput.Connections, and is useful for accessing the field via an interface.
func (v *__UpdateViewConnectionsInput) GetConnections() []ViewConnectionInput { return v.Connections }

// __UpdateWebhookActionInput is used internally by genqlient
type __UpdateWebhookActionInput struct {
	SearchDomainName string                 `json:"SearchDomainName"`
	ActionID         string                 `json:"ActionID"`
	ActionName       string                 `json:"ActionName"`
	Url              string                 `json:"Url"`
	Method           string                 `json:"Method"`
	Headers          []HttpHeaderEntryInput `json:"Headers"`
	BodyTemplate     string                 `json:"BodyTemplate"`
	IgnoreSSL        bool                   `json:"IgnoreSSL"`
	UseProxy         bool                   `json:"UseProxy"`
}

// GetSearchDomainName returns __UpdateWebhookActionInput.SearchDomainName, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetSearchDomainName() string { return v.SearchDomainName }

// GetActionID returns __UpdateWebhookActionInput.ActionID, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetActionID() string { return v.ActionID }

// GetActionName returns __UpdateWebhookActionInput.ActionName, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetActionName() string { return v.ActionName }

// GetUrl returns __UpdateWebhookActionInput.Url, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetUrl() string { return v.Url }

// GetMethod returns __UpdateWebhookActionInput.Method, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetMethod() string { return v.Method }

// GetHeaders returns __UpdateWebhookActionInput.Headers, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetHeaders() []HttpHeaderEntryInput { return v.Headers }

// GetBodyTemplate returns __UpdateWebhookActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetBodyTemplate() string { return v.BodyTemplate }

// GetIgnoreSSL returns __UpdateWebhookActionInput.IgnoreSSL, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetIgnoreSSL() bool { return v.IgnoreSSL }

// GetUseProxy returns __UpdateWebhookActionInput.UseProxy, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookActionInput) GetUseProxy() bool { return v.UseProxy }

// The query or mutation executed by AddIngestToken.
const AddIngestToken_Operation = `
mutation AddIngestToken ($RepositoryName: String!, $Name: String!, $ParserName: String) {
	addIngestTokenV3(input: {repositoryName:$RepositoryName,name:$Name,parser:$ParserName}) {
		... IngestTokenDetails
	}
}
fragment IngestTokenDetails on IngestToken {
	name
	token
	parser {
		name
	}
}
`

func AddIngestToken(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	Name string,
	ParserName *string,
) (*AddIngestTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddIngestToken",
		Query:  AddIngestToken_Operation,
		Variables: &__AddIngestTokenInput{
			RepositoryName: RepositoryName,
			Name:           Name,
			ParserName:     ParserName,
		},
	}
	var err_ error

	var data_ AddIngestTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddUser.
const AddUser_Operation = `
mutation AddUser ($Username: String!, $IsRoot: Boolean) {
	addUserV2(input: {username:$Username,isRoot:$IsRoot}) {
		__typename
		... on User {
			... UserDetails
		}
	}
}
fragment UserDetails on User {
	id
	username
	isRoot
}
`

func AddUser(
	ctx_ context.Context,
	client_ graphql.Client,
	Username string,
	IsRoot *bool,
) (*AddUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddUser",
		Query:  AddUser_Operation,
		Variables: &__AddUserInput{
			Username: Username,
			IsRoot:   IsRoot,
		},
	}
	var err_ error

	var data_ AddUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AssignParserToIngestToken.
const AssignParserToIngestToken_Operation = `
mutation AssignParserToIngestToken ($RepositoryName: String!, $IngestTokenName: String!, $ParserName: String!) {
	assignParserToIngestTokenV2(input: {repositoryName:$RepositoryName,parser:$ParserName,tokenName:$IngestTokenName}) {
		__typename
	}
}
`

func AssignParserToIngestToken(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	IngestTokenName string,
	ParserName string,
) (*AssignParserToIngestTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "AssignParserToIngestToken",
		Query:  AssignParserToIngestToken_Operation,
		Variables: &__AssignParserToIngestTokenInput{
			RepositoryName:  RepositoryName,
			IngestTokenName: IngestTokenName,
			ParserName:      ParserName,
		},
	}
	var err_ error

	var data_ AssignParserToIngestTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateAggregateAlert.
const CreateAggregateAlert_Operation = `
mutation CreateAggregateAlert ($SearchDomainName: RepoOrViewName!, $Name: String!, $Description: String, $QueryString: String!, $SearchIntervalSeconds: Long!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $Enabled: Boolean!, $ThrottleField: String, $ThrottleTimeSeconds: Long!, $TriggerMode: TriggerMode!, $QueryTimestampMode: QueryTimestampType!, $QueryOwnershipType: QueryOwnershipType!) {
	createAggregateAlert(input: {viewName:$SearchDomainName,name:$Name,description:$Description,queryString:$QueryString,searchIntervalSeconds:$SearchIntervalSeconds,actionIdsOrNames:$ActionIdsOrNames,labels:$Labels,enabled:$Enabled,throttleField:$ThrottleField,throttleTimeSeconds:$ThrottleTimeSeconds,triggerMode:$TriggerMode,queryTimestampType:$QueryTimestampMode,queryOwnershipType:$QueryOwnershipType}) {
		... AggregateAlertDetails
	}
}
fragment AggregateAlertDetails on AggregateAlert {
	id
	name
	description
	queryString
	searchIntervalSeconds
	throttleTimeSeconds
	throttleField
	labels
	enabled
	triggerMode
	queryTimestampType
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func CreateAggregateAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	Name string,
	Description *string,
	QueryString string,
	SearchIntervalSeconds int64,
	ActionIdsOrNames []string,
	Labels []string,
	Enabled bool,
	ThrottleField *string,
	ThrottleTimeSeconds int64,
	TriggerMode TriggerMode,
	QueryTimestampMode QueryTimestampType,
	QueryOwnershipType QueryOwnershipType,
) (*CreateAggregateAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateAggregateAlert",
		Query:  CreateAggregateAlert_Operation,
		Variables: &__CreateAggregateAlertInput{
			SearchDomainName:      SearchDomainName,
			Name:                  Name,
			Description:           Description,
			QueryString:           QueryString,
			SearchIntervalSeconds: SearchIntervalSeconds,
			ActionIdsOrNames:      ActionIdsOrNames,
			Labels:                Labels,
			Enabled:               Enabled,
			ThrottleField:         ThrottleField,
			ThrottleTimeSeconds:   ThrottleTimeSeconds,
			TriggerMode:           TriggerMode,
			QueryTimestampMode:    QueryTimestampMode,
			QueryOwnershipType:    QueryOwnershipType,
		},
	}
	var err_ error

	var data_ CreateAggregateAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateAlert.
const CreateAlert_Operation = `
mutation CreateAlert ($SearchDomainName: String!, $Name: String!, $Description: String, $QueryString: String!, $QueryStart: String!, $ThrottleTimeMillis: Long!, $Enabled: Boolean, $Actions: [String!]!, $Labels: [String!], $QueryOwnershipType: QueryOwnershipType, $ThrottleField: String) {
	createAlert(input: {viewName:$SearchDomainName,name:$Name,description:$Description,queryString:$QueryString,queryStart:$QueryStart,throttleTimeMillis:$ThrottleTimeMillis,enabled:$Enabled,actions:$Actions,labels:$Labels,queryOwnershipType:$QueryOwnershipType,throttleField:$ThrottleField}) {
		... AlertDetails
	}
}
fragment AlertDetails on Alert {
	id
	name
	queryString
	queryStart
	throttleField
	description
	throttleTimeMillis
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func CreateAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	Name string,
	Description *string,
	QueryString string,
	QueryStart string,
	ThrottleTimeMillis int64,
	Enabled *bool,
	Actions []string,
	Labels []string,
	QueryOwnershipType *QueryOwnershipType,
	ThrottleField *string,
) (*CreateAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateAlert",
		Query:  CreateAlert_Operation,
		Variables: &__CreateAlertInput{
			SearchDomainName:   SearchDomainName,
			Name:               Name,
			Description:        Description,
			QueryString:        QueryString,
			QueryStart:         QueryStart,
			ThrottleTimeMillis: ThrottleTimeMillis,
			Enabled:            Enabled,
			Actions:            Actions,
			Labels:             Labels,
			QueryOwnershipType: QueryOwnershipType,
			ThrottleField:      ThrottleField,
		},
	}
	var err_ error

	var data_ CreateAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateEmailAction.
const CreateEmailAction_Operation = `
mutation CreateEmailAction ($SearchDomainName: String!, $ActionName: String!, $Recipients: [String!]!, $SubjectTemplate: String, $BodyTemplate: String, $UseProxy: Boolean!) {
	createEmailAction(input: {viewName:$SearchDomainName,name:$ActionName,recipients:$Recipients,subjectTemplate:$SubjectTemplate,bodyTemplate:$BodyTemplate,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateEmailAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	Recipients []string,
	SubjectTemplate *string,
	BodyTemplate *string,
	UseProxy bool,
) (*CreateEmailActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateEmailAction",
		Query:  CreateEmailAction_Operation,
		Variables: &__CreateEmailActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			Recipients:       Recipients,
			SubjectTemplate:  SubjectTemplate,
			BodyTemplate:     BodyTemplate,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateEmailActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateFilterAlert.
const CreateFilterAlert_Operation = `
mutation CreateFilterAlert ($SearchDomainName: RepoOrViewName!, $Name: String!, $Description: String, $QueryString: String!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $Enabled: Boolean!, $ThrottleField: String, $ThrottleTimeSeconds: Long!, $QueryOwnershipType: QueryOwnershipType!) {
	createFilterAlert(input: {viewName:$SearchDomainName,name:$Name,description:$Description,queryString:$QueryString,actionIdsOrNames:$ActionIdsOrNames,labels:$Labels,enabled:$Enabled,throttleField:$ThrottleField,throttleTimeSeconds:$ThrottleTimeSeconds,queryOwnershipType:$QueryOwnershipType}) {
		... FilterAlertDetails
	}
}
fragment FilterAlertDetails on FilterAlert {
	id
	name
	description
	queryString
	throttleTimeSeconds
	throttleField
	labels
	enabled
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func CreateFilterAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	Name string,
	Description *string,
	QueryString string,
	ActionIdsOrNames []string,
	Labels []string,
	Enabled bool,
	ThrottleField *string,
	ThrottleTimeSeconds int64,
	QueryOwnershipType QueryOwnershipType,
) (*CreateFilterAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateFilterAlert",
		Query:  CreateFilterAlert_Operation,
		Variables: &__CreateFilterAlertInput{
			SearchDomainName:    SearchDomainName,
			Name:                Name,
			Description:         Description,
			QueryString:         QueryString,
			ActionIdsOrNames:    ActionIdsOrNames,
			Labels:              Labels,
			Enabled:             Enabled,
			ThrottleField:       ThrottleField,
			ThrottleTimeSeconds: ThrottleTimeSeconds,
			QueryOwnershipType:  QueryOwnershipType,
		},
	}
	var err_ error

	var data_ CreateFilterAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateHumioRepoAction.
const CreateHumioRepoAction_Operation = `
mutation CreateHumioRepoAction ($SearchDomainName: String!, $ActionName: String!, $IngestToken: String!) {
	createHumioRepoAction(input: {viewName:$SearchDomainName,name:$ActionName,ingestToken:$IngestToken}) {
		__typename
	}
}
`

func CreateHumioRepoAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	IngestToken string,
) (*CreateHumioRepoActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateHumioRepoAction",
		Query:  CreateHumioRepoAction_Operation,
		Variables: &__CreateHumioRepoActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			IngestToken:      IngestToken,
		},
	}
	var err_ error

	var data_ CreateHumioRepoActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateOpsGenieAction.
const CreateOpsGenieAction_Operation = `
mutation CreateOpsGenieAction ($SearchDomainName: String!, $ActionName: String!, $ApiUrl: String!, $GenieKey: String!, $UseProxy: Boolean!) {
	createOpsGenieAction(input: {viewName:$SearchDomainName,name:$ActionName,apiUrl:$ApiUrl,genieKey:$GenieKey,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateOpsGenieAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	ApiUrl string,
	GenieKey string,
	UseProxy bool,
) (*CreateOpsGenieActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateOpsGenieAction",
		Query:  CreateOpsGenieAction_Operation,
		Variables: &__CreateOpsGenieActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			ApiUrl:           ApiUrl,
			GenieKey:         GenieKey,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateOpsGenieActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreatePagerDutyAction.
const CreatePagerDutyAction_Operation = `
mutation CreatePagerDutyAction ($SearchDomainName: String!, $ActionName: String!, $Severity: String!, $RoutingKey: String!, $UseProxy: Boolean!) {
	createPagerDutyAction(input: {viewName:$SearchDomainName,name:$ActionName,severity:$Severity,routingKey:$RoutingKey,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreatePagerDutyAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	Severity string,
	RoutingKey string,
	UseProxy bool,
) (*CreatePagerDutyActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreatePagerDutyAction",
		Query:  CreatePagerDutyAction_Operation,
		Variables: &__CreatePagerDutyActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			Severity:         Severity,
			RoutingKey:       RoutingKey,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreatePagerDutyActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateParserOrUpdate.
const CreateParserOrUpdate_Operation = `
mutation CreateParserOrUpdate ($RepositoryName: RepoOrViewName!, $Name: String!, $Script: String!, $TestCases: [ParserTestCaseInput!]!, $FieldsToTag: [String!]!, $FieldsToBeRemovedBeforeParsing: [String!]!, $AllowOverridingExistingParser: Boolean!) {
	createParserV2(input: {name:$Name,script:$Script,testCases:$TestCases,repositoryName:$RepositoryName,fieldsToTag:$FieldsToTag,fieldsToBeRemovedBeforeParsing:$FieldsToBeRemovedBeforeParsing,allowOverwritingExistingParser:$AllowOverridingExistingParser}) {
		... ParserDetails
	}
}
fragment ParserDetails on Parser {
	id
	name
	script
	fieldsToTag
	testCases {
		event {
			rawString
		}
		outputAssertions {
			__typename
		}
	}
}
`

func CreateParserOrUpdate(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	Name string,
	Script string,
	TestCases []ParserTestCaseInput,
	FieldsToTag []string,
	FieldsToBeRemovedBeforeParsing []string,
	AllowOverridingExistingParser bool,
) (*CreateParserOrUpdateResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateParserOrUpdate",
		Query:  CreateParserOrUpdate_Operation,
		Variables: &__CreateParserOrUpdateInput{
			RepositoryName:                 RepositoryName,
			Name:                           Name,
			Script:                         Script,
			TestCases:                      TestCases,
			FieldsToTag:                    FieldsToTag,
			FieldsToBeRemovedBeforeParsing: FieldsToBeRemovedBeforeParsing,
			AllowOverridingExistingParser:  AllowOverridingExistingParser,
		},
	}
	var err_ error

	var data_ CreateParserOrUpdateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateRepository.
const CreateRepository_Operation = `
mutation CreateRepository ($RepositoryName: String!) {
	createRepository(name: $RepositoryName) {
		repository {
			... RepositoryDetails
		}
	}
}
fragment RepositoryDetails on Repository {
	id
	name
	description
	timeBasedRetention
	ingestSizeBasedRetention
	storageSizeBasedRetention
	compressedByteSize
	automaticSearch
	s3ArchivingConfiguration {
		bucket
		region
		disabled
		format
	}
}
`

func CreateRepository(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*CreateRepositoryResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateRepository",
		Query:  CreateRepository_Operation,
		Variables: &__CreateRepositoryInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ CreateRepositoryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateScheduledSearch.
const CreateScheduledSearch_Operation = `
mutation CreateScheduledSearch ($SearchDomainName: String!, $Name: String!, $Description: String, $QueryString: String!, $QueryStart: String!, $QueryEnd: String!, $Schedule: String!, $TimeZone: String!, $BackfillLimit: Int!, $Enabled: Boolean!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $QueryOwnershipType: QueryOwnershipType) {
	createScheduledSearch(input: {viewName:$SearchDomainName,name:$Name,description:$Description,queryString:$QueryString,queryStart:$QueryStart,queryEnd:$QueryEnd,schedule:$Schedule,timeZone:$TimeZone,backfillLimit:$BackfillLimit,enabled:$Enabled,actions:$ActionIdsOrNames,labels:$Labels,queryOwnershipType:$QueryOwnershipType}) {
		... ScheduledSearchDetails
	}
}
fragment ScheduledSearchDetails on ScheduledSearch {
	id
	name
	description
	queryString
	start
	end
	timeZone
	schedule
	backfillLimit
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func CreateScheduledSearch(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	Name string,
	Description *string,
	QueryString string,
	QueryStart string,
	QueryEnd string,
	Schedule string,
	TimeZone string,
	BackfillLimit int,
	Enabled bool,
	ActionIdsOrNames []string,
	Labels []string,
	QueryOwnershipType *QueryOwnershipType,
) (*CreateScheduledSearchResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateScheduledSearch",
		Query:  CreateScheduledSearch_Operation,
		Variables: &__CreateScheduledSearchInput{
			SearchDomainName:   SearchDomainName,
			Name:               Name,
			Description:        Description,
			QueryString:        QueryString,
			QueryStart:         QueryStart,
			QueryEnd:           QueryEnd,
			Schedule:           Schedule,
			TimeZone:           TimeZone,
			BackfillLimit:      BackfillLimit,
			Enabled:            Enabled,
			ActionIdsOrNames:   ActionIdsOrNames,
			Labels:             Labels,
			QueryOwnershipType: QueryOwnershipType,
		},
	}
	var err_ error

	var data_ CreateScheduledSearchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateSlackAction.
const CreateSlackAction_Operation = `
mutation CreateSlackAction ($SearchDomainName: String!, $ActionName: String!, $Fields: [SlackFieldEntryInput!]!, $Url: String!, $UseProxy: Boolean!) {
	createSlackAction(input: {viewName:$SearchDomainName,name:$ActionName,fields:$Fields,url:$Url,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateSlackAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	Fields []SlackFieldEntryInput,
	Url string,
	UseProxy bool,
) (*CreateSlackActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateSlackAction",
		Query:  CreateSlackAction_Operation,
		Variables: &__CreateSlackActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			Fields:           Fields,
			Url:              Url,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateSlackActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateSlackPostMessageAction.
const CreateSlackPostMessageAction_Operation = `
mutation CreateSlackPostMessageAction ($SearchDomainName: String!, $ActionName: String!, $ApiToken: String!, $Channels: [String!]!, $Fields: [SlackFieldEntryInput!]!, $UseProxy: Boolean!) {
	createSlackPostMessageAction(input: {viewName:$SearchDomainName,name:$ActionName,apiToken:$ApiToken,channels:$Channels,fields:$Fields,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateSlackPostMessageAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	ApiToken string,
	Channels []string,
	Fields []SlackFieldEntryInput,
	UseProxy bool,
) (*CreateSlackPostMessageActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateSlackPostMessageAction",
		Query:  CreateSlackPostMessageAction_Operation,
		Variables: &__CreateSlackPostMessageActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			ApiToken:         ApiToken,
			Channels:         Channels,
			Fields:           Fields,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateSlackPostMessageActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateVictorOpsAction.
const CreateVictorOpsAction_Operation = `
mutation CreateVictorOpsAction ($SearchDomainName: String!, $ActionName: String!, $MessageType: String!, $NotifyUrl: String!, $UseProxy: Boolean!) {
	createVictorOpsAction(input: {viewName:$SearchDomainName,name:$ActionName,messageType:$MessageType,notifyUrl:$NotifyUrl,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateVictorOpsAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	MessageType string,
	NotifyUrl string,
	UseProxy bool,
) (*CreateVictorOpsActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateVictorOpsAction",
		Query:  CreateVictorOpsAction_Operation,
		Variables: &__CreateVictorOpsActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			MessageType:      MessageType,
			NotifyUrl:        NotifyUrl,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateVictorOpsActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateView.
const CreateView_Operation = `
mutation CreateView ($ViewName: String!, $Description: String, $Connections: [ViewConnectionInput!]) {
	createView(name: $ViewName, description: $Description, connections: $Connections) {
		__typename
	}
}
`

func CreateView(
	ctx_ context.Context,
	client_ graphql.Client,
	ViewName string,
	Description *string,
	Connections []ViewConnectionInput,
) (*CreateViewResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateView",
		Query:  CreateView_Operation,
		Variables: &__CreateViewInput{
			ViewName:    ViewName,
			Description: Description,
			Connections: Connections,
		},
	}
	var err_ error

	var data_ CreateViewResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateWebhookAction.
const CreateWebhookAction_Operation = `
mutation CreateWebhookAction ($SearchDomainName: String!, $ActionName: String!, $Url: String!, $Method: String!, $Headers: [HttpHeaderEntryInput!]!, $BodyTemplate: String!, $IgnoreSSL: Boolean!, $UseProxy: Boolean!) {
	createWebhookAction(input: {viewName:$SearchDomainName,name:$ActionName,url:$Url,method:$Method,headers:$Headers,bodyTemplate:$BodyTemplate,ignoreSSL:$IgnoreSSL,useProxy:$UseProxy}) {
		__typename
	}
}
`

func CreateWebhookAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionName string,
	Url string,
	Method string,
	Headers []HttpHeaderEntryInput,
	BodyTemplate string,
	IgnoreSSL bool,
	UseProxy bool,
) (*CreateWebhookActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateWebhookAction",
		Query:  CreateWebhookAction_Operation,
		Variables: &__CreateWebhookActionInput{
			SearchDomainName: SearchDomainName,
			ActionName:       ActionName,
			Url:              Url,
			Method:           Method,
			Headers:          Headers,
			BodyTemplate:     BodyTemplate,
			IgnoreSSL:        IgnoreSSL,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ CreateWebhookActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteActionByID.
const DeleteActionByID_Operation = `
mutation DeleteActionByID ($SearchDomainName: String!, $ActionID: String!) {
	deleteAction(input: {viewName:$SearchDomainName,id:$ActionID})
}
`

func DeleteActionByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
) (*DeleteActionByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteActionByID",
		Query:  DeleteActionByID_Operation,
		Variables: &__DeleteActionByIDInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
		},
	}
	var err_ error

	var data_ DeleteActionByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteAggregateAlert.
const DeleteAggregateAlert_Operation = `
mutation DeleteAggregateAlert ($SearchDomainName: RepoOrViewName!, $AggregateAlertID: String!) {
	deleteAggregateAlert(input: {id:$AggregateAlertID,viewName:$SearchDomainName})
}
`

func DeleteAggregateAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	AggregateAlertID string,
) (*DeleteAggregateAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteAggregateAlert",
		Query:  DeleteAggregateAlert_Operation,
		Variables: &__DeleteAggregateAlertInput{
			SearchDomainName: SearchDomainName,
			AggregateAlertID: AggregateAlertID,
		},
	}
	var err_ error

	var data_ DeleteAggregateAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteAlertByID.
const DeleteAlertByID_Operation = `
mutation DeleteAlertByID ($SearchDomainName: String!, $AlertID: String!) {
	deleteAlert(input: {viewName:$SearchDomainName,id:$AlertID})
}
`

func DeleteAlertByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	AlertID string,
) (*DeleteAlertByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteAlertByID",
		Query:  DeleteAlertByID_Operation,
		Variables: &__DeleteAlertByIDInput{
			SearchDomainName: SearchDomainName,
			AlertID:          AlertID,
		},
	}
	var err_ error

	var data_ DeleteAlertByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteFilterAlert.
const DeleteFilterAlert_Operation = `
mutation DeleteFilterAlert ($SearchDomainName: RepoOrViewName!, $FilterAlertID: String!) {
	deleteFilterAlert(input: {id:$FilterAlertID,viewName:$SearchDomainName})
}
`

func DeleteFilterAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	FilterAlertID string,
) (*DeleteFilterAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteFilterAlert",
		Query:  DeleteFilterAlert_Operation,
		Variables: &__DeleteFilterAlertInput{
			SearchDomainName: SearchDomainName,
			FilterAlertID:    FilterAlertID,
		},
	}
	var err_ error

	var data_ DeleteFilterAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteParserByID.
const DeleteParserByID_Operation = `
mutation DeleteParserByID ($RepositoryName: RepoOrViewName!, $ParserID: String!) {
	deleteParser(input: {repositoryName:$RepositoryName,id:$ParserID}) {
		__typename
	}
}
`

func DeleteParserByID(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	ParserID string,
) (*DeleteParserByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteParserByID",
		Query:  DeleteParserByID_Operation,
		Variables: &__DeleteParserByIDInput{
			RepositoryName: RepositoryName,
			ParserID:       ParserID,
		},
	}
	var err_ error

	var data_ DeleteParserByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteScheduledSearchByID.
const DeleteScheduledSearchByID_Operation = `
mutation DeleteScheduledSearchByID ($SearchDomainName: String!, $ScheduledSearchID: String!) {
	deleteScheduledSearch(input: {viewName:$SearchDomainName,id:$ScheduledSearchID})
}
`

func DeleteScheduledSearchByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ScheduledSearchID string,
) (*DeleteScheduledSearchByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteScheduledSearchByID",
		Query:  DeleteScheduledSearchByID_Operation,
		Variables: &__DeleteScheduledSearchByIDInput{
			SearchDomainName:  SearchDomainName,
			ScheduledSearchID: ScheduledSearchID,
		},
	}
	var err_ error

	var data_ DeleteScheduledSearchByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeleteSearchDomain.
const DeleteSearchDomain_Operation = `
mutation DeleteSearchDomain ($SearchDomainName: String!, $DeleteMessage: String!) {
	deleteSearchDomain(name: $SearchDomainName, deleteMessage: $DeleteMessage) {
		__typename
	}
}
`

func DeleteSearchDomain(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	DeleteMessage string,
) (*DeleteSearchDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeleteSearchDomain",
		Query:  DeleteSearchDomain_Operation,
		Variables: &__DeleteSearchDomainInput{
			SearchDomainName: SearchDomainName,
			DeleteMessage:    DeleteMessage,
		},
	}
	var err_ error

	var data_ DeleteSearchDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DisableS3Archiving.
const DisableS3Archiving_Operation = `
mutation DisableS3Archiving ($RepositoryName: String!) {
	s3DisableArchiving(repositoryName: $RepositoryName) {
		__typename
	}
}
`

func DisableS3Archiving(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*DisableS3ArchivingResponse, error) {
	req_ := &graphql.Request{
		OpName: "DisableS3Archiving",
		Query:  DisableS3Archiving_Operation,
		Variables: &__DisableS3ArchivingInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ DisableS3ArchivingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by EnableS3Archiving.
const EnableS3Archiving_Operation = `
mutation EnableS3Archiving ($RepositoryName: String!) {
	s3EnableArchiving(repositoryName: $RepositoryName) {
		__typename
	}
}
`

func EnableS3Archiving(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*EnableS3ArchivingResponse, error) {
	req_ := &graphql.Request{
		OpName: "EnableS3Archiving",
		Query:  EnableS3Archiving_Operation,
		Variables: &__EnableS3ArchivingInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ EnableS3ArchivingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetActionByID.
const GetActionByID_Operation = `
query GetActionByID ($SearchDomainName: String!, $ActionID: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		action(id: $ActionID) {
			__typename
			... ActionDetails
		}
	}
}
fragment ActionDetails on Action {
	id
	name
	... on EmailAction {
		recipients
		subjectTemplate
		emailBodyTemplate: bodyTemplate
		useProxy
	}
	... on HumioRepoAction {
		ingestToken
	}
	... on OpsGenieAction {
		apiUrl
		genieKey
		useProxy
	}
	... on PagerDutyAction {
		severity
		routingKey
		useProxy
	}
	... on SlackAction {
		url
		fields {
			fieldName
			value
		}
		useProxy
	}
	... on SlackPostMessageAction {
		apiToken
		channels
		fields {
			fieldName
			value
		}
		useProxy
	}
	... on VictorOpsAction {
		messageType
		notifyUrl
		useProxy
	}
	... on WebhookAction {
		method
		url
		headers {
			header
			value
		}
		WebhookBodyTemplate: bodyTemplate
		ignoreSSL
		useProxy
	}
}
`

func GetActionByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
) (*GetActionByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetActionByID",
		Query:  GetActionByID_Operation,
		Variables: &__GetActionByIDInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
		},
	}
	var err_ error

	var data_ GetActionByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAggregateAlertByID.
const GetAggregateAlertByID_Operation = `
query GetAggregateAlertByID ($SearchDomainName: String!, $AggregateAlertID: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		aggregateAlert(id: $AggregateAlertID) {
			... AggregateAlertDetails
		}
	}
}
fragment AggregateAlertDetails on AggregateAlert {
	id
	name
	description
	queryString
	searchIntervalSeconds
	throttleTimeSeconds
	throttleField
	labels
	enabled
	triggerMode
	queryTimestampType
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func GetAggregateAlertByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	AggregateAlertID string,
) (*GetAggregateAlertByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAggregateAlertByID",
		Query:  GetAggregateAlertByID_Operation,
		Variables: &__GetAggregateAlertByIDInput{
			SearchDomainName: SearchDomainName,
			AggregateAlertID: AggregateAlertID,
		},
	}
	var err_ error

	var data_ GetAggregateAlertByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCluster.
const GetCluster_Operation = `
query GetCluster {
	cluster {
		nodes {
			id
			zone
			uri
			isAvailable
		}
	}
}
`

func GetCluster(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCluster",
		Query:  GetCluster_Operation,
	}
	var err_ error

	var data_ GetClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetEvictionStatus.
const GetEvictionStatus_Operation = `
query GetEvictionStatus {
	cluster {
		nodes {
			id
			isBeingEvicted
			reasonsNodeCannotBeSafelyUnregistered {
				isAlive
				hasUnderReplicatedData
				hasDataThatExistsOnlyOnThisNode
				leadsDigest
			}
		}
	}
}
`

func GetEvictionStatus(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetEvictionStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetEvictionStatus",
		Query:  GetEvictionStatus_Operation,
	}
	var err_ error

	var data_ GetEvictionStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetFilterAlertByID.
const GetFilterAlertByID_Operation = `
query GetFilterAlertByID ($SearchDomainName: String!, $FilterAlertID: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		filterAlert(id: $FilterAlertID) {
			... FilterAlertDetails
		}
	}
}
fragment FilterAlertDetails on FilterAlert {
	id
	name
	description
	queryString
	throttleTimeSeconds
	throttleField
	labels
	enabled
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func GetFilterAlertByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	FilterAlertID string,
) (*GetFilterAlertByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetFilterAlertByID",
		Query:  GetFilterAlertByID_Operation,
		Variables: &__GetFilterAlertByIDInput{
			SearchDomainName: SearchDomainName,
			FilterAlertID:    FilterAlertID,
		},
	}
	var err_ error

	var data_ GetFilterAlertByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLicense.
const GetLicense_Operation = `
query GetLicense {
	installedLicense {
		__typename
		... on OnPremLicense {
			uid
			expiresAt
		}
	}
}
`

func GetLicense(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetLicenseResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLicense",
		Query:  GetLicense_Operation,
	}
	var err_ error

	var data_ GetLicenseResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetParserByID.
const GetParserByID_Operation = `
query GetParserByID ($RepositoryName: String!, $ParserID: String!) {
	repository(name: $RepositoryName) {
		parser(id: $ParserID) {
			... ParserDetails
		}
	}
}
fragment ParserDetails on Parser {
	id
	name
	script
	fieldsToTag
	testCases {
		event {
			rawString
		}
		outputAssertions {
			__typename
		}
	}
}
`

func GetParserByID(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	ParserID string,
) (*GetParserByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetParserByID",
		Query:  GetParserByID_Operation,
		Variables: &__GetParserByIDInput{
			RepositoryName: RepositoryName,
			ParserID:       ParserID,
		},
	}
	var err_ error

	var data_ GetParserByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetRepository.
const GetRepository_Operation = `
query GetRepository ($RepositoryName: String!) {
	repository(name: $RepositoryName) {
		... RepositoryDetails
	}
}
fragment RepositoryDetails on Repository {
	id
	name
	description
	timeBasedRetention
	ingestSizeBasedRetention
	storageSizeBasedRetention
	compressedByteSize
	automaticSearch
	s3ArchivingConfiguration {
		bucket
		region
		disabled
		format
	}
}
`

func GetRepository(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*GetRepositoryResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetRepository",
		Query:  GetRepository_Operation,
		Variables: &__GetRepositoryInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ GetRepositoryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetScheduledSearchByID.
const GetScheduledSearchByID_Operation = `
query GetScheduledSearchByID ($SearchDomainName: String!, $ScheduledSearchID: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		scheduledSearch(id: $ScheduledSearchID) {
			... ScheduledSearchDetails
		}
	}
}
fragment ScheduledSearchDetails on ScheduledSearch {
	id
	name
	description
	queryString
	start
	end
	timeZone
	schedule
	backfillLimit
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func GetScheduledSearchByID(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ScheduledSearchID string,
) (*GetScheduledSearchByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetScheduledSearchByID",
		Query:  GetScheduledSearchByID_Operation,
		Variables: &__GetScheduledSearchByIDInput{
			SearchDomainName:  SearchDomainName,
			ScheduledSearchID: ScheduledSearchID,
		},
	}
	var err_ error

	var data_ GetScheduledSearchByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetSearchDomain.
const GetSearchDomain_Operation = `
query GetSearchDomain ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		id
		name
		description
		automaticSearch
		... on View {
			connections {
				repository {
					name
				}
				filter
			}
		}
		__typename
	}
}
`

func GetSearchDomain(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*GetSearchDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetSearchDomain",
		Query:  GetSearchDomain_Operation,
		Variables: &__GetSearchDomainInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ GetSearchDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUsername.
const GetUsername_Operation = `
query GetUsername {
	viewer {
		username
	}
}
`

func GetUsername(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetUsernameResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUsername",
		Query:  GetUsername_Operation,
	}
	var err_ error

	var data_ GetUsernameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUsersByUsername.
const GetUsersByUsername_Operation = `
query GetUsersByUsername ($Username: String!) {
	users(search: $Username) {
		... UserDetails
	}
}
fragment UserDetails on User {
	id
	username
	isRoot
}
`

func GetUsersByUsername(
	ctx_ context.Context,
	client_ graphql.Client,
	Username string,
) (*GetUsersByUsernameResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUsersByUsername",
		Query:  GetUsersByUsername_Operation,
		Variables: &__GetUsersByUsernameInput{
			Username: Username,
		},
	}
	var err_ error

	var data_ GetUsersByUsernameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListActions.
const ListActions_Operation = `
query ListActions ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		actions {
			__typename
			... ActionDetails
		}
	}
}
fragment ActionDetails on Action {
	id
	name
	... on EmailAction {
		recipients
		subjectTemplate
		emailBodyTemplate: bodyTemplate
		useProxy
	}
	... on HumioRepoAction {
		ingestToken
	}
	... on OpsGenieAction {
		apiUrl
		genieKey
		useProxy
	}
	... on PagerDutyAction {
		severity
		routingKey
		useProxy
	}
	... on SlackAction {
		url
		fields {
			fieldName
			value
		}
		useProxy
	}
	... on SlackPostMessageAction {
		apiToken
		channels
		fields {
			fieldName
			value
		}
		useProxy
	}
	... on VictorOpsAction {
		messageType
		notifyUrl
		useProxy
	}
	... on WebhookAction {
		method
		url
		headers {
			header
			value
		}
		WebhookBodyTemplate: bodyTemplate
		ignoreSSL
		useProxy
	}
}
`

func ListActions(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*ListActionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListActions",
		Query:  ListActions_Operation,
		Variables: &__ListActionsInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ ListActionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListAggregateAlerts.
const ListAggregateAlerts_Operation = `
query ListAggregateAlerts ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		aggregateAlerts {
			... AggregateAlertDetails
		}
	}
}
fragment AggregateAlertDetails on AggregateAlert {
	id
	name
	description
	queryString
	searchIntervalSeconds
	throttleTimeSeconds
	throttleField
	labels
	enabled
	triggerMode
	queryTimestampType
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func ListAggregateAlerts(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*ListAggregateAlertsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListAggregateAlerts",
		Query:  ListAggregateAlerts_Operation,
		Variables: &__ListAggregateAlertsInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ ListAggregateAlertsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListAlerts.
const ListAlerts_Operation = `
query ListAlerts ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		alerts {
			... AlertDetails
		}
	}
}
fragment AlertDetails on Alert {
	id
	name
	queryString
	queryStart
	throttleField
	description
	throttleTimeMillis
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func ListAlerts(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*ListAlertsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListAlerts",
		Query:  ListAlerts_Operation,
		Variables: &__ListAlertsInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ ListAlertsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListFilterAlerts.
const ListFilterAlerts_Operation = `
query ListFilterAlerts ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		filterAlerts {
			... FilterAlertDetails
		}
	}
}
fragment FilterAlertDetails on FilterAlert {
	id
	name
	description
	queryString
	throttleTimeSeconds
	throttleField
	labels
	enabled
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func ListFilterAlerts(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*ListFilterAlertsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListFilterAlerts",
		Query:  ListFilterAlerts_Operation,
		Variables: &__ListFilterAlertsInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ ListFilterAlertsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListIngestTokens.
const ListIngestTokens_Operation = `
query ListIngestTokens ($RepositoryName: String!) {
	repository(name: $RepositoryName) {
		ingestTokens {
			... IngestTokenDetails
		}
	}
}
fragment IngestTokenDetails on IngestToken {
	name
	token
	parser {
		name
	}
}
`

func ListIngestTokens(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*ListIngestTokensResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListIngestTokens",
		Query:  ListIngestTokens_Operation,
		Variables: &__ListIngestTokensInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ ListIngestTokensResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListParsers.
const ListParsers_Operation = `
query ListParsers ($RepositoryName: String!) {
	repository(name: $RepositoryName) {
		parsers {
			id
			name
		}
	}
}
`

func ListParsers(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
) (*ListParsersResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListParsers",
		Query:  ListParsers_Operation,
		Variables: &__ListParsersInput{
			RepositoryName: RepositoryName,
		},
	}
	var err_ error

	var data_ ListParsersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListRepositories.
const ListRepositories_Operation = `
query ListRepositories {
	repositories {
		id
		name
		compressedByteSize
	}
}
`

func ListRepositories(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListRepositoriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListRepositories",
		Query:  ListRepositories_Operation,
	}
	var err_ error

	var data_ ListRepositoriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListScheduledSearches.
const ListScheduledSearches_Operation = `
query ListScheduledSearches ($SearchDomainName: String!) {
	searchDomain(name: $SearchDomainName) {
		__typename
		scheduledSearches {
			... ScheduledSearchDetails
		}
	}
}
fragment ScheduledSearchDetails on ScheduledSearch {
	id
	name
	description
	queryString
	start
	end
	timeZone
	schedule
	backfillLimit
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func ListScheduledSearches(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
) (*ListScheduledSearchesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListScheduledSearches",
		Query:  ListScheduledSearches_Operation,
		Variables: &__ListScheduledSearchesInput{
			SearchDomainName: SearchDomainName,
		},
	}
	var err_ error

	var data_ ListScheduledSearchesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListSearchDomains.
const ListSearchDomains_Operation = `
query ListSearchDomains {
	searchDomains {
		__typename
		name
		automaticSearch
	}
}
`

func ListSearchDomains(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListSearchDomainsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListSearchDomains",
		Query:  ListSearchDomains_Operation,
	}
	var err_ error

	var data_ ListSearchDomainsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by RefreshClusterManagementStats.
const RefreshClusterManagementStats_Operation = `
mutation RefreshClusterManagementStats ($Vhost: Int!) {
	refreshClusterManagementStats(nodeId: $Vhost) {
		reasonsNodeCannotBeSafelyUnregistered {
			isAlive
			hasUnderReplicatedData
			hasDataThatExistsOnlyOnThisNode
			leadsDigest
		}
	}
}
`

func RefreshClusterManagementStats(
	ctx_ context.Context,
	client_ graphql.Client,
	Vhost int,
) (*RefreshClusterManagementStatsResponse, error) {
	req_ := &graphql.Request{
		OpName: "RefreshClusterManagementStats",
		Query:  RefreshClusterManagementStats_Operation,
		Variables: &__RefreshClusterManagementStatsInput{
			Vhost: Vhost,
		},
	}
	var err_ error

	var data_ RefreshClusterManagementStatsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by RemoveIngestToken.
const RemoveIngestToken_Operation = `
mutation RemoveIngestToken ($RepositoryName: String!, $Name: String!) {
	removeIngestToken(repositoryName: $RepositoryName, name: $Name) {
		__typename
	}
}
`

func RemoveIngestToken(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	Name string,
) (*RemoveIngestTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "RemoveIngestToken",
		Query:  RemoveIngestToken_Operation,
		Variables: &__RemoveIngestTokenInput{
			RepositoryName: RepositoryName,
			Name:           Name,
		},
	}
	var err_ error

	var data_ RemoveIngestTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by RotateTokenByID.
const RotateTokenByID_Operation = `
mutation RotateTokenByID ($TokenID: String!) {
	rotateToken(input: {id:$TokenID})
}
`

func RotateTokenByID(
	ctx_ context.Context,
	client_ graphql.Client,
	TokenID string,
) (*RotateTokenByIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "RotateTokenByID",
		Query:  RotateTokenByID_Operation,
		Variables: &__RotateTokenByIDInput{
			TokenID: TokenID,
		},
	}
	var err_ error

	var data_ RotateTokenByIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SetAutomaticSearching.
const SetAutomaticSearching_Operation = `
mutation SetAutomaticSearching ($SearchDomainName: String!, $AutomaticSearch: Boolean!) {
	setAutomaticSearching(name: $SearchDomainName, automaticSearch: $AutomaticSearch) {
		__typename
	}
}
`

func SetAutomaticSearching(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	AutomaticSearch bool,
) (*SetAutomaticSearchingResponse, error) {
	req_ := &graphql.Request{
		OpName: "SetAutomaticSearching",
		Query:  SetAutomaticSearching_Operation,
		Variables: &__SetAutomaticSearchingInput{
			SearchDomainName: SearchDomainName,
			AutomaticSearch:  AutomaticSearch,
		},
	}
	var err_ error

	var data_ SetAutomaticSearchingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SetIsBeingEvicted.
const SetIsBeingEvicted_Operation = `
mutation SetIsBeingEvicted ($Vhost: Int!, $IsBeingEvicted: Boolean!) {
	setIsBeingEvicted(vhost: $Vhost, isBeingEvicted: $IsBeingEvicted)
}
`

func SetIsBeingEvicted(
	ctx_ context.Context,
	client_ graphql.Client,
	Vhost int,
	IsBeingEvicted bool,
) (*SetIsBeingEvictedResponse, error) {
	req_ := &graphql.Request{
		OpName: "SetIsBeingEvicted",
		Query:  SetIsBeingEvicted_Operation,
		Variables: &__SetIsBeingEvictedInput{
			Vhost:          Vhost,
			IsBeingEvicted: IsBeingEvicted,
		},
	}
	var err_ error

	var data_ SetIsBeingEvictedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UnassignParserToIngestToken.
const UnassignParserToIngestToken_Operation = `
mutation UnassignParserToIngestToken ($RepositoryName: String!, $IngestTokenName: String!) {
	unassignIngestToken(repositoryName: $RepositoryName, tokenName: $IngestTokenName) {
		__typename
	}
}
`

func UnassignParserToIngestToken(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	IngestTokenName string,
) (*UnassignParserToIngestTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "UnassignParserToIngestToken",
		Query:  UnassignParserToIngestToken_Operation,
		Variables: &__UnassignParserToIngestTokenInput{
			RepositoryName:  RepositoryName,
			IngestTokenName: IngestTokenName,
		},
	}
	var err_ error

	var data_ UnassignParserToIngestTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UnregisterClusterNode.
const UnregisterClusterNode_Operation = `
mutation UnregisterClusterNode ($NodeId: Int!, $Force: Boolean!) {
	clusterUnregisterNode(nodeID: $NodeId, force: $Force) {
		cluster {
			nodes {
				id
				zone
				isBeingEvicted
			}
		}
	}
}
`

func UnregisterClusterNode(
	ctx_ context.Context,
	client_ graphql.Client,
	NodeId int,
	Force bool,
) (*UnregisterClusterNodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "UnregisterClusterNode",
		Query:  UnregisterClusterNode_Operation,
		Variables: &__UnregisterClusterNodeInput{
			NodeId: NodeId,
			Force:  Force,
		},
	}
	var err_ error

	var data_ UnregisterClusterNodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateAggregateAlert.
const UpdateAggregateAlert_Operation = `
mutation UpdateAggregateAlert ($SearchDomainName: RepoOrViewName!, $ID: String!, $Name: String!, $Description: String, $QueryString: String!, $SearchIntervalSeconds: Long!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $Enabled: Boolean!, $ThrottleField: String, $ThrottleTimeSeconds: Long!, $TriggerMode: TriggerMode!, $QueryTimestampMode: QueryTimestampType!, $QueryOwnershipType: QueryOwnershipType!) {
	updateAggregateAlert(input: {viewName:$SearchDomainName,id:$ID,name:$Name,description:$Description,queryString:$QueryString,searchIntervalSeconds:$SearchIntervalSeconds,actionIdsOrNames:$ActionIdsOrNames,labels:$Labels,enabled:$Enabled,throttleField:$ThrottleField,throttleTimeSeconds:$ThrottleTimeSeconds,triggerMode:$TriggerMode,queryTimestampType:$QueryTimestampMode,queryOwnershipType:$QueryOwnershipType}) {
		... AggregateAlertDetails
	}
}
fragment AggregateAlertDetails on AggregateAlert {
	id
	name
	description
	queryString
	searchIntervalSeconds
	throttleTimeSeconds
	throttleField
	labels
	enabled
	triggerMode
	queryTimestampType
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func UpdateAggregateAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ID string,
	Name string,
	Description *string,
	QueryString string,
	SearchIntervalSeconds int64,
	ActionIdsOrNames []string,
	Labels []string,
	Enabled bool,
	ThrottleField *string,
	ThrottleTimeSeconds int64,
	TriggerMode TriggerMode,
	QueryTimestampMode QueryTimestampType,
	QueryOwnershipType QueryOwnershipType,
) (*UpdateAggregateAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateAggregateAlert",
		Query:  UpdateAggregateAlert_Operation,
		Variables: &__UpdateAggregateAlertInput{
			SearchDomainName:      SearchDomainName,
			ID:                    ID,
			Name:                  Name,
			Description:           Description,
			QueryString:           QueryString,
			SearchIntervalSeconds: SearchIntervalSeconds,
			ActionIdsOrNames:      ActionIdsOrNames,
			Labels:                Labels,
			Enabled:               Enabled,
			ThrottleField:         ThrottleField,
			ThrottleTimeSeconds:   ThrottleTimeSeconds,
			TriggerMode:           TriggerMode,
			QueryTimestampMode:    QueryTimestampMode,
			QueryOwnershipType:    QueryOwnershipType,
		},
	}
	var err_ error

	var data_ UpdateAggregateAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateAlert.
const UpdateAlert_Operation = `
mutation UpdateAlert ($SearchDomainName: String!, $AlertID: String!, $Name: String!, $Description: String, $QueryString: String!, $QueryStart: String!, $ThrottleTimeMillis: Long!, $Enabled: Boolean!, $Actions: [String!]!, $Labels: [String!]!, $QueryOwnershipType: QueryOwnershipType, $ThrottleField: String) {
	updateAlert(input: {id:$AlertID,viewName:$SearchDomainName,name:$Name,description:$Description,queryString:$QueryString,queryStart:$QueryStart,throttleTimeMillis:$ThrottleTimeMillis,enabled:$Enabled,actions:$Actions,labels:$Labels,queryOwnershipType:$QueryOwnershipType,throttleField:$ThrottleField}) {
		... AlertDetails
	}
}
fragment AlertDetails on Alert {
	id
	name
	queryString
	queryStart
	throttleField
	description
	throttleTimeMillis
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func UpdateAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	AlertID string,
	Name string,
	Description *string,
	QueryString string,
	QueryStart string,
	ThrottleTimeMillis int64,
	Enabled bool,
	Actions []string,
	Labels []string,
	QueryOwnershipType *QueryOwnershipType,
	ThrottleField *string,
) (*UpdateAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateAlert",
		Query:  UpdateAlert_Operation,
		Variables: &__UpdateAlertInput{
			SearchDomainName:   SearchDomainName,
			AlertID:            AlertID,
			Name:               Name,
			Description:        Description,
			QueryString:        QueryString,
			QueryStart:         QueryStart,
			ThrottleTimeMillis: ThrottleTimeMillis,
			Enabled:            Enabled,
			Actions:            Actions,
			Labels:             Labels,
			QueryOwnershipType: QueryOwnershipType,
			ThrottleField:      ThrottleField,
		},
	}
	var err_ error

	var data_ UpdateAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateDescriptionForSearchDomain.
const UpdateDescriptionForSearchDomain_Operation = `
mutation UpdateDescriptionForSearchDomain ($SearchDomainName: String!, $NewDescription: String!) {
	updateDescriptionForSearchDomain(name: $SearchDomainName, newDescription: $NewDescription) {
		__typename
	}
}
`

func UpdateDescriptionForSearchDomain(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	NewDescription string,
) (*UpdateDescriptionForSearchDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateDescriptionForSearchDomain",
		Query:  UpdateDescriptionForSearchDomain_Operation,
		Variables: &__UpdateDescriptionForSearchDomainInput{
			SearchDomainName: SearchDomainName,
			NewDescription:   NewDescription,
		},
	}
	var err_ error

	var data_ UpdateDescriptionForSearchDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateEmailAction.
const UpdateEmailAction_Operation = `
mutation UpdateEmailAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $Recipients: [String!]!, $SubjectTemplate: String, $BodyTemplate: String, $UseProxy: Boolean!) {
	updateEmailAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,recipients:$Recipients,subjectTemplate:$SubjectTemplate,bodyTemplate:$BodyTemplate,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateEmailAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	Recipients []string,
	SubjectTemplate *string,
	BodyTemplate *string,
	UseProxy bool,
) (*UpdateEmailActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateEmailAction",
		Query:  UpdateEmailAction_Operation,
		Variables: &__UpdateEmailActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			Recipients:       Recipients,
			SubjectTemplate:  SubjectTemplate,
			BodyTemplate:     BodyTemplate,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateEmailActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateFilterAlert.
const UpdateFilterAlert_Operation = `
mutation UpdateFilterAlert ($SearchDomainName: RepoOrViewName!, $ID: String!, $Name: String!, $Description: String, $QueryString: String!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $Enabled: Boolean!, $ThrottleField: String, $ThrottleTimeSeconds: Long!, $QueryOwnershipType: QueryOwnershipType!) {
	updateFilterAlert(input: {viewName:$SearchDomainName,id:$ID,name:$Name,description:$Description,queryString:$QueryString,actionIdsOrNames:$ActionIdsOrNames,labels:$Labels,enabled:$Enabled,throttleField:$ThrottleField,throttleTimeSeconds:$ThrottleTimeSeconds,queryOwnershipType:$QueryOwnershipType}) {
		... FilterAlertDetails
	}
}
fragment FilterAlertDetails on FilterAlert {
	id
	name
	description
	queryString
	throttleTimeSeconds
	throttleField
	labels
	enabled
	actions {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func UpdateFilterAlert(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ID string,
	Name string,
	Description *string,
	QueryString string,
	ActionIdsOrNames []string,
	Labels []string,
	Enabled bool,
	ThrottleField *string,
	ThrottleTimeSeconds int64,
	QueryOwnershipType QueryOwnershipType,
) (*UpdateFilterAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateFilterAlert",
		Query:  UpdateFilterAlert_Operation,
		Variables: &__UpdateFilterAlertInput{
			SearchDomainName:    SearchDomainName,
			ID:                  ID,
			Name:                Name,
			Description:         Description,
			QueryString:         QueryString,
			ActionIdsOrNames:    ActionIdsOrNames,
			Labels:              Labels,
			Enabled:             Enabled,
			ThrottleField:       ThrottleField,
			ThrottleTimeSeconds: ThrottleTimeSeconds,
			QueryOwnershipType:  QueryOwnershipType,
		},
	}
	var err_ error

	var data_ UpdateFilterAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateHumioRepoAction.
const UpdateHumioRepoAction_Operation = `
mutation UpdateHumioRepoAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $IngestToken: String!) {
	updateHumioRepoAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,ingestToken:$IngestToken}) {
		__typename
	}
}
`

func UpdateHumioRepoAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	IngestToken string,
) (*UpdateHumioRepoActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateHumioRepoAction",
		Query:  UpdateHumioRepoAction_Operation,
		Variables: &__UpdateHumioRepoActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			IngestToken:      IngestToken,
		},
	}
	var err_ error

	var data_ UpdateHumioRepoActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateIngestBasedRetention.
const UpdateIngestBasedRetention_Operation = `
mutation UpdateIngestBasedRetention ($RepositoryName: String!, $IngestInGB: Float) {
	updateRetention(repositoryName: $RepositoryName, ingestSizeBasedRetention: $IngestInGB) {
		__typename
	}
}
`

func UpdateIngestBasedRetention(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	IngestInGB *float64,
) (*UpdateIngestBasedRetentionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateIngestBasedRetention",
		Query:  UpdateIngestBasedRetention_Operation,
		Variables: &__UpdateIngestBasedRetentionInput{
			RepositoryName: RepositoryName,
			IngestInGB:     IngestInGB,
		},
	}
	var err_ error

	var data_ UpdateIngestBasedRetentionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateLicenseKey.
const UpdateLicenseKey_Operation = `
mutation UpdateLicenseKey ($LicenseKey: String!) {
	updateLicenseKey(license: $LicenseKey) {
		__typename
	}
}
`

func UpdateLicenseKey(
	ctx_ context.Context,
	client_ graphql.Client,
	LicenseKey string,
) (*UpdateLicenseKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateLicenseKey",
		Query:  UpdateLicenseKey_Operation,
		Variables: &__UpdateLicenseKeyInput{
			LicenseKey: LicenseKey,
		},
	}
	var err_ error

	var data_ UpdateLicenseKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateOpsGenieAction.
const UpdateOpsGenieAction_Operation = `
mutation UpdateOpsGenieAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $ApiUrl: String!, $GenieKey: String!, $UseProxy: Boolean!) {
	updateOpsGenieAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,apiUrl:$ApiUrl,genieKey:$GenieKey,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateOpsGenieAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	ApiUrl string,
	GenieKey string,
	UseProxy bool,
) (*UpdateOpsGenieActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateOpsGenieAction",
		Query:  UpdateOpsGenieAction_Operation,
		Variables: &__UpdateOpsGenieActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			ApiUrl:           ApiUrl,
			GenieKey:         GenieKey,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateOpsGenieActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdatePagerDutyAction.
const UpdatePagerDutyAction_Operation = `
mutation UpdatePagerDutyAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $Severity: String!, $RoutingKey: String!, $UseProxy: Boolean!) {
	updatePagerDutyAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,severity:$Severity,routingKey:$RoutingKey,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdatePagerDutyAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	Severity string,
	RoutingKey string,
	UseProxy bool,
) (*UpdatePagerDutyActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdatePagerDutyAction",
		Query:  UpdatePagerDutyAction_Operation,
		Variables: &__UpdatePagerDutyActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			Severity:         Severity,
			RoutingKey:       RoutingKey,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdatePagerDutyActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateS3ArchivingConfiguration.
const UpdateS3ArchivingConfiguration_Operation = `
mutation UpdateS3ArchivingConfiguration ($RepositoryName: String!, $BucketName: String!, $BucketRegion: String!, $Format: S3ArchivingFormat!) {
	s3ConfigureArchiving(repositoryName: $RepositoryName, bucket: $BucketName, region: $BucketRegion, format: $Format) {
		__typename
	}
}
`

func UpdateS3ArchivingConfiguration(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	BucketName string,
	BucketRegion string,
	Format S3ArchivingFormat,
) (*UpdateS3ArchivingConfigurationResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateS3ArchivingConfiguration",
		Query:  UpdateS3ArchivingConfiguration_Operation,
		Variables: &__UpdateS3ArchivingConfigurationInput{
			RepositoryName: RepositoryName,
			BucketName:     BucketName,
			BucketRegion:   BucketRegion,
			Format:         Format,
		},
	}
	var err_ error

	var data_ UpdateS3ArchivingConfigurationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateScheduledSearch.
const UpdateScheduledSearch_Operation = `
mutation UpdateScheduledSearch ($SearchDomainName: String!, $ID: String!, $Name: String!, $Description: String, $QueryString: String!, $QueryStart: String!, $QueryEnd: String!, $Schedule: String!, $TimeZone: String!, $BackfillLimit: Int!, $Enabled: Boolean!, $ActionIdsOrNames: [String!]!, $Labels: [String!]!, $QueryOwnershipType: QueryOwnershipType) {
	updateScheduledSearch(input: {viewName:$SearchDomainName,id:$ID,name:$Name,description:$Description,queryString:$QueryString,queryStart:$QueryStart,queryEnd:$QueryEnd,schedule:$Schedule,timeZone:$TimeZone,backfillLimit:$BackfillLimit,enabled:$Enabled,actions:$ActionIdsOrNames,labels:$Labels,queryOwnershipType:$QueryOwnershipType}) {
		... ScheduledSearchDetails
	}
}
fragment ScheduledSearchDetails on ScheduledSearch {
	id
	name
	description
	queryString
	start
	end
	timeZone
	schedule
	backfillLimit
	enabled
	labels
	actionsV2 {
		__typename
		... ActionName
	}
	queryOwnership {
		__typename
		... QueryOwnership
	}
}
fragment ActionName on Action {
	name
}
fragment QueryOwnership on QueryOwnership {
	__typename
}
`

func UpdateScheduledSearch(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ID string,
	Name string,
	Description *string,
	QueryString string,
	QueryStart string,
	QueryEnd string,
	Schedule string,
	TimeZone string,
	BackfillLimit int,
	Enabled bool,
	ActionIdsOrNames []string,
	Labels []string,
	QueryOwnershipType *QueryOwnershipType,
) (*UpdateScheduledSearchResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateScheduledSearch",
		Query:  UpdateScheduledSearch_Operation,
		Variables: &__UpdateScheduledSearchInput{
			SearchDomainName:   SearchDomainName,
			ID:                 ID,
			Name:               Name,
			Description:        Description,
			QueryString:        QueryString,
			QueryStart:         QueryStart,
			QueryEnd:           QueryEnd,
			Schedule:           Schedule,
			TimeZone:           TimeZone,
			BackfillLimit:      BackfillLimit,
			Enabled:            Enabled,
			ActionIdsOrNames:   ActionIdsOrNames,
			Labels:             Labels,
			QueryOwnershipType: QueryOwnershipType,
		},
	}
	var err_ error

	var data_ UpdateScheduledSearchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateSlackAction.
const UpdateSlackAction_Operation = `
mutation UpdateSlackAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $Fields: [SlackFieldEntryInput!]!, $Url: String!, $UseProxy: Boolean!) {
	updateSlackAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,fields:$Fields,url:$Url,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateSlackAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	Fields []SlackFieldEntryInput,
	Url string,
	UseProxy bool,
) (*UpdateSlackActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateSlackAction",
		Query:  UpdateSlackAction_Operation,
		Variables: &__UpdateSlackActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			Fields:           Fields,
			Url:              Url,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateSlackActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateSlackPostMessageAction.
const UpdateSlackPostMessageAction_Operation = `
mutation UpdateSlackPostMessageAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $ApiToken: String!, $Channels: [String!]!, $Fields: [SlackFieldEntryInput!]!, $UseProxy: Boolean!) {
	updateSlackPostMessageAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,apiToken:$ApiToken,channels:$Channels,fields:$Fields,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateSlackPostMessageAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	ApiToken string,
	Channels []string,
	Fields []SlackFieldEntryInput,
	UseProxy bool,
) (*UpdateSlackPostMessageActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateSlackPostMessageAction",
		Query:  UpdateSlackPostMessageAction_Operation,
		Variables: &__UpdateSlackPostMessageActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			ApiToken:         ApiToken,
			Channels:         Channels,
			Fields:           Fields,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateSlackPostMessageActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateStorageBasedRetention.
const UpdateStorageBasedRetention_Operation = `
mutation UpdateStorageBasedRetention ($RepositoryName: String!, $StorageInGB: Float) {
	updateRetention(repositoryName: $RepositoryName, storageSizeBasedRetention: $StorageInGB) {
		__typename
	}
}
`

func UpdateStorageBasedRetention(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	StorageInGB *float64,
) (*UpdateStorageBasedRetentionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateStorageBasedRetention",
		Query:  UpdateStorageBasedRetention_Operation,
		Variables: &__UpdateStorageBasedRetentionInput{
			RepositoryName: RepositoryName,
			StorageInGB:    StorageInGB,
		},
	}
	var err_ error

	var data_ UpdateStorageBasedRetentionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateTimeBasedRetention.
const UpdateTimeBasedRetention_Operation = `
mutation UpdateTimeBasedRetention ($RepositoryName: String!, $RetentionInDays: Float) {
	updateRetention(repositoryName: $RepositoryName, timeBasedRetention: $RetentionInDays) {
		__typename
	}
}
`

func UpdateTimeBasedRetention(
	ctx_ context.Context,
	client_ graphql.Client,
	RepositoryName string,
	RetentionInDays *float64,
) (*UpdateTimeBasedRetentionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateTimeBasedRetention",
		Query:  UpdateTimeBasedRetention_Operation,
		Variables: &__UpdateTimeBasedRetentionInput{
			RepositoryName:  RepositoryName,
			RetentionInDays: RetentionInDays,
		},
	}
	var err_ error

	var data_ UpdateTimeBasedRetentionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateVictorOpsAction.
const UpdateVictorOpsAction_Operation = `
mutation UpdateVictorOpsAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $MessageType: String!, $NotifyUrl: String!, $UseProxy: Boolean!) {
	updateVictorOpsAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,messageType:$MessageType,notifyUrl:$NotifyUrl,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateVictorOpsAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	MessageType string,
	NotifyUrl string,
	UseProxy bool,
) (*UpdateVictorOpsActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateVictorOpsAction",
		Query:  UpdateVictorOpsAction_Operation,
		Variables: &__UpdateVictorOpsActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			MessageType:      MessageType,
			NotifyUrl:        NotifyUrl,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateVictorOpsActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateViewConnections.
const UpdateViewConnections_Operation = `
mutation UpdateViewConnections ($ViewName: String!, $Connections: [ViewConnectionInput!]!) {
	updateView(viewName: $ViewName, connections: $Connections) {
		name
	}
}
`

func UpdateViewConnections(
	ctx_ context.Context,
	client_ graphql.Client,
	ViewName string,
	Connections []ViewConnectionInput,
) (*UpdateViewConnectionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateViewConnections",
		Query:  UpdateViewConnections_Operation,
		Variables: &__UpdateViewConnectionsInput{
			ViewName:    ViewName,
			Connections: Connections,
		},
	}
	var err_ error

	var data_ UpdateViewConnectionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateWebhookAction.
const UpdateWebhookAction_Operation = `
mutation UpdateWebhookAction ($SearchDomainName: String!, $ActionID: String!, $ActionName: String!, $Url: String!, $Method: String!, $Headers: [HttpHeaderEntryInput!]!, $BodyTemplate: String!, $IgnoreSSL: Boolean!, $UseProxy: Boolean!) {
	updateWebhookAction(input: {viewName:$SearchDomainName,id:$ActionID,name:$ActionName,url:$Url,method:$Method,headers:$Headers,bodyTemplate:$BodyTemplate,ignoreSSL:$IgnoreSSL,useProxy:$UseProxy}) {
		__typename
	}
}
`

func UpdateWebhookAction(
	ctx_ context.Context,
	client_ graphql.Client,
	SearchDomainName string,
	ActionID string,
	ActionName string,
	Url string,
	Method string,
	Headers []HttpHeaderEntryInput,
	BodyTemplate string,
	IgnoreSSL bool,
	UseProxy bool,
) (*UpdateWebhookActionResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateWebhookAction",
		Query:  UpdateWebhookAction_Operation,
		Variables: &__UpdateWebhookActionInput{
			SearchDomainName: SearchDomainName,
			ActionID:         ActionID,
			ActionName:       ActionName,
			Url:              Url,
			Method:           Method,
			Headers:          Headers,
			BodyTemplate:     BodyTemplate,
			IgnoreSSL:        IgnoreSSL,
			UseProxy:         UseProxy,
		},
	}
	var err_ error

	var data_ UpdateWebhookActionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
